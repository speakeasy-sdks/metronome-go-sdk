// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	metronomegosdk "github.com/speakeasy-sdks/metronome-go-sdk"
	"github.com/speakeasy-sdks/metronome-go-sdk/models/operations"
	"github.com/speakeasy-sdks/metronome-go-sdk/types"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestCustomerCommits_ListCustomerCommits_(t *testing.T) {
	s := metronomegosdk.New(
		metronomegosdk.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
	)
	var request *operations.ListCustomerCommitsRequestBody = &operations.ListCustomerCommitsRequestBody{
		CustomerID:     "13117714-3f05-48e5-a6e9-a66093f13b4d",
		CommitID:       metronomegosdk.String("6162d87b-e5db-4a33-b7f2-76ce6ead4e85"),
		IncludeLedgers: metronomegosdk.Bool(true),
	}
	ctx := context.Background()
	res, err := s.CustomerCommits.List(ctx, request)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, operations.ListCustomerCommitsResponseBody{
		Data: []operations.ListCustomerCommitsData{
			operations.ListCustomerCommitsData{
				ID:       "62c0cb84-bf3f-48b9-9bcf-a8ddf8c1cf35",
				Type:     operations.ListCustomerCommitsTypePrepaid,
				Name:     metronomegosdk.String("My test commit"),
				Priority: metronomegosdk.Float64(100),
				Product: operations.Product{
					ID:   "2e30f074-d04c-412e-a134-851ebfa5ceb2",
					Name: "My product A",
				},
				AccessSchedule: &operations.ListCustomerCommitsAccessSchedule{
					CreditType: &operations.ListCustomerCommitsCreditType{
						Name: "USD (cents)",
						ID:   "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
					},
					ScheduleItems: []operations.ListCustomerCommitsScheduleItems{
						operations.ListCustomerCommitsScheduleItems{
							ID:           "2d45952c-5a6e-43a9-8aab-f61ee21be81a",
							Amount:       10000000,
							StartingAt:   types.MustTimeFromString("2020-02-01T00:00:00.000Z"),
							EndingBefore: types.MustTimeFromString("2021-02-01T00:00:00.000Z"),
						},
					},
				},
				InvoiceSchedule: &operations.ListCustomerCommitsInvoiceSchedule{
					CreditType: &operations.ListCustomerCommitsCustomerCommitsCreditType{
						Name: "USD (cents)",
						ID:   "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
					},
					ScheduleItems: []operations.ListCustomerCommitsCustomerCommitsScheduleItems{
						operations.ListCustomerCommitsCustomerCommitsScheduleItems{
							ID:        "f15e4e23-f74e-4de4-9b3a-8b07434116c4",
							InvoiceID: "525b9759-7bbd-4a05-aab1-d7c43c976b57",
							Amount:    10000000,
							UnitPrice: 10000000,
							Quantity:  1,
							Timestamp: types.MustTimeFromString("2020-03-01T00:00:00.000Z"),
						},
					},
				},
				InvoiceContract: &operations.InvoiceContract{
					ID: "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
				},
				Description:      metronomegosdk.String("My test commit description"),
				RolloverFraction: metronomegosdk.Float64(0.1),
				ApplicableProductIds: []string{
					"13a2179b-f0cb-460b-85a1-cd42964ca533",
				},
				ApplicableContractIds: []string{
					"d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
				},
				Ledger: []operations.Ledger{
					operations.CreateLedgerListCustomerCommitsLedger2(
						operations.ListCustomerCommitsLedger2{
							Type:      operations.ListCustomerCommitsLedgerTypePrepaidCommitAutomatedInvoiceDeduction,
							Timestamp: types.MustTimeFromString("2020-03-01T00:00:00.000Z"),
							Amount:    10000000,
							SegmentID: "2d45952c-5a6e-43a9-8aab-f61ee21be81a",
							InvoiceID: "525b9759-7bbd-4a05-aab1-d7c43c976b57",
						},
					),
				},
			},
		},
		NextPage: nil,
	}, *res.Object)
}

func TestCustomerCommits_CreateCustomerCommit_(t *testing.T) {
	s := metronomegosdk.New(
		metronomegosdk.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
	)
	var request *operations.CreateCustomerCommitRequestBody = &operations.CreateCustomerCommitRequestBody{
		CustomerID: "13117714-3f05-48e5-a6e9-a66093f13b4d",
		Type:       operations.CreateCustomerCommitTypePrepaidLower,
		Name:       metronomegosdk.String("My Commit"),
		Priority:   100,
		ProductID:  "f14d6729-6a44-4b13-9908-9387f1918790",
		AccessSchedule: operations.CreateCustomerCommitAccessSchedule{
			CreditTypeID: metronomegosdk.String("2714e483-4ff1-48e4-9e25-ac732e8f24f2"),
			ScheduleItems: []operations.CreateCustomerCommitScheduleItems{
				operations.CreateCustomerCommitScheduleItems{
					Amount:       1000,
					StartingAt:   types.MustTimeFromString("2020-01-01T00:00:00.000Z"),
					EndingBefore: types.MustTimeFromString("2020-02-01T00:00:00.000Z"),
				},
			},
		},
		InvoiceSchedule: &operations.CreateCustomerCommitInvoiceSchedule{
			CreditTypeID: metronomegosdk.String("2714e483-4ff1-48e4-9e25-ac732e8f24f2"),
			ScheduleItems: []operations.CreateCustomerCommitCustomerCommitsScheduleItems{
				operations.CreateCustomerCommitCustomerCommitsScheduleItems{
					UnitPrice: metronomegosdk.Float64(10000000),
					Quantity:  metronomegosdk.Float64(1),
					Amount:    metronomegosdk.Float64(10000000),
					Timestamp: types.MustTimeFromString("2020-03-01T00:00:00.000Z"),
				},
			},
		},
	}
	ctx := context.Background()
	res, err := s.CustomerCommits.Create(ctx, request)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, operations.CreateCustomerCommitResponseBody{
		Data: operations.CreateCustomerCommitData{
			ID: "6162d87b-e5db-4a33-b7f2-76ce6ead4e85",
		},
	}, *res.Object)
}

func TestCustomerCommits_UpdateCommitEndDate_(t *testing.T) {
	s := metronomegosdk.New(
		metronomegosdk.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
	)
	var request *operations.UpdateCommitEndDateRequestBody = &operations.UpdateCommitEndDateRequestBody{
		CustomerID:           "13117714-3f05-48e5-a6e9-a66093f13b4d",
		CommitID:             "6162d87b-e5db-4a33-b7f2-76ce6ead4e85",
		AccessEndingBefore:   types.MustNewTimeFromString("2020-01-01T00:00:00.000Z"),
		InvoicesEndingBefore: types.MustNewTimeFromString("2020-01-01T00:00:00.000Z"),
	}
	ctx := context.Background()
	res, err := s.CustomerCommits.UpdateEndDate(ctx, request)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, operations.UpdateCommitEndDateResponseBody{
		Data: operations.UpdateCommitEndDateData{
			ID: "6162d87b-e5db-4a33-b7f2-76ce6ead4e85",
		},
	}, *res.Object)
}
