// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	metronomegosdk "github.com/speakeasy-sdks/metronome-go-sdk"
	"github.com/speakeasy-sdks/metronome-go-sdk/models/operations"
	"github.com/speakeasy-sdks/metronome-go-sdk/types"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestContracts_GetContract_(t *testing.T) {
	s := metronomegosdk.New(
		metronomegosdk.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
	)
	var request *operations.GetContractRequestBody = &operations.GetContractRequestBody{
		CustomerID: "13117714-3f05-48e5-a6e9-a66093f13b4d",
		ContractID: "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
	}
	ctx := context.Background()
	res, err := s.Contracts.Get(ctx, request)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, operations.GetContractResponseBody{
		Data: operations.GetContractData{
			ID:         "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
			CustomerID: "e3fd63fd-fc9f-4153-a543-1fc2261a0e1c",
			Initial: operations.GetContractInitial{
				Name:       metronomegosdk.String("My contract"),
				RateCardID: metronomegosdk.String("92f3080d-27ca-4306-a23f-2430de61851e"),
				StartingAt: types.MustTimeFromString("2020-01-01T00:00:00.000Z"),
				Commits: []operations.GetContractContractsResponseCommits{
					operations.GetContractContractsResponseCommits{
						ID:   "62c0cb84-bf3f-48b9-9bcf-a8ddf8c1cf35",
						Type: operations.GetContractTypePrepaid,
						Name: metronomegosdk.String("My test commit"),
						Product: operations.GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialProduct{
							ID:   "2e30f074-d04c-412e-a134-851ebfa5ceb2",
							Name: "My product A",
						},
						AccessSchedule: &operations.GetContractContractsResponse200ApplicationJSONResponseBodyAccessSchedule{
							CreditType: &operations.GetContractContractsResponse200ApplicationJSONCreditType{
								Name: "USD (cents)",
								ID:   "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
							},
							ScheduleItems: []operations.GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialScheduleItems{
								operations.GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialScheduleItems{
									ID:           "2d45952c-5a6e-43a9-8aab-f61ee21be81a",
									Amount:       10000000,
									StartingAt:   types.MustTimeFromString("2020-02-01T00:00:00.000Z"),
									EndingBefore: types.MustTimeFromString("2021-02-01T00:00:00.000Z"),
								},
							},
						},
						InvoiceSchedule: &operations.GetContractContractsResponseInvoiceSchedule{
							CreditType: &operations.GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialCreditType{
								Name: "USD (cents)",
								ID:   "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
							},
							ScheduleItems: []operations.GetContractScheduleItems{
								operations.GetContractScheduleItems{
									ID:        "f15e4e23-f74e-4de4-9b3a-8b07434116c4",
									InvoiceID: "525b9759-7bbd-4a05-aab1-d7c43c976b57",
									Amount:    10000000,
									UnitPrice: 10000000,
									Quantity:  1,
									Timestamp: types.MustTimeFromString("2020-03-01T00:00:00.000Z"),
								},
							},
						},
						Description:      metronomegosdk.String("My test commit description"),
						RolloverFraction: metronomegosdk.Float64(0.1),
						ApplicableProductIds: []string{
							"13a2179b-f0cb-460b-85a1-cd42964ca533",
						},
						Ledger: []operations.GetContractContractsResponse200ApplicationJSONResponseBodyLedger{
							operations.CreateGetContractContractsResponse200ApplicationJSONResponseBodyLedgerGetContractLedgerContractsResponse200ApplicationJSON2(
								operations.GetContractLedgerContractsResponse200ApplicationJSON2{
									Type:      operations.GetContractLedgerTypePrepaidCommitAutomatedInvoiceDeduction,
									Timestamp: types.MustTimeFromString("2020-03-01T00:00:00.000Z"),
									Amount:    10000000,
									SegmentID: "2d45952c-5a6e-43a9-8aab-f61ee21be81a",
									InvoiceID: "525b9759-7bbd-4a05-aab1-d7c43c976b57",
								},
							),
						},
					},
				},
				Overrides: []operations.GetContractContractsResponseOverrides{
					operations.GetContractContractsResponseOverrides{
						ID: "6cf3292a-e85c-4be6-822c-e25ba9d19757",
						Product: &operations.GetContractContractsProduct{
							ID:   "eae8903b-693b-41a7-8c0b-f23748c9a9c8",
							Name: "My product B",
						},
						StartingAt: types.MustTimeFromString("2020-01-01T00:00:00.000Z"),
						Type:       operations.GetContractContractsResponseTypeMultiplier.ToPointer(),
						Multiplier: metronomegosdk.Float64(0.1),
					},
				},
				ScheduledCharges: []operations.GetContractContractsResponseScheduledCharges{
					operations.GetContractContractsResponseScheduledCharges{
						ID: "89bd9d8d-69a6-474e-8f46-7cc8796ed151",
						Product: operations.GetContractContractsResponse200Product{
							ID:   "a05dfc2d-df7c-4c78-8a1b-a928fc816742",
							Name: "<value>",
						},
						Schedule: operations.GetContractSchedule{},
					},
				},
				Transitions: []operations.Transitions{
					operations.Transitions{
						Type:           operations.GetContractContractsResponse200TypeRenewal,
						FromContractID: "9bf48856-b430-42f4-844f-4d2ea85bcff8",
						ToContractID:   "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
					},
				},
				ResellerRoyalties: []operations.GetContractContractsResponseResellerRoyalties{
					operations.GetContractContractsResponseResellerRoyalties{
						ResellerType:       operations.GetContractContractsResponseResellerTypeGcpProService,
						Fraction:           7369.18,
						NetsuiteResellerID: "<value>",
						StartingAt:         types.MustTimeFromString("2023-05-15T22:34:42.373Z"),
					},
				},
				CreatedAt:           types.MustTimeFromString("2019-12-31T14:23:55.234Z"),
				CreatedBy:           "Alice",
				NetPaymentTermsDays: metronomegosdk.Float64(7),
				EndingBefore:        types.MustNewTimeFromString("2022-01-01T00:00:00.000Z"),
				UsageStatementSchedule: operations.GetContractContractsUsageStatementSchedule{
					Frequency: operations.GetContractContractsFrequencyMonthlyUpper,
				},
			},
			Current: operations.GetContractCurrent{
				RateCardID: metronomegosdk.String("92f3080d-27ca-4306-a23f-2430de61851e"),
				StartingAt: types.MustTimeFromString("2020-01-01T00:00:00.000Z"),
				Commits: []operations.GetContractCommits{
					operations.GetContractCommits{
						ID:   "62c0cb84-bf3f-48b9-9bcf-a8ddf8c1cf35",
						Type: operations.GetContractContractsResponse200ApplicationJSONTypePrepaid,
						Name: metronomegosdk.String("My test commit"),
						Product: operations.GetContractContractsResponse200ApplicationJSONProduct{
							ID:   "2e30f074-d04c-412e-a134-851ebfa5ceb2",
							Name: "My product A",
						},
						AccessSchedule: &operations.GetContractContractsAccessSchedule{
							CreditType: &operations.GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditType{
								Name: "USD (cents)",
								ID:   "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
							},
							ScheduleItems: []operations.GetContractContractsResponse200ApplicationJSONScheduleItems{
								operations.GetContractContractsResponse200ApplicationJSONScheduleItems{
									ID:           "2d45952c-5a6e-43a9-8aab-f61ee21be81a",
									Amount:       10000000,
									StartingAt:   types.MustTimeFromString("2020-02-01T00:00:00.000Z"),
									EndingBefore: types.MustTimeFromString("2021-02-01T00:00:00.000Z"),
								},
							},
						},
						InvoiceSchedule: &operations.GetContractInvoiceSchedule{
							CreditType: &operations.GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsCreditType{
								Name: "USD (cents)",
								ID:   "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
							},
							ScheduleItems: []operations.GetContractContractsResponse200ApplicationJSONResponseBodyScheduleItems{
								operations.GetContractContractsResponse200ApplicationJSONResponseBodyScheduleItems{
									ID:        "f15e4e23-f74e-4de4-9b3a-8b07434116c4",
									InvoiceID: "525b9759-7bbd-4a05-aab1-d7c43c976b57",
									Amount:    10000000,
									UnitPrice: 10000000,
									Quantity:  1,
									Timestamp: types.MustTimeFromString("2020-03-01T00:00:00.000Z"),
								},
							},
						},
						Description:      metronomegosdk.String("My test commit description"),
						RolloverFraction: metronomegosdk.Float64(0.1),
						ApplicableProductIds: []string{
							"13a2179b-f0cb-460b-85a1-cd42964ca533",
						},
					},
				},
				Overrides: []operations.GetContractOverrides{
					operations.GetContractOverrides{
						ID: "6cf3292a-e85c-4be6-822c-e25ba9d19757",
						Product: &operations.GetContractContractsResponse200ApplicationJSONResponseBodyDataProduct{
							ID:   "eae8903b-693b-41a7-8c0b-f23748c9a9c8",
							Name: "My product B",
						},
						StartingAt: types.MustTimeFromString("2020-01-01T00:00:00.000Z"),
						Type:       operations.GetContractContractsResponse200ApplicationJSONResponseBodyDataTypeMultiplier.ToPointer(),
						Multiplier: metronomegosdk.Float64(0.1),
					},
				},
				ScheduledCharges: []operations.GetContractScheduledCharges{
					operations.GetContractScheduledCharges{
						ID: "8e511ff1-3fd5-4d86-bc89-1e80239874bf",
						Product: operations.GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesProduct{
							ID:   "2e30f074-d04c-412e-a134-851ebfa5ceb2",
							Name: "My product A",
						},
						Schedule: operations.GetContractContractsResponseSchedule{
							ScheduleItems: []operations.GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems{
								operations.GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems{
									ID:        "6ca40ebc-9c01-484e-a64e-4e47fbbd0ebe",
									InvoiceID: "5cced82b-5464-41b4-9ea7-3e080e0a4dba",
									Amount:    1000000,
									UnitPrice: 1000000,
									Quantity:  1,
									Timestamp: types.MustTimeFromString("2020-02-15T00:00:00.000Z"),
								},
							},
						},
						Name: metronomegosdk.String("My test scheduled charge"),
					},
				},
				Transitions: []operations.GetContractTransitions{
					operations.GetContractTransitions{
						Type:           operations.GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentTypeRenewal,
						FromContractID: "9bf48856-b430-42f4-844f-4d2ea85bcff8",
						ToContractID:   "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
					},
				},
				ResellerRoyalties: []operations.GetContractResellerRoyalties{
					operations.GetContractResellerRoyalties{
						ResellerType:       operations.GetContractResellerTypeAws,
						Fraction:           5684.34,
						NetsuiteResellerID: "<value>",
						StartingAt:         types.MustTimeFromString("2022-05-29T04:46:43.786Z"),
					},
				},
				CreatedAt:           types.MustTimeFromString("2019-12-31T14:23:55.234Z"),
				CreatedBy:           "Alice",
				NetPaymentTermsDays: metronomegosdk.Float64(7),
				EndingBefore:        types.MustNewTimeFromString("2022-01-01T00:00:00.000Z"),
				UsageStatementSchedule: operations.GetContractUsageStatementSchedule{
					Frequency: operations.GetContractFrequencyMonthlyUpper,
				},
			},
			Amendments: []operations.Amendments{
				operations.Amendments{
					ID:         "4e2fab26-31ea-473c-b07d-1ce10e7c0146",
					StartingAt: types.MustTimeFromString("2020-04-01T00:00:00.000Z"),
					Commits: []operations.GetContractContractsCommits{
						operations.GetContractContractsCommits{
							ID:   "05929396-fea7-4596-ab10-faaa2352c595",
							Type: operations.GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsTypePrepaid,
							Product: operations.GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsProduct{
								ID:   "907aff1a-3a2f-4a94-a773-9251aa52c3f5",
								Name: "<value>",
							},
						},
					},
					Overrides: []operations.GetContractContractsOverrides{
						operations.GetContractContractsOverrides{
							ID:         "ad019da1-ffe7-48f0-97b0-074f15471b5e",
							StartingAt: types.MustTimeFromString("2023-03-31T00:46:25.126Z"),
						},
					},
					ScheduledCharges: []operations.GetContractContractsScheduledCharges{
						operations.GetContractContractsScheduledCharges{
							ID: "8e511ff1-3fd5-4d86-bc89-1e80239874bf",
							Product: operations.GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesProduct{
								ID:   "2e30f074-d04c-412e-a134-851ebfa5ceb2",
								Name: "My product A",
							},
							Schedule: operations.GetContractContractsResponse200ApplicationJSONSchedule{
								ScheduleItems: []operations.GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems{
									operations.GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems{
										ID:        "6ca40ebc-9c01-484e-a64e-4e47fbbd0ebe",
										InvoiceID: "5cced82b-5464-41b4-9ea7-3e080e0a4dba",
										Amount:    1000000,
										UnitPrice: 1000000,
										Quantity:  1,
										Timestamp: types.MustTimeFromString("2020-02-15T00:00:00.000Z"),
									},
								},
							},
							Name: metronomegosdk.String("My test scheduled charge"),
						},
					},
					CreatedAt: types.MustTimeFromString("2019-12-31T16:12:45.123Z"),
					CreatedBy: "Bob",
				},
			},
			CustomFields: map[string]string{
				"x_account_id": "KyVnHhSBWl7eY2bl",
			},
		},
	}, *res.Object)
}

func TestContracts_ListContracts_(t *testing.T) {
	s := metronomegosdk.New(
		metronomegosdk.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
	)
	var request *operations.ListContractsRequestBody = &operations.ListContractsRequestBody{
		CustomerID: "9b85c1c1-5238-4f2a-a409-61412905e1e1",
	}
	ctx := context.Background()
	res, err := s.Contracts.List(ctx, request)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, operations.ListContractsResponseBody{
		Data: []operations.ListContractsData{
			operations.ListContractsData{
				ID:         "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
				CustomerID: "e3fd63fd-fc9f-4153-a543-1fc2261a0e1c",
				Initial: operations.ListContractsInitial{
					Name:       metronomegosdk.String("My contract"),
					RateCardID: metronomegosdk.String("92f3080d-27ca-4306-a23f-2430de61851e"),
					StartingAt: types.MustTimeFromString("2020-01-01T00:00:00.000Z"),
					Commits: []operations.ListContractsCommits{
						operations.ListContractsCommits{
							ID:   "62c0cb84-bf3f-48b9-9bcf-a8ddf8c1cf35",
							Type: operations.ListContractsTypePrepaid,
							Name: metronomegosdk.String("My test commit"),
							Product: operations.ListContractsProduct{
								ID:   "2e30f074-d04c-412e-a134-851ebfa5ceb2",
								Name: "My product A",
							},
							AccessSchedule: &operations.ListContractsAccessSchedule{
								CreditType: &operations.ListContractsContractsResponse200ApplicationJSONCreditType{
									Name: "USD (cents)",
									ID:   "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
								},
								ScheduleItems: []operations.ListContractsScheduleItems{
									operations.ListContractsScheduleItems{
										ID:           "2d45952c-5a6e-43a9-8aab-f61ee21be81a",
										Amount:       10000000,
										StartingAt:   types.MustTimeFromString("2020-02-01T00:00:00.000Z"),
										EndingBefore: types.MustTimeFromString("2021-02-01T00:00:00.000Z"),
									},
								},
							},
							InvoiceSchedule: &operations.ListContractsInvoiceSchedule{
								CreditType: &operations.ListContractsContractsResponse200ApplicationJSONResponseBodyDataInitialCreditType{
									Name: "USD (cents)",
									ID:   "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
								},
								ScheduleItems: []operations.ListContractsContractsScheduleItems{
									operations.ListContractsContractsScheduleItems{
										ID:        "f15e4e23-f74e-4de4-9b3a-8b07434116c4",
										InvoiceID: "525b9759-7bbd-4a05-aab1-d7c43c976b57",
										Amount:    10000000,
										UnitPrice: 10000000,
										Quantity:  1,
										Timestamp: types.MustTimeFromString("2020-03-01T00:00:00.000Z"),
									},
								},
							},
							Description:      metronomegosdk.String("My test commit description"),
							RolloverFraction: metronomegosdk.Float64(0.1),
							ApplicableProductIds: []string{
								"13a2179b-f0cb-460b-85a1-cd42964ca533",
							},
							Ledger: []operations.ListContractsLedger{
								operations.CreateListContractsLedgerListContractsLedger2(
									operations.ListContractsLedger2{
										Type:      operations.ListContractsLedgerContractsTypePrepaidCommitAutomatedInvoiceDeduction,
										Timestamp: types.MustTimeFromString("2020-03-01T00:00:00.000Z"),
										Amount:    10000000,
										SegmentID: "2d45952c-5a6e-43a9-8aab-f61ee21be81a",
										InvoiceID: "525b9759-7bbd-4a05-aab1-d7c43c976b57",
									},
								),
							},
						},
					},
					Overrides: []operations.ListContractsOverrides{
						operations.ListContractsOverrides{
							ID: "6cf3292a-e85c-4be6-822c-e25ba9d19757",
							Product: &operations.ListContractsContractsResponseProduct{
								ID:   "eae8903b-693b-41a7-8c0b-f23748c9a9c8",
								Name: "My product B",
							},
							StartingAt: types.MustTimeFromString("2020-01-01T00:00:00.000Z"),
							Type:       operations.ListContractsContractsResponseTypeMultiplier.ToPointer(),
							Multiplier: metronomegosdk.Float64(0.1),
						},
					},
					ScheduledCharges: []operations.ListContractsScheduledCharges{
						operations.ListContractsScheduledCharges{
							ID: "e13b99d4-88e1-4e91-a450-ad2abd442698",
							Product: operations.ListContractsContractsResponse200ApplicationJSONProduct{
								ID:   "02d502a9-4bb4-4f63-8969-e9a3efa77dfb",
								Name: "<value>",
							},
							Schedule: operations.ListContractsContractsSchedule{},
						},
					},
					Transitions: []operations.ListContractsTransitions{
						operations.ListContractsTransitions{
							Type:           operations.ListContractsContractsResponse200TypeRenewal,
							FromContractID: "9bf48856-b430-42f4-844f-4d2ea85bcff8",
							ToContractID:   "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
						},
					},
					ResellerRoyalties: []operations.ListContractsResellerRoyalties{
						operations.ListContractsResellerRoyalties{
							ResellerType:       operations.ListContractsResellerTypeAws,
							Fraction:           2974.37,
							NetsuiteResellerID: "<value>",
							StartingAt:         types.MustTimeFromString("2024-04-20T15:47:29.305Z"),
						},
					},
					CreatedAt:           types.MustTimeFromString("2019-12-31T14:23:55.234Z"),
					CreatedBy:           "Alice",
					NetPaymentTermsDays: metronomegosdk.Float64(7),
					EndingBefore:        types.MustNewTimeFromString("2022-01-01T00:00:00.000Z"),
					UsageStatementSchedule: operations.ListContractsUsageStatementSchedule{
						Frequency: operations.ListContractsFrequencyMonthlyUpper,
					},
				},
				Current: operations.ListContractsCurrent{
					RateCardID: metronomegosdk.String("92f3080d-27ca-4306-a23f-2430de61851e"),
					StartingAt: types.MustTimeFromString("2020-01-01T00:00:00.000Z"),
					Commits: []operations.ListContractsContractsCommits{
						operations.ListContractsContractsCommits{
							ID:   "62c0cb84-bf3f-48b9-9bcf-a8ddf8c1cf35",
							Type: operations.ListContractsContractsResponse200ApplicationJSONTypePrepaid,
							Name: metronomegosdk.String("My test commit"),
							Product: operations.ListContractsContractsResponse200ApplicationJSONResponseBodyProduct{
								ID:   "2e30f074-d04c-412e-a134-851ebfa5ceb2",
								Name: "My product A",
							},
							AccessSchedule: &operations.ListContractsContractsResponseAccessSchedule{
								CreditType: &operations.ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditType{
									Name: "USD (cents)",
									ID:   "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
								},
								ScheduleItems: []operations.ListContractsContractsResponse200ApplicationJSONResponseBodyScheduleItems{
									operations.ListContractsContractsResponse200ApplicationJSONResponseBodyScheduleItems{
										ID:           "2d45952c-5a6e-43a9-8aab-f61ee21be81a",
										Amount:       10000000,
										StartingAt:   types.MustTimeFromString("2020-02-01T00:00:00.000Z"),
										EndingBefore: types.MustTimeFromString("2021-02-01T00:00:00.000Z"),
									},
								},
							},
							InvoiceSchedule: &operations.ListContractsContractsInvoiceSchedule{
								CreditType: &operations.ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsCreditType{
									Name: "USD (cents)",
									ID:   "2714e483-4ff1-48e4-9e25-ac732e8f24f2",
								},
								ScheduleItems: []operations.ListContractsContractsResponse200ApplicationJSONResponseBodyDataScheduleItems{
									operations.ListContractsContractsResponse200ApplicationJSONResponseBodyDataScheduleItems{
										ID:        "f15e4e23-f74e-4de4-9b3a-8b07434116c4",
										InvoiceID: "525b9759-7bbd-4a05-aab1-d7c43c976b57",
										Amount:    10000000,
										UnitPrice: 10000000,
										Quantity:  1,
										Timestamp: types.MustTimeFromString("2020-03-01T00:00:00.000Z"),
									},
								},
							},
							Description:      metronomegosdk.String("My test commit description"),
							RolloverFraction: metronomegosdk.Float64(0.1),
							ApplicableProductIds: []string{
								"13a2179b-f0cb-460b-85a1-cd42964ca533",
							},
						},
					},
					Overrides: []operations.ListContractsContractsOverrides{
						operations.ListContractsContractsOverrides{
							ID: "6cf3292a-e85c-4be6-822c-e25ba9d19757",
							Product: &operations.ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentProduct{
								ID:   "eae8903b-693b-41a7-8c0b-f23748c9a9c8",
								Name: "My product B",
							},
							StartingAt: types.MustTimeFromString("2020-01-01T00:00:00.000Z"),
							Type:       operations.ListContractsContractsResponse200ApplicationJSONResponseBodyDataTypeMultiplier.ToPointer(),
							Multiplier: metronomegosdk.Float64(0.1),
						},
					},
					ScheduledCharges: []operations.ListContractsContractsScheduledCharges{
						operations.ListContractsContractsScheduledCharges{
							ID: "8e511ff1-3fd5-4d86-bc89-1e80239874bf",
							Product: operations.ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesProduct{
								ID:   "2e30f074-d04c-412e-a134-851ebfa5ceb2",
								Name: "My product A",
							},
							Schedule: operations.ListContractsContractsResponse200Schedule{
								ScheduleItems: []operations.ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems{
									operations.ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems{
										ID:        "6ca40ebc-9c01-484e-a64e-4e47fbbd0ebe",
										InvoiceID: "5cced82b-5464-41b4-9ea7-3e080e0a4dba",
										Amount:    1000000,
										UnitPrice: 1000000,
										Quantity:  1,
										Timestamp: types.MustTimeFromString("2020-02-15T00:00:00.000Z"),
									},
								},
							},
							Name: metronomegosdk.String("My test scheduled charge"),
						},
					},
					Transitions: []operations.ListContractsContractsTransitions{
						operations.ListContractsContractsTransitions{
							Type:           operations.ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentTypeRenewal,
							FromContractID: "9bf48856-b430-42f4-844f-4d2ea85bcff8",
							ToContractID:   "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
						},
					},
					ResellerRoyalties: []operations.ListContractsContractsResellerRoyalties{
						operations.ListContractsContractsResellerRoyalties{
							ResellerType:       operations.ListContractsContractsResellerTypeGcpProService,
							Fraction:           4118.2,
							NetsuiteResellerID: "<value>",
							StartingAt:         types.MustTimeFromString("2023-03-11T13:41:13.036Z"),
						},
					},
					CreatedAt:           types.MustTimeFromString("2019-12-31T14:23:55.234Z"),
					CreatedBy:           "Alice",
					NetPaymentTermsDays: metronomegosdk.Float64(7),
					EndingBefore:        types.MustNewTimeFromString("2022-01-01T00:00:00.000Z"),
					UsageStatementSchedule: operations.ListContractsContractsUsageStatementSchedule{
						Frequency: operations.ListContractsContractsFrequencyMonthlyUpper,
					},
				},
				Amendments: []operations.ListContractsAmendments{
					operations.ListContractsAmendments{
						ID:         "4e2fab26-31ea-473c-b07d-1ce10e7c0146",
						StartingAt: types.MustTimeFromString("2020-04-01T00:00:00.000Z"),
						Commits: []operations.ListContractsContractsResponseCommits{
							operations.ListContractsContractsResponseCommits{
								ID:   "ae395efb-9ba8-48f3-a669-97074ba4469b",
								Type: operations.ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsTypePrepaid,
								Product: operations.ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsProduct{
									ID:   "e2141959-890a-4fa5-a3e2-516fe4c8b711",
									Name: "<value>",
								},
							},
						},
						Overrides: []operations.ListContractsContractsResponseOverrides{
							operations.ListContractsContractsResponseOverrides{
								ID:         "e5b7fd2e-d028-4921-8ddc-692601fb576b",
								StartingAt: types.MustTimeFromString("2022-02-25T10:40:10.987Z"),
							},
						},
						ScheduledCharges: []operations.ListContractsContractsResponseScheduledCharges{
							operations.ListContractsContractsResponseScheduledCharges{
								ID: "8e511ff1-3fd5-4d86-bc89-1e80239874bf",
								Product: operations.ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesProduct{
									ID:   "2e30f074-d04c-412e-a134-851ebfa5ceb2",
									Name: "My product A",
								},
								Schedule: operations.ListContractsContractsResponse200ApplicationJSONResponseBodySchedule{
									ScheduleItems: []operations.ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems{
										operations.ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems{
											ID:        "6ca40ebc-9c01-484e-a64e-4e47fbbd0ebe",
											InvoiceID: "5cced82b-5464-41b4-9ea7-3e080e0a4dba",
											Amount:    1000000,
											UnitPrice: 1000000,
											Quantity:  1,
											Timestamp: types.MustTimeFromString("2020-02-15T00:00:00.000Z"),
										},
									},
								},
								Name: metronomegosdk.String("My test scheduled charge"),
							},
						},
						CreatedAt: types.MustTimeFromString("2019-12-31T16:12:45.123Z"),
						CreatedBy: "Bob",
					},
				},
				CustomFields: map[string]string{
					"x_account_id": "KyVnHhSBWl7eY2bl",
				},
			},
		},
	}, *res.Object)
}

func TestContracts_CreateContract_(t *testing.T) {
	s := metronomegosdk.New(
		metronomegosdk.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
	)
	var request *operations.CreateContractRequestBody = &operations.CreateContractRequestBody{
		CustomerID: "13117714-3f05-48e5-a6e9-a66093f13b4d",
		RateCardID: metronomegosdk.String("d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc"),
		StartingAt: types.MustTimeFromString("2020-01-01T00:00:00.000Z"),
	}
	ctx := context.Background()
	res, err := s.Contracts.Create(ctx, request)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, operations.CreateContractResponseBody{
		Data: operations.CreateContractData{
			ID: "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
		},
	}, *res.Object)
}

func TestContracts_AmendContract_(t *testing.T) {
	s := metronomegosdk.New(
		metronomegosdk.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
	)
	var request *operations.AmendContractRequestBody = &operations.AmendContractRequestBody{
		CustomerID: "13117714-3f05-48e5-a6e9-a66093f13b4d",
		ContractID: "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
		StartingAt: types.MustTimeFromString("2020-01-01T00:00:00.000Z"),
	}
	ctx := context.Background()
	res, err := s.Contracts.Amend(ctx, request)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, operations.AmendContractResponseBody{
		Data: operations.AmendContractData{
			ID: "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
		},
	}, *res.Object)
}

func TestContracts_ArchiveContract_(t *testing.T) {
	s := metronomegosdk.New(
		metronomegosdk.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
	)
	var request *operations.ArchiveContractRequestBody = &operations.ArchiveContractRequestBody{
		CustomerID:   "13117714-3f05-48e5-a6e9-a66093f13b4d",
		ContractID:   "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
		VoidInvoices: true,
	}
	ctx := context.Background()
	res, err := s.Contracts.Archive(ctx, request)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, operations.ArchiveContractResponseBody{
		Data: operations.ArchiveContractData{
			ID: "8deed800-1b7a-495d-a207-6c52bac54dc9",
		},
	}, *res.Object)
}

func TestContracts_SetUsageFilter_(t *testing.T) {
	assert.Fail(t, "incomplete test found please make sure to address the following errors: [`missing response values`]")
}

func TestContracts_AddManualBalanceLedgerEntry_(t *testing.T) {
	assert.Fail(t, "incomplete test found please make sure to address the following errors: [`missing response values`]")
}

func TestContracts_UpdateContractEndDate_(t *testing.T) {
	s := metronomegosdk.New(
		metronomegosdk.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
	)
	var request *operations.UpdateContractEndDateRequestBody = &operations.UpdateContractEndDateRequestBody{
		CustomerID:   "13117714-3f05-48e5-a6e9-a66093f13b4d",
		ContractID:   "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
		EndingBefore: types.MustNewTimeFromString("2020-01-01T00:00:00.000Z"),
	}
	ctx := context.Background()
	res, err := s.Contracts.UpdateEndDate(ctx, request)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, operations.UpdateContractEndDateResponseBody{
		Data: operations.UpdateContractEndDateData{
			ID: "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
		},
	}, *res.Object)
}

func TestContracts_GetContractRateSchedule_(t *testing.T) {
	assert.Fail(t, "incomplete test found please make sure to address the following errors: [`missing response values`]")
}

func TestContracts_ScheduleProServicesInvoice(t *testing.T) {
	s := metronomegosdk.New(
		metronomegosdk.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
	)

	ctx := context.Background()
	res, err := s.Contracts.ScheduleProServicesInvoice(ctx, nil)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, operations.ScheduleProServicesInvoiceResponseBody{
		Data: []operations.ScheduleProServicesInvoiceData{
			operations.ScheduleProServicesInvoiceData{
				ID:         "d5f0d30c-5fbb-4258-b053-202c73d5fe9b",
				CustomerID: "90c28909-b3fe-449a-8d9c-bf48633323f9",
				CreditType: operations.ScheduleProServicesInvoiceCreditType{
					Name: "<value>",
					ID:   "b77f3a41-0067-44eb-b692-80d1ba77a89e",
				},
				InvoiceAdjustments: []operations.InvoiceAdjustments{
					operations.InvoiceAdjustments{
						Name:  "Monthly minimum ($1,000)",
						Total: 7146.97,
						CreditType: operations.ScheduleProServicesInvoiceContractsCreditType{
							Name: "<value>",
							ID:   "f737ae42-03ce-45e6-a95d-8a0d446ce2af",
						},
					},
				},
				LineItems: []operations.ScheduleProServicesInvoiceLineItems{
					operations.ScheduleProServicesInvoiceLineItems{
						Name:  "<value>",
						Total: 4561.3,
						CreditType: operations.ScheduleProServicesInvoiceContractsResponseCreditType{
							Name: "<value>",
							ID:   "a73cf3be-453f-4870-b326-b5a73429cdb1",
						},
					},
				},
				Status: "DRAFT, VOID, or FINALIZED",
				Total:  6748.48,
				Type:   "PLAN_ARREARS, SCHEDULED, USAGE, CORRECTION, CREDIT_PURCHASE, or SEAT_PURCHASE",
			},
		},
	}, *res.Object)
}
