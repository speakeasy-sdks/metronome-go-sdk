// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package tests

import (
	"context"
	metronomegosdk "github.com/speakeasy-sdks/metronome-go-sdk"
	"github.com/speakeasy-sdks/metronome-go-sdk/models/operations"
	"github.com/speakeasy-sdks/metronome-go-sdk/types"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestProducts_GetProduct_(t *testing.T) {
	s := metronomegosdk.New(
		metronomegosdk.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
	)
	var request *operations.GetProductRequestBody = &operations.GetProductRequestBody{
		ID: "d84e7f4e-7a70-4fe4-be02-7a5027beffcc",
	}
	ctx := context.Background()
	res, err := s.Products.Get(ctx, request)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, operations.GetProductResponseBody{
		Data: operations.GetProductData{
			ID:   "9c9a4a71-171e-41f9-b8da-d982baf1a388",
			Type: operations.GetProductTypeComposite,
			Initial: operations.Initial{
				Name:       "My Composite Product",
				StartingAt: types.MustNewTimeFromString("2020-01-01T00:00:00.000Z"),
				CreatedAt:  types.MustTimeFromString("2019-12-30T04:24:55.123Z"),
				CreatedBy:  "Bob",
				CompositeProductIds: []string{
					"e5e40bc7-ef69-42ec-a77e-cd696f6bfa3d",
				},
			},
			Current: operations.Current{
				Name:       "My Updated Composite Product Name",
				StartingAt: types.MustNewTimeFromString("2020-01-01T00:00:00.000Z"),
				CreatedAt:  types.MustTimeFromString("2019-12-30T04:24:55.123Z"),
				CreatedBy:  "Bob",
				CompositeProductIds: []string{
					"e5e40bc7-ef69-42ec-a77e-cd696f6bfa3d",
				},
			},
			Updates: []operations.Updates{
				operations.Updates{
					Name:       metronomegosdk.String("My Updated Composite Product Name"),
					StartingAt: types.MustNewTimeFromString("2020-02-01T00:00:00.000Z"),
					CreatedAt:  types.MustTimeFromString("2019-12-30T09:24:55.123Z"),
					CreatedBy:  "Alice",
				},
			},
			CustomFields: map[string]string{
				"x_account_id": "KyVnHhSBWl7eY2bl",
			},
		},
	}, *res.Object)
}

func TestProducts_ListProducts_(t *testing.T) {
	s := metronomegosdk.New(
		metronomegosdk.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
	)
	var requestBody *operations.ListProductsRequestBody = &operations.ListProductsRequestBody{
		ArchiveFilter: operations.ArchiveFilterNotArchived.ToPointer(),
	}
	ctx := context.Background()
	res, err := s.Products.List(ctx, nil, nil, requestBody)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, operations.ListProductsResponseBody{
		Data: []operations.ListProductsData{
			operations.ListProductsData{
				ID:         "9c9a4a71-171e-41f9-b8da-d982baf1a388",
				Type:       operations.ListProductsTypeComposite,
				ArchivedAt: nil,
				Initial: operations.ListProductsInitial{
					Name:       "My Composite Product",
					StartingAt: types.MustNewTimeFromString("2020-01-01T00:00:00.000Z"),
					CreatedAt:  types.MustTimeFromString("2019-12-30T04:24:55.123Z"),
					CreatedBy:  "Bob",
					CompositeProductIds: []string{
						"e5e40bc7-ef69-42ec-a77e-cd696f6bfa3d",
					},
				},
				Current: operations.ListProductsCurrent{
					Name:       "My Updated Composite Product Name",
					StartingAt: types.MustNewTimeFromString("2020-01-01T00:00:00.000Z"),
					CreatedAt:  types.MustTimeFromString("2019-12-30T04:24:55.123Z"),
					CreatedBy:  "Bob",
					CompositeProductIds: []string{
						"e5e40bc7-ef69-42ec-a77e-cd696f6bfa3d",
					},
				},
				Updates: []operations.ListProductsUpdates{
					operations.ListProductsUpdates{
						Name:       metronomegosdk.String("My Updated Composite Product Name"),
						StartingAt: types.MustNewTimeFromString("2020-02-01T00:00:00.000Z"),
						CreatedAt:  types.MustTimeFromString("2019-12-30T09:24:55.123Z"),
						CreatedBy:  "Alice",
					},
				},
				CustomFields: map[string]string{
					"x_account_id": "KyVnHhSBWl7eY2bl",
				},
			},
		},
		NextPage: nil,
	}, *res.Object)
}

func TestProducts_CreateProduct_(t *testing.T) {
	s := metronomegosdk.New(
		metronomegosdk.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
	)
	var request *operations.CreateProductRequestBody = &operations.CreateProductRequestBody{
		Name:             "My Product",
		Type:             operations.TypeUsageUpper,
		BillableMetricID: metronomegosdk.String("13117714-3f05-48e5-a6e9-a66093f13b4d"),
	}
	ctx := context.Background()
	res, err := s.Products.Create(ctx, request)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, operations.CreateProductResponseBody{
		Data: operations.CreateProductData{
			ID: "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
		},
	}, *res.Object)
}

func TestProducts_UpdateProduct_(t *testing.T) {
	s := metronomegosdk.New(
		metronomegosdk.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
	)
	var request *operations.UpdateProductRequestBody = &operations.UpdateProductRequestBody{
		ProductID:  "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
		Name:       metronomegosdk.String("My Updated Product"),
		StartingAt: types.MustTimeFromString("2020-01-01T00:00:00.000Z"),
	}
	ctx := context.Background()
	res, err := s.Products.Update(ctx, request)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, operations.UpdateProductResponseBody{
		Data: operations.UpdateProductData{
			ID: "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
		},
	}, *res.Object)
}

func TestProducts_ArchiveProductListItem_(t *testing.T) {
	s := metronomegosdk.New(
		metronomegosdk.WithSecurity("<YOUR_BEARER_TOKEN_HERE>"),
	)
	var request *operations.ArchiveProductListItemRequestBody = &operations.ArchiveProductListItemRequestBody{
		ProductID: "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
	}
	ctx := context.Background()
	res, err := s.Products.Archive(ctx, request)
	require.NoError(t, err)
	assert.Equal(t, 200, res.HTTPMeta.Response.StatusCode)
	assert.Equal(t, operations.ArchiveProductListItemResponseBody{
		Data: operations.ArchiveProductListItemData{
			ID: "d7abd0cd-4ae9-4db7-8676-e986a4ebd8dc",
		},
	}, *res.Object)
}
