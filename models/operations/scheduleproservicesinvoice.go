// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/Metronome-Industries/metronome-go-sdk/internal/utils"
	"github.com/Metronome-Industries/metronome-go-sdk/models/components"
	"time"
)

// LineItems - Describes the line item for a professional service charge on an invoice.
type LineItems struct {
	ProfessionalServiceID string `json:"professional_service_id"`
	// If the professional_service_id was added on an amendment, this is required.
	AmendmentID *string `json:"amendment_id,omitempty"`
	// If specified, this overrides the unit price on the pro service term. Must also provide quantity (but not amount) if providing unit_price.
	UnitPrice *float64 `json:"unit_price,omitempty"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the amount.
	Quantity *float64 `json:"quantity,omitempty"`
	// Amount for the term on the new invoice.
	Amount *float64 `json:"amount,omitempty"`
	// The start date for the billing period on the invoice.
	NetsuiteInvoiceBillingStart *time.Time `json:"netsuite_invoice_billing_start,omitempty"`
	// The end date for the billing period on the invoice.
	NetsuiteInvoiceBillingEnd *time.Time `json:"netsuite_invoice_billing_end,omitempty"`
	// For client use.
	Metadata *string `json:"metadata,omitempty"`
}

func (l LineItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *LineItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *LineItems) GetProfessionalServiceID() string {
	if o == nil {
		return ""
	}
	return o.ProfessionalServiceID
}

func (o *LineItems) GetAmendmentID() *string {
	if o == nil {
		return nil
	}
	return o.AmendmentID
}

func (o *LineItems) GetUnitPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.UnitPrice
}

func (o *LineItems) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *LineItems) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *LineItems) GetNetsuiteInvoiceBillingStart() *time.Time {
	if o == nil {
		return nil
	}
	return o.NetsuiteInvoiceBillingStart
}

func (o *LineItems) GetNetsuiteInvoiceBillingEnd() *time.Time {
	if o == nil {
		return nil
	}
	return o.NetsuiteInvoiceBillingEnd
}

func (o *LineItems) GetMetadata() *string {
	if o == nil {
		return nil
	}
	return o.Metadata
}

// ScheduleProServicesInvoiceRequestBody - schedule an invoice for the specified Professional Services terms on a contract
type ScheduleProServicesInvoiceRequestBody struct {
	CustomerID string `json:"customer_id"`
	ContractID string `json:"contract_id"`
	// The date the invoice is issued
	IssuedAt time.Time `json:"issued_at"`
	// The start date of the invoice header in Netsuite
	NetsuiteInvoiceHeaderStart *time.Time `json:"netsuite_invoice_header_start,omitempty"`
	// The end date of the invoice header in Netsuite
	NetsuiteInvoiceHeaderEnd *time.Time `json:"netsuite_invoice_header_end,omitempty"`
	// Each line requires an amount or both unit_price and quantity.
	LineItems []LineItems `json:"line_items"`
}

func (s ScheduleProServicesInvoiceRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *ScheduleProServicesInvoiceRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ScheduleProServicesInvoiceRequestBody) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *ScheduleProServicesInvoiceRequestBody) GetContractID() string {
	if o == nil {
		return ""
	}
	return o.ContractID
}

func (o *ScheduleProServicesInvoiceRequestBody) GetIssuedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.IssuedAt
}

func (o *ScheduleProServicesInvoiceRequestBody) GetNetsuiteInvoiceHeaderStart() *time.Time {
	if o == nil {
		return nil
	}
	return o.NetsuiteInvoiceHeaderStart
}

func (o *ScheduleProServicesInvoiceRequestBody) GetNetsuiteInvoiceHeaderEnd() *time.Time {
	if o == nil {
		return nil
	}
	return o.NetsuiteInvoiceHeaderEnd
}

func (o *ScheduleProServicesInvoiceRequestBody) GetLineItems() []LineItems {
	if o == nil {
		return []LineItems{}
	}
	return o.LineItems
}

type ScheduleProServicesInvoiceCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ScheduleProServicesInvoiceCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ScheduleProServicesInvoiceCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ScheduleProServicesInvoiceContractsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ScheduleProServicesInvoiceContractsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ScheduleProServicesInvoiceContractsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type InvoiceAdjustments struct {
	Name                    string                                        `json:"name"`
	Total                   float64                                       `json:"total"`
	CreditType              ScheduleProServicesInvoiceContractsCreditType `json:"credit_type"`
	CreditGrantID           *string                                       `json:"credit_grant_id,omitempty"`
	CreditGrantCustomFields map[string]string                             `json:"credit_grant_custom_fields,omitempty"`
}

func (o *InvoiceAdjustments) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *InvoiceAdjustments) GetTotal() float64 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

func (o *InvoiceAdjustments) GetCreditType() ScheduleProServicesInvoiceContractsCreditType {
	if o == nil {
		return ScheduleProServicesInvoiceContractsCreditType{}
	}
	return o.CreditType
}

func (o *InvoiceAdjustments) GetCreditGrantID() *string {
	if o == nil {
		return nil
	}
	return o.CreditGrantID
}

func (o *InvoiceAdjustments) GetCreditGrantCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CreditGrantCustomFields
}

type ScheduleProServicesInvoiceContractsResponseCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ScheduleProServicesInvoiceContractsResponseCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ScheduleProServicesInvoiceContractsResponseCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// PostpaidCommit - only present for beta contract invoices
type PostpaidCommit struct {
	ID string `json:"id"`
}

func (o *PostpaidCommit) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ScheduleProServicesInvoiceResellerType string

const (
	ScheduleProServicesInvoiceResellerTypeAws           ScheduleProServicesInvoiceResellerType = "AWS"
	ScheduleProServicesInvoiceResellerTypeAwsProService ScheduleProServicesInvoiceResellerType = "AWS_PRO_SERVICE"
	ScheduleProServicesInvoiceResellerTypeGcp           ScheduleProServicesInvoiceResellerType = "GCP"
	ScheduleProServicesInvoiceResellerTypeGcpProService ScheduleProServicesInvoiceResellerType = "GCP_PRO_SERVICE"
)

func (e ScheduleProServicesInvoiceResellerType) ToPointer() *ScheduleProServicesInvoiceResellerType {
	return &e
}
func (e *ScheduleProServicesInvoiceResellerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWS":
		fallthrough
	case "AWS_PRO_SERVICE":
		fallthrough
	case "GCP":
		fallthrough
	case "GCP_PRO_SERVICE":
		*e = ScheduleProServicesInvoiceResellerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScheduleProServicesInvoiceResellerType: %v", v)
	}
}

// TierPeriod - when the current tier started and ends (for tiered charges only)
type TierPeriod struct {
	StartingAt   time.Time  `json:"starting_at"`
	EndingBefore *time.Time `json:"ending_before,omitempty"`
}

func (t TierPeriod) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TierPeriod) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *TierPeriod) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *TierPeriod) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

type ScheduleProServicesInvoiceTiers struct {
	// at what metric amount this tier begins
	StartingAt float64 `json:"starting_at"`
	Quantity   float64 `json:"quantity"`
	Price      float64 `json:"price"`
	Subtotal   float64 `json:"subtotal"`
}

func (o *ScheduleProServicesInvoiceTiers) GetStartingAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.StartingAt
}

func (o *ScheduleProServicesInvoiceTiers) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *ScheduleProServicesInvoiceTiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

func (o *ScheduleProServicesInvoiceTiers) GetSubtotal() float64 {
	if o == nil {
		return 0.0
	}
	return o.Subtotal
}

type SubLineItems struct {
	Name string `json:"name"`
	// the unit price for this charge, present only if the charge is not tiered and the quantity is nonzero
	Price         *float64 `json:"price,omitempty"`
	Quantity      float64  `json:"quantity"`
	Subtotal      float64  `json:"subtotal"`
	ChargeID      *string  `json:"charge_id,omitempty"`
	CreditGrantID *string  `json:"credit_grant_id,omitempty"`
	// when the current tier started and ends (for tiered charges only)
	TierPeriod   *TierPeriod                       `json:"tier_period,omitempty"`
	Tiers        []ScheduleProServicesInvoiceTiers `json:"tiers,omitempty"`
	CustomFields map[string]string                 `json:"custom_fields"`
	// The start date for the charge (for seats charges only).
	StartDate *time.Time `json:"start_date,omitempty"`
	// The end date for the charge (for seats charges only).
	EndDate *time.Time `json:"end_date,omitempty"`
}

func (s SubLineItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SubLineItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SubLineItems) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SubLineItems) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *SubLineItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *SubLineItems) GetSubtotal() float64 {
	if o == nil {
		return 0.0
	}
	return o.Subtotal
}

func (o *SubLineItems) GetChargeID() *string {
	if o == nil {
		return nil
	}
	return o.ChargeID
}

func (o *SubLineItems) GetCreditGrantID() *string {
	if o == nil {
		return nil
	}
	return o.CreditGrantID
}

func (o *SubLineItems) GetTierPeriod() *TierPeriod {
	if o == nil {
		return nil
	}
	return o.TierPeriod
}

func (o *SubLineItems) GetTiers() []ScheduleProServicesInvoiceTiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *SubLineItems) GetCustomFields() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.CustomFields
}

func (o *SubLineItems) GetStartDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *SubLineItems) GetEndDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndDate
}

type ScheduleProServicesInvoiceLineItems struct {
	Name       string   `json:"name"`
	GroupKey   *string  `json:"group_key,omitempty"`
	GroupValue *string  `json:"group_value,omitempty"`
	Quantity   *float64 `json:"quantity,omitempty"`
	Total      float64  `json:"total"`
	// only present for beta contract invoices
	UnitPrice           *float64          `json:"unit_price,omitempty"`
	ProductID           *string           `json:"product_id,omitempty"`
	ProductCustomFields map[string]string `json:"product_custom_fields,omitempty"`
	ProductType         *string           `json:"product_type,omitempty"`
	// only present for beta contract invoices. This field's availability is dependent on your client's configuration.
	NetsuiteItemID *string `json:"netsuite_item_id,omitempty"`
	// only present for beta contract invoices
	IsProrated *bool                                                 `json:"is_prorated,omitempty"`
	CreditType ScheduleProServicesInvoiceContractsResponseCreditType `json:"credit_type"`
	// only present for beta contract invoices
	StartingAt *time.Time `json:"starting_at,omitempty"`
	// only present for beta contract invoices
	EndingBefore *time.Time `json:"ending_before,omitempty"`
	// only present for beta contract invoices
	CommitID           *string           `json:"commit_id,omitempty"`
	CommitCustomFields map[string]string `json:"commit_custom_fields,omitempty"`
	// only present for beta contract invoices
	CommitSegmentID *string `json:"commit_segment_id,omitempty"`
	// only present for beta contract invoices
	CommitType *string `json:"commit_type,omitempty"`
	// only present for beta contract invoices. This field's availability is dependent on your client's configuration.
	CommitNetsuiteSalesOrderID *string `json:"commit_netsuite_sales_order_id,omitempty"`
	// only present for beta contract invoices. This field's availability is dependent on your client's configuration.
	CommitNetsuiteItemID *string `json:"commit_netsuite_item_id,omitempty"`
	// only present for beta contract invoices
	PostpaidCommit *PostpaidCommit                         `json:"postpaid_commit,omitempty"`
	ResellerType   *ScheduleProServicesInvoiceResellerType `json:"reseller_type,omitempty"`
	SubLineItems   []SubLineItems                          `json:"sub_line_items,omitempty"`
	CustomFields   map[string]string                       `json:"custom_fields,omitempty"`
	// if pricing groups are used, this will contain the values used to calculate the price
	PricingGroupValues map[string]string `json:"pricing_group_values,omitempty"`
	// if presentation groups are used, this will contain the values used to break down the line item
	PresentationGroupValues map[string]string `json:"presentation_group_values,omitempty"`
	Metadata                *string           `json:"metadata,omitempty"`
	// The start date for the billing period on the invoice.
	NetsuiteInvoiceBillingStart *time.Time `json:"netsuite_invoice_billing_start,omitempty"`
	// The end date for the billing period on the invoice.
	NetsuiteInvoiceBillingEnd *time.Time `json:"netsuite_invoice_billing_end,omitempty"`
	// only present for beta contract invoices
	ProfessionalServiceID           *string           `json:"professional_service_id,omitempty"`
	ProfessionalServiceCustomFields map[string]string `json:"professional_service_custom_fields,omitempty"`
	// only present for beta contract invoices
	ScheduledChargeID           *string           `json:"scheduled_charge_id,omitempty"`
	ScheduledChargeCustomFields map[string]string `json:"scheduled_charge_custom_fields,omitempty"`
}

func (s ScheduleProServicesInvoiceLineItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *ScheduleProServicesInvoiceLineItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ScheduleProServicesInvoiceLineItems) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ScheduleProServicesInvoiceLineItems) GetGroupKey() *string {
	if o == nil {
		return nil
	}
	return o.GroupKey
}

func (o *ScheduleProServicesInvoiceLineItems) GetGroupValue() *string {
	if o == nil {
		return nil
	}
	return o.GroupValue
}

func (o *ScheduleProServicesInvoiceLineItems) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *ScheduleProServicesInvoiceLineItems) GetTotal() float64 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

func (o *ScheduleProServicesInvoiceLineItems) GetUnitPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.UnitPrice
}

func (o *ScheduleProServicesInvoiceLineItems) GetProductID() *string {
	if o == nil {
		return nil
	}
	return o.ProductID
}

func (o *ScheduleProServicesInvoiceLineItems) GetProductCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.ProductCustomFields
}

func (o *ScheduleProServicesInvoiceLineItems) GetProductType() *string {
	if o == nil {
		return nil
	}
	return o.ProductType
}

func (o *ScheduleProServicesInvoiceLineItems) GetNetsuiteItemID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteItemID
}

func (o *ScheduleProServicesInvoiceLineItems) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *ScheduleProServicesInvoiceLineItems) GetCreditType() ScheduleProServicesInvoiceContractsResponseCreditType {
	if o == nil {
		return ScheduleProServicesInvoiceContractsResponseCreditType{}
	}
	return o.CreditType
}

func (o *ScheduleProServicesInvoiceLineItems) GetStartingAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartingAt
}

func (o *ScheduleProServicesInvoiceLineItems) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *ScheduleProServicesInvoiceLineItems) GetCommitID() *string {
	if o == nil {
		return nil
	}
	return o.CommitID
}

func (o *ScheduleProServicesInvoiceLineItems) GetCommitCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CommitCustomFields
}

func (o *ScheduleProServicesInvoiceLineItems) GetCommitSegmentID() *string {
	if o == nil {
		return nil
	}
	return o.CommitSegmentID
}

func (o *ScheduleProServicesInvoiceLineItems) GetCommitType() *string {
	if o == nil {
		return nil
	}
	return o.CommitType
}

func (o *ScheduleProServicesInvoiceLineItems) GetCommitNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.CommitNetsuiteSalesOrderID
}

func (o *ScheduleProServicesInvoiceLineItems) GetCommitNetsuiteItemID() *string {
	if o == nil {
		return nil
	}
	return o.CommitNetsuiteItemID
}

func (o *ScheduleProServicesInvoiceLineItems) GetPostpaidCommit() *PostpaidCommit {
	if o == nil {
		return nil
	}
	return o.PostpaidCommit
}

func (o *ScheduleProServicesInvoiceLineItems) GetResellerType() *ScheduleProServicesInvoiceResellerType {
	if o == nil {
		return nil
	}
	return o.ResellerType
}

func (o *ScheduleProServicesInvoiceLineItems) GetSubLineItems() []SubLineItems {
	if o == nil {
		return nil
	}
	return o.SubLineItems
}

func (o *ScheduleProServicesInvoiceLineItems) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *ScheduleProServicesInvoiceLineItems) GetPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PricingGroupValues
}

func (o *ScheduleProServicesInvoiceLineItems) GetPresentationGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PresentationGroupValues
}

func (o *ScheduleProServicesInvoiceLineItems) GetMetadata() *string {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *ScheduleProServicesInvoiceLineItems) GetNetsuiteInvoiceBillingStart() *time.Time {
	if o == nil {
		return nil
	}
	return o.NetsuiteInvoiceBillingStart
}

func (o *ScheduleProServicesInvoiceLineItems) GetNetsuiteInvoiceBillingEnd() *time.Time {
	if o == nil {
		return nil
	}
	return o.NetsuiteInvoiceBillingEnd
}

func (o *ScheduleProServicesInvoiceLineItems) GetProfessionalServiceID() *string {
	if o == nil {
		return nil
	}
	return o.ProfessionalServiceID
}

func (o *ScheduleProServicesInvoiceLineItems) GetProfessionalServiceCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.ProfessionalServiceCustomFields
}

func (o *ScheduleProServicesInvoiceLineItems) GetScheduledChargeID() *string {
	if o == nil {
		return nil
	}
	return o.ScheduledChargeID
}

func (o *ScheduleProServicesInvoiceLineItems) GetScheduledChargeCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.ScheduledChargeCustomFields
}

type BillingProviderType string

const (
	BillingProviderTypeAwsMarketplace   BillingProviderType = "aws_marketplace"
	BillingProviderTypeStripe           BillingProviderType = "stripe"
	BillingProviderTypeNetsuite         BillingProviderType = "netsuite"
	BillingProviderTypeCustom           BillingProviderType = "custom"
	BillingProviderTypeAzureMarketplace BillingProviderType = "azure_marketplace"
	BillingProviderTypeQuickbooksOnline BillingProviderType = "quickbooks_online"
	BillingProviderTypeWorkday          BillingProviderType = "workday"
	BillingProviderTypeGcpMarketplace   BillingProviderType = "gcp_marketplace"
)

func (e BillingProviderType) ToPointer() *BillingProviderType {
	return &e
}
func (e *BillingProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws_marketplace":
		fallthrough
	case "stripe":
		fallthrough
	case "netsuite":
		fallthrough
	case "custom":
		fallthrough
	case "azure_marketplace":
		fallthrough
	case "quickbooks_online":
		fallthrough
	case "workday":
		fallthrough
	case "gcp_marketplace":
		*e = BillingProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BillingProviderType: %v", v)
	}
}

type ExternalStatus string

const (
	ExternalStatusDraft               ExternalStatus = "DRAFT"
	ExternalStatusFinalized           ExternalStatus = "FINALIZED"
	ExternalStatusPaid                ExternalStatus = "PAID"
	ExternalStatusUncollectible       ExternalStatus = "UNCOLLECTIBLE"
	ExternalStatusVoid                ExternalStatus = "VOID"
	ExternalStatusDeleted             ExternalStatus = "DELETED"
	ExternalStatusPaymentFailed       ExternalStatus = "PAYMENT_FAILED"
	ExternalStatusInvalidRequestError ExternalStatus = "INVALID_REQUEST_ERROR"
	ExternalStatusSkipped             ExternalStatus = "SKIPPED"
	ExternalStatusSent                ExternalStatus = "SENT"
	ExternalStatusQueued              ExternalStatus = "QUEUED"
)

func (e ExternalStatus) ToPointer() *ExternalStatus {
	return &e
}
func (e *ExternalStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "FINALIZED":
		fallthrough
	case "PAID":
		fallthrough
	case "UNCOLLECTIBLE":
		fallthrough
	case "VOID":
		fallthrough
	case "DELETED":
		fallthrough
	case "PAYMENT_FAILED":
		fallthrough
	case "INVALID_REQUEST_ERROR":
		fallthrough
	case "SKIPPED":
		fallthrough
	case "SENT":
		fallthrough
	case "QUEUED":
		*e = ExternalStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExternalStatus: %v", v)
	}
}

type ExternalInvoice struct {
	BillingProviderType BillingProviderType `json:"billing_provider_type"`
	InvoiceID           *string             `json:"invoice_id,omitempty"`
	IssuedAtTimestamp   *time.Time          `json:"issued_at_timestamp,omitempty"`
	ExternalStatus      *ExternalStatus     `json:"external_status,omitempty"`
}

func (e ExternalInvoice) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ExternalInvoice) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ExternalInvoice) GetBillingProviderType() BillingProviderType {
	if o == nil {
		return BillingProviderType("")
	}
	return o.BillingProviderType
}

func (o *ExternalInvoice) GetInvoiceID() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceID
}

func (o *ExternalInvoice) GetIssuedAtTimestamp() *time.Time {
	if o == nil {
		return nil
	}
	return o.IssuedAtTimestamp
}

func (o *ExternalInvoice) GetExternalStatus() *ExternalStatus {
	if o == nil {
		return nil
	}
	return o.ExternalStatus
}

type ScheduleProServicesInvoiceBillingProviderType string

const (
	ScheduleProServicesInvoiceBillingProviderTypeAwsMarketplace   ScheduleProServicesInvoiceBillingProviderType = "aws_marketplace"
	ScheduleProServicesInvoiceBillingProviderTypeStripe           ScheduleProServicesInvoiceBillingProviderType = "stripe"
	ScheduleProServicesInvoiceBillingProviderTypeNetsuite         ScheduleProServicesInvoiceBillingProviderType = "netsuite"
	ScheduleProServicesInvoiceBillingProviderTypeCustom           ScheduleProServicesInvoiceBillingProviderType = "custom"
	ScheduleProServicesInvoiceBillingProviderTypeAzureMarketplace ScheduleProServicesInvoiceBillingProviderType = "azure_marketplace"
	ScheduleProServicesInvoiceBillingProviderTypeQuickbooksOnline ScheduleProServicesInvoiceBillingProviderType = "quickbooks_online"
	ScheduleProServicesInvoiceBillingProviderTypeWorkday          ScheduleProServicesInvoiceBillingProviderType = "workday"
	ScheduleProServicesInvoiceBillingProviderTypeGcpMarketplace   ScheduleProServicesInvoiceBillingProviderType = "gcp_marketplace"
)

func (e ScheduleProServicesInvoiceBillingProviderType) ToPointer() *ScheduleProServicesInvoiceBillingProviderType {
	return &e
}
func (e *ScheduleProServicesInvoiceBillingProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws_marketplace":
		fallthrough
	case "stripe":
		fallthrough
	case "netsuite":
		fallthrough
	case "custom":
		fallthrough
	case "azure_marketplace":
		fallthrough
	case "quickbooks_online":
		fallthrough
	case "workday":
		fallthrough
	case "gcp_marketplace":
		*e = ScheduleProServicesInvoiceBillingProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScheduleProServicesInvoiceBillingProviderType: %v", v)
	}
}

type ScheduleProServicesInvoiceExternalStatus string

const (
	ScheduleProServicesInvoiceExternalStatusDraft               ScheduleProServicesInvoiceExternalStatus = "DRAFT"
	ScheduleProServicesInvoiceExternalStatusFinalized           ScheduleProServicesInvoiceExternalStatus = "FINALIZED"
	ScheduleProServicesInvoiceExternalStatusPaid                ScheduleProServicesInvoiceExternalStatus = "PAID"
	ScheduleProServicesInvoiceExternalStatusUncollectible       ScheduleProServicesInvoiceExternalStatus = "UNCOLLECTIBLE"
	ScheduleProServicesInvoiceExternalStatusVoid                ScheduleProServicesInvoiceExternalStatus = "VOID"
	ScheduleProServicesInvoiceExternalStatusDeleted             ScheduleProServicesInvoiceExternalStatus = "DELETED"
	ScheduleProServicesInvoiceExternalStatusPaymentFailed       ScheduleProServicesInvoiceExternalStatus = "PAYMENT_FAILED"
	ScheduleProServicesInvoiceExternalStatusInvalidRequestError ScheduleProServicesInvoiceExternalStatus = "INVALID_REQUEST_ERROR"
	ScheduleProServicesInvoiceExternalStatusSkipped             ScheduleProServicesInvoiceExternalStatus = "SKIPPED"
	ScheduleProServicesInvoiceExternalStatusSent                ScheduleProServicesInvoiceExternalStatus = "SENT"
	ScheduleProServicesInvoiceExternalStatusQueued              ScheduleProServicesInvoiceExternalStatus = "QUEUED"
)

func (e ScheduleProServicesInvoiceExternalStatus) ToPointer() *ScheduleProServicesInvoiceExternalStatus {
	return &e
}
func (e *ScheduleProServicesInvoiceExternalStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "FINALIZED":
		fallthrough
	case "PAID":
		fallthrough
	case "UNCOLLECTIBLE":
		fallthrough
	case "VOID":
		fallthrough
	case "DELETED":
		fallthrough
	case "PAYMENT_FAILED":
		fallthrough
	case "INVALID_REQUEST_ERROR":
		fallthrough
	case "SKIPPED":
		fallthrough
	case "SENT":
		fallthrough
	case "QUEUED":
		*e = ScheduleProServicesInvoiceExternalStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScheduleProServicesInvoiceExternalStatus: %v", v)
	}
}

type CorrectedExternalInvoice struct {
	BillingProviderType ScheduleProServicesInvoiceBillingProviderType `json:"billing_provider_type"`
	InvoiceID           *string                                       `json:"invoice_id,omitempty"`
	IssuedAtTimestamp   *time.Time                                    `json:"issued_at_timestamp,omitempty"`
	ExternalStatus      *ScheduleProServicesInvoiceExternalStatus     `json:"external_status,omitempty"`
}

func (c CorrectedExternalInvoice) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CorrectedExternalInvoice) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CorrectedExternalInvoice) GetBillingProviderType() ScheduleProServicesInvoiceBillingProviderType {
	if o == nil {
		return ScheduleProServicesInvoiceBillingProviderType("")
	}
	return o.BillingProviderType
}

func (o *CorrectedExternalInvoice) GetInvoiceID() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceID
}

func (o *CorrectedExternalInvoice) GetIssuedAtTimestamp() *time.Time {
	if o == nil {
		return nil
	}
	return o.IssuedAtTimestamp
}

func (o *CorrectedExternalInvoice) GetExternalStatus() *ScheduleProServicesInvoiceExternalStatus {
	if o == nil {
		return nil
	}
	return o.ExternalStatus
}

type CorrectionRecord struct {
	Reason                   string                    `json:"reason"`
	Memo                     string                    `json:"memo"`
	CorrectedInvoiceID       string                    `json:"corrected_invoice_id"`
	CorrectedExternalInvoice *CorrectedExternalInvoice `json:"corrected_external_invoice,omitempty"`
}

func (o *CorrectionRecord) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

func (o *CorrectionRecord) GetMemo() string {
	if o == nil {
		return ""
	}
	return o.Memo
}

func (o *CorrectionRecord) GetCorrectedInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.CorrectedInvoiceID
}

func (o *CorrectionRecord) GetCorrectedExternalInvoice() *CorrectedExternalInvoice {
	if o == nil {
		return nil
	}
	return o.CorrectedExternalInvoice
}

type ScheduleProServicesInvoiceContractsResellerType string

const (
	ScheduleProServicesInvoiceContractsResellerTypeAws           ScheduleProServicesInvoiceContractsResellerType = "AWS"
	ScheduleProServicesInvoiceContractsResellerTypeAwsProService ScheduleProServicesInvoiceContractsResellerType = "AWS_PRO_SERVICE"
	ScheduleProServicesInvoiceContractsResellerTypeGcp           ScheduleProServicesInvoiceContractsResellerType = "GCP"
	ScheduleProServicesInvoiceContractsResellerTypeGcpProService ScheduleProServicesInvoiceContractsResellerType = "GCP_PRO_SERVICE"
)

func (e ScheduleProServicesInvoiceContractsResellerType) ToPointer() *ScheduleProServicesInvoiceContractsResellerType {
	return &e
}
func (e *ScheduleProServicesInvoiceContractsResellerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWS":
		fallthrough
	case "AWS_PRO_SERVICE":
		fallthrough
	case "GCP":
		fallthrough
	case "GCP_PRO_SERVICE":
		*e = ScheduleProServicesInvoiceContractsResellerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScheduleProServicesInvoiceContractsResellerType: %v", v)
	}
}

type ScheduleProServicesInvoiceAwsOptions struct {
	AwsAccountNumber    *string `json:"aws_account_number,omitempty"`
	AwsPayerReferenceID *string `json:"aws_payer_reference_id,omitempty"`
	AwsOfferID          *string `json:"aws_offer_id,omitempty"`
}

func (o *ScheduleProServicesInvoiceAwsOptions) GetAwsAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.AwsAccountNumber
}

func (o *ScheduleProServicesInvoiceAwsOptions) GetAwsPayerReferenceID() *string {
	if o == nil {
		return nil
	}
	return o.AwsPayerReferenceID
}

func (o *ScheduleProServicesInvoiceAwsOptions) GetAwsOfferID() *string {
	if o == nil {
		return nil
	}
	return o.AwsOfferID
}

type ScheduleProServicesInvoiceGcpOptions struct {
	GcpAccountID *string `json:"gcp_account_id,omitempty"`
	GcpOfferID   *string `json:"gcp_offer_id,omitempty"`
}

func (o *ScheduleProServicesInvoiceGcpOptions) GetGcpAccountID() *string {
	if o == nil {
		return nil
	}
	return o.GcpAccountID
}

func (o *ScheduleProServicesInvoiceGcpOptions) GetGcpOfferID() *string {
	if o == nil {
		return nil
	}
	return o.GcpOfferID
}

// ResellerRoyalty - only present for beta contract invoices with reseller royalties
type ResellerRoyalty struct {
	ResellerType       ScheduleProServicesInvoiceContractsResellerType `json:"reseller_type"`
	NetsuiteResellerID string                                          `json:"netsuite_reseller_id"`
	Fraction           string                                          `json:"fraction"`
	AwsOptions         *ScheduleProServicesInvoiceAwsOptions           `json:"aws_options,omitempty"`
	GcpOptions         *ScheduleProServicesInvoiceGcpOptions           `json:"gcp_options,omitempty"`
}

func (o *ResellerRoyalty) GetResellerType() ScheduleProServicesInvoiceContractsResellerType {
	if o == nil {
		return ScheduleProServicesInvoiceContractsResellerType("")
	}
	return o.ResellerType
}

func (o *ResellerRoyalty) GetNetsuiteResellerID() string {
	if o == nil {
		return ""
	}
	return o.NetsuiteResellerID
}

func (o *ResellerRoyalty) GetFraction() string {
	if o == nil {
		return ""
	}
	return o.Fraction
}

func (o *ResellerRoyalty) GetAwsOptions() *ScheduleProServicesInvoiceAwsOptions {
	if o == nil {
		return nil
	}
	return o.AwsOptions
}

func (o *ResellerRoyalty) GetGcpOptions() *ScheduleProServicesInvoiceGcpOptions {
	if o == nil {
		return nil
	}
	return o.GcpOptions
}

// ScheduleProServicesInvoiceBillableStatus - This field's availability is dependent on your client's configuration.
type ScheduleProServicesInvoiceBillableStatus string

const (
	ScheduleProServicesInvoiceBillableStatusBillable   ScheduleProServicesInvoiceBillableStatus = "billable"
	ScheduleProServicesInvoiceBillableStatusUnbillable ScheduleProServicesInvoiceBillableStatus = "unbillable"
)

func (e ScheduleProServicesInvoiceBillableStatus) ToPointer() *ScheduleProServicesInvoiceBillableStatus {
	return &e
}
func (e *ScheduleProServicesInvoiceBillableStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "billable":
		fallthrough
	case "unbillable":
		*e = ScheduleProServicesInvoiceBillableStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScheduleProServicesInvoiceBillableStatus: %v", v)
	}
}

type ScheduleProServicesInvoiceData struct {
	ID                   string            `json:"id"`
	CustomerID           string            `json:"customer_id"`
	CustomerCustomFields map[string]string `json:"customer_custom_fields,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string                               `json:"salesforce_opportunity_id,omitempty"`
	NetPaymentTermsDays     *float64                              `json:"net_payment_terms_days,omitempty"`
	CreditType              ScheduleProServicesInvoiceCreditType  `json:"credit_type"`
	InvoiceAdjustments      []InvoiceAdjustments                  `json:"invoice_adjustments,omitempty"`
	LineItems               []ScheduleProServicesInvoiceLineItems `json:"line_items"`
	// Beginning of the usage period this invoice covers (UTC)
	StartTimestamp *time.Time `json:"start_timestamp,omitempty"`
	// End of the usage period this invoice covers (UTC)
	EndTimestamp *time.Time `json:"end_timestamp,omitempty"`
	// When the invoice was issued (UTC)
	IssuedAt *time.Time `json:"issued_at,omitempty"`
	// When the invoice was created (UTC). This field is present for correction invoices only.
	CreatedAt            *time.Time        `json:"created_at,omitempty"`
	Status               string            `json:"status"`
	Subtotal             *float64          `json:"subtotal,omitempty"`
	Total                float64           `json:"total"`
	Type                 string            `json:"type"`
	ExternalInvoice      *ExternalInvoice  `json:"external_invoice,omitempty"`
	PlanID               *string           `json:"plan_id,omitempty"`
	PlanName             *string           `json:"plan_name,omitempty"`
	PlanCustomFields     map[string]string `json:"plan_custom_fields,omitempty"`
	ContractID           *string           `json:"contract_id,omitempty"`
	ContractCustomFields map[string]string `json:"contract_custom_fields,omitempty"`
	AmendmentID          *string           `json:"amendment_id,omitempty"`
	CorrectionRecord     *CorrectionRecord `json:"correction_record,omitempty"`
	// only present for beta contract invoices with reseller royalties
	ResellerRoyalty *ResellerRoyalty `json:"reseller_royalty,omitempty"`
	CustomFields    map[string]any   `json:"custom_fields,omitempty"`
	// This field's availability is dependent on your client's configuration.
	BillableStatus *ScheduleProServicesInvoiceBillableStatus `json:"billable_status,omitempty"`
}

func (s ScheduleProServicesInvoiceData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *ScheduleProServicesInvoiceData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ScheduleProServicesInvoiceData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ScheduleProServicesInvoiceData) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *ScheduleProServicesInvoiceData) GetCustomerCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomerCustomFields
}

func (o *ScheduleProServicesInvoiceData) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *ScheduleProServicesInvoiceData) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *ScheduleProServicesInvoiceData) GetNetPaymentTermsDays() *float64 {
	if o == nil {
		return nil
	}
	return o.NetPaymentTermsDays
}

func (o *ScheduleProServicesInvoiceData) GetCreditType() ScheduleProServicesInvoiceCreditType {
	if o == nil {
		return ScheduleProServicesInvoiceCreditType{}
	}
	return o.CreditType
}

func (o *ScheduleProServicesInvoiceData) GetInvoiceAdjustments() []InvoiceAdjustments {
	if o == nil {
		return nil
	}
	return o.InvoiceAdjustments
}

func (o *ScheduleProServicesInvoiceData) GetLineItems() []ScheduleProServicesInvoiceLineItems {
	if o == nil {
		return []ScheduleProServicesInvoiceLineItems{}
	}
	return o.LineItems
}

func (o *ScheduleProServicesInvoiceData) GetStartTimestamp() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartTimestamp
}

func (o *ScheduleProServicesInvoiceData) GetEndTimestamp() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndTimestamp
}

func (o *ScheduleProServicesInvoiceData) GetIssuedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.IssuedAt
}

func (o *ScheduleProServicesInvoiceData) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ScheduleProServicesInvoiceData) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *ScheduleProServicesInvoiceData) GetSubtotal() *float64 {
	if o == nil {
		return nil
	}
	return o.Subtotal
}

func (o *ScheduleProServicesInvoiceData) GetTotal() float64 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

func (o *ScheduleProServicesInvoiceData) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *ScheduleProServicesInvoiceData) GetExternalInvoice() *ExternalInvoice {
	if o == nil {
		return nil
	}
	return o.ExternalInvoice
}

func (o *ScheduleProServicesInvoiceData) GetPlanID() *string {
	if o == nil {
		return nil
	}
	return o.PlanID
}

func (o *ScheduleProServicesInvoiceData) GetPlanName() *string {
	if o == nil {
		return nil
	}
	return o.PlanName
}

func (o *ScheduleProServicesInvoiceData) GetPlanCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.PlanCustomFields
}

func (o *ScheduleProServicesInvoiceData) GetContractID() *string {
	if o == nil {
		return nil
	}
	return o.ContractID
}

func (o *ScheduleProServicesInvoiceData) GetContractCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.ContractCustomFields
}

func (o *ScheduleProServicesInvoiceData) GetAmendmentID() *string {
	if o == nil {
		return nil
	}
	return o.AmendmentID
}

func (o *ScheduleProServicesInvoiceData) GetCorrectionRecord() *CorrectionRecord {
	if o == nil {
		return nil
	}
	return o.CorrectionRecord
}

func (o *ScheduleProServicesInvoiceData) GetResellerRoyalty() *ResellerRoyalty {
	if o == nil {
		return nil
	}
	return o.ResellerRoyalty
}

func (o *ScheduleProServicesInvoiceData) GetCustomFields() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *ScheduleProServicesInvoiceData) GetBillableStatus() *ScheduleProServicesInvoiceBillableStatus {
	if o == nil {
		return nil
	}
	return o.BillableStatus
}

// ScheduleProServicesInvoiceResponseBody - Success
type ScheduleProServicesInvoiceResponseBody struct {
	Data []ScheduleProServicesInvoiceData `json:"data"`
}

func (o *ScheduleProServicesInvoiceResponseBody) GetData() []ScheduleProServicesInvoiceData {
	if o == nil {
		return []ScheduleProServicesInvoiceData{}
	}
	return o.Data
}

type ScheduleProServicesInvoiceResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *ScheduleProServicesInvoiceResponseBody
}

func (o *ScheduleProServicesInvoiceResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ScheduleProServicesInvoiceResponse) GetObject() *ScheduleProServicesInvoiceResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
