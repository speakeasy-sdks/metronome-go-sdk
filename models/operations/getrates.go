// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/metronome-go-sdk/internal/utils"
	"github.com/speakeasy-sdks/metronome-go-sdk/models/components"
	"time"
)

type GetRatesSelectors struct {
	// Rates matching the product id will be included in the response.
	ProductID *string `json:"product_id,omitempty"`
	// List of product tags, rates matching any of the tags will be included in the response.
	ProductTags []string `json:"product_tags,omitempty"`
	// List of pricing group key value pairs, rates matching all of the key / value pairs will be included in the response.
	PricingGroupValues map[string]string `json:"pricing_group_values,omitempty"`
	// List of pricing group key value pairs, rates containing the matching key / value pairs will be included in the response.
	PartialPricingGroupValues map[string]string `json:"partial_pricing_group_values,omitempty"`
}

func (o *GetRatesSelectors) GetProductID() *string {
	if o == nil {
		return nil
	}
	return o.ProductID
}

func (o *GetRatesSelectors) GetProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ProductTags
}

func (o *GetRatesSelectors) GetPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PricingGroupValues
}

func (o *GetRatesSelectors) GetPartialPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PartialPricingGroupValues
}

// GetRatesRequestBody - Rate schedule filter options.
type GetRatesRequestBody struct {
	// ID of the rate card to get the schedule for
	RateCardID string `json:"rate_card_id"`
	// inclusive starting point for the rates schedule
	At time.Time `json:"at"`
	// List of rate selectors, rates matching ANY of the selector will be included in the response Passing no selectors will result in all rates being returned.
	Selectors []GetRatesSelectors `json:"selectors,omitempty"`
}

func (g GetRatesRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetRatesRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetRatesRequestBody) GetRateCardID() string {
	if o == nil {
		return ""
	}
	return o.RateCardID
}

func (o *GetRatesRequestBody) GetAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.At
}

func (o *GetRatesRequestBody) GetSelectors() []GetRatesSelectors {
	if o == nil {
		return nil
	}
	return o.Selectors
}

type GetRatesRequest struct {
	// Max number of results that should be returned
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Cursor that indicates where the next page of results should start.
	NextPage *string `queryParam:"style=form,explode=true,name=next_page"`
	// Rate schedule filter options.
	RequestBody *GetRatesRequestBody `request:"mediaType=application/json"`
}

func (o *GetRatesRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetRatesRequest) GetNextPage() *string {
	if o == nil {
		return nil
	}
	return o.NextPage
}

func (o *GetRatesRequest) GetRequestBody() *GetRatesRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type GetRatesRateType string

const (
	GetRatesRateTypeFlatUpper         GetRatesRateType = "FLAT"
	GetRatesRateTypeFlatLower         GetRatesRateType = "flat"
	GetRatesRateTypePercentageUpper   GetRatesRateType = "PERCENTAGE"
	GetRatesRateTypePercentageLower   GetRatesRateType = "percentage"
	GetRatesRateTypeSubscriptionUpper GetRatesRateType = "SUBSCRIPTION"
	GetRatesRateTypeSubscriptionLower GetRatesRateType = "subscription"
	GetRatesRateTypeCustomUpper       GetRatesRateType = "CUSTOM"
	GetRatesRateTypeCustomLower       GetRatesRateType = "custom"
	GetRatesRateTypeTieredUpper       GetRatesRateType = "TIERED"
	GetRatesRateTypeTieredLower       GetRatesRateType = "tiered"
)

func (e GetRatesRateType) ToPointer() *GetRatesRateType {
	return &e
}
func (e *GetRatesRateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FLAT":
		fallthrough
	case "flat":
		fallthrough
	case "PERCENTAGE":
		fallthrough
	case "percentage":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "subscription":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "custom":
		fallthrough
	case "TIERED":
		fallthrough
	case "tiered":
		*e = GetRatesRateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRatesRateType: %v", v)
	}
}

type GetRatesTiers struct {
	Size  *float64 `json:"size,omitempty"`
	Price float64  `json:"price"`
}

func (o *GetRatesTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *GetRatesTiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type GetRatesCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetRatesCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetRatesCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetRatesRate struct {
	RateType GetRatesRateType `json:"rate_type"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price *float64 `json:"price,omitempty"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate processors.
	CustomRate map[string]any `json:"custom_rate,omitempty"`
	// Only set for PERCENTAGE rate_type. Defaults to false. If true, rate is computed using list prices rather than the standard rates for this product on the contract.
	UseListPrices *bool `json:"use_list_prices,omitempty"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity *float64 `json:"quantity,omitempty"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type.
	IsProrated *bool `json:"is_prorated,omitempty"`
	// Only set for TIERED rate_type.
	Tiers []GetRatesTiers `json:"tiers,omitempty"`
	// if pricing groups are used, this will contain the values used to calculate the price
	PricingGroupValues map[string]string   `json:"pricing_group_values,omitempty"`
	CreditType         *GetRatesCreditType `json:"credit_type,omitempty"`
}

func (o *GetRatesRate) GetRateType() GetRatesRateType {
	if o == nil {
		return GetRatesRateType("")
	}
	return o.RateType
}

func (o *GetRatesRate) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *GetRatesRate) GetCustomRate() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomRate
}

func (o *GetRatesRate) GetUseListPrices() *bool {
	if o == nil {
		return nil
	}
	return o.UseListPrices
}

func (o *GetRatesRate) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *GetRatesRate) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *GetRatesRate) GetTiers() []GetRatesTiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *GetRatesRate) GetPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PricingGroupValues
}

func (o *GetRatesRate) GetCreditType() *GetRatesCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

type GetRatesRateCardsRateType string

const (
	GetRatesRateCardsRateTypeFlatUpper         GetRatesRateCardsRateType = "FLAT"
	GetRatesRateCardsRateTypeFlatLower         GetRatesRateCardsRateType = "flat"
	GetRatesRateCardsRateTypePercentageUpper   GetRatesRateCardsRateType = "PERCENTAGE"
	GetRatesRateCardsRateTypePercentageLower   GetRatesRateCardsRateType = "percentage"
	GetRatesRateCardsRateTypeSubscriptionUpper GetRatesRateCardsRateType = "SUBSCRIPTION"
	GetRatesRateCardsRateTypeSubscriptionLower GetRatesRateCardsRateType = "subscription"
	GetRatesRateCardsRateTypeTieredUpper       GetRatesRateCardsRateType = "TIERED"
	GetRatesRateCardsRateTypeTieredLower       GetRatesRateCardsRateType = "tiered"
	GetRatesRateCardsRateTypeCustomUpper       GetRatesRateCardsRateType = "CUSTOM"
	GetRatesRateCardsRateTypeCustomLower       GetRatesRateCardsRateType = "custom"
)

func (e GetRatesRateCardsRateType) ToPointer() *GetRatesRateCardsRateType {
	return &e
}
func (e *GetRatesRateCardsRateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FLAT":
		fallthrough
	case "flat":
		fallthrough
	case "PERCENTAGE":
		fallthrough
	case "percentage":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "subscription":
		fallthrough
	case "TIERED":
		fallthrough
	case "tiered":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "custom":
		*e = GetRatesRateCardsRateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRatesRateCardsRateType: %v", v)
	}
}

type GetRatesRateCardsTiers struct {
	Size  *float64 `json:"size,omitempty"`
	Price float64  `json:"price"`
}

func (o *GetRatesRateCardsTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *GetRatesRateCardsTiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type GetRatesRateCardsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetRatesRateCardsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetRatesRateCardsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// GetRatesCommitRate - The rate that will be used to rate a product when it is paid for by a commit. This feature requires opt-in before it can be used. Please contact Metronome support to enable this feature.
type GetRatesCommitRate struct {
	RateType GetRatesRateCardsRateType `json:"rate_type"`
	// Commit rate price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price *float64 `json:"price,omitempty"`
	// Commit rate quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity *float64 `json:"quantity,omitempty"`
	// Commit rate proration configuration. Only valid for SUBSCRIPTION rate_type.
	IsProrated *bool `json:"is_prorated,omitempty"`
	// Only set for PERCENTAGE rate_type. Defaults to false. If true, rate is computed using list prices rather than the standard rates for this product on the contract.
	UseListPrices *bool `json:"use_list_prices,omitempty"`
	// Only set for TIERED rate_type.
	Tiers      []GetRatesRateCardsTiers     `json:"tiers,omitempty"`
	CreditType *GetRatesRateCardsCreditType `json:"credit_type,omitempty"`
}

func (o *GetRatesCommitRate) GetRateType() GetRatesRateCardsRateType {
	if o == nil {
		return GetRatesRateCardsRateType("")
	}
	return o.RateType
}

func (o *GetRatesCommitRate) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *GetRatesCommitRate) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *GetRatesCommitRate) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *GetRatesCommitRate) GetUseListPrices() *bool {
	if o == nil {
		return nil
	}
	return o.UseListPrices
}

func (o *GetRatesCommitRate) GetTiers() []GetRatesRateCardsTiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *GetRatesCommitRate) GetCreditType() *GetRatesRateCardsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

type GetRatesData struct {
	ProductID          string            `json:"product_id"`
	ProductName        string            `json:"product_name"`
	ProductTags        []string          `json:"product_tags"`
	PricingGroupValues map[string]string `json:"pricing_group_values,omitempty"`
	StartingAt         time.Time         `json:"starting_at"`
	EndingBefore       *time.Time        `json:"ending_before,omitempty"`
	Entitled           bool              `json:"entitled"`
	Rate               GetRatesRate      `json:"rate"`
	// The rate that will be used to rate a product when it is paid for by a commit. This feature requires opt-in before it can be used. Please contact Metronome support to enable this feature.
	CommitRate *GetRatesCommitRate `json:"commit_rate,omitempty"`
}

func (g GetRatesData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetRatesData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetRatesData) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *GetRatesData) GetProductName() string {
	if o == nil {
		return ""
	}
	return o.ProductName
}

func (o *GetRatesData) GetProductTags() []string {
	if o == nil {
		return []string{}
	}
	return o.ProductTags
}

func (o *GetRatesData) GetPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PricingGroupValues
}

func (o *GetRatesData) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *GetRatesData) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *GetRatesData) GetEntitled() bool {
	if o == nil {
		return false
	}
	return o.Entitled
}

func (o *GetRatesData) GetRate() GetRatesRate {
	if o == nil {
		return GetRatesRate{}
	}
	return o.Rate
}

func (o *GetRatesData) GetCommitRate() *GetRatesCommitRate {
	if o == nil {
		return nil
	}
	return o.CommitRate
}

// GetRatesResponseBody - Success
type GetRatesResponseBody struct {
	NextPage *string        `json:"next_page,omitempty"`
	Data     []GetRatesData `json:"data"`
}

func (o *GetRatesResponseBody) GetNextPage() *string {
	if o == nil {
		return nil
	}
	return o.NextPage
}

func (o *GetRatesResponseBody) GetData() []GetRatesData {
	if o == nil {
		return []GetRatesData{}
	}
	return o.Data
}

type GetRatesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *GetRatesResponseBody
}

func (o *GetRatesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetRatesResponse) GetObject() *GetRatesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
