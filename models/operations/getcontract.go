// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/Metronome-Industries/metronome-go-sdk/internal/utils"
	"github.com/Metronome-Industries/metronome-go-sdk/models/components"
	"time"
)

// GetContractRequestBody - Contract and customer IDs
type GetContractRequestBody struct {
	CustomerID string `json:"customer_id"`
	ContractID string `json:"contract_id"`
	// Include commit ledgers in the response. Setting this flag may cause the query to be slower.
	IncludeLedgers *bool `json:"include_ledgers,omitempty"`
}

func (o *GetContractRequestBody) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *GetContractRequestBody) GetContractID() string {
	if o == nil {
		return ""
	}
	return o.ContractID
}

func (o *GetContractRequestBody) GetIncludeLedgers() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeLedgers
}

type GetContractContractsResponse200ApplicationJSONResponseBodyContract struct {
	ID string `json:"id"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyContract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractType string

const (
	GetContractTypePrepaid  GetContractType = "PREPAID"
	GetContractTypePostpaid GetContractType = "POSTPAID"
)

func (e GetContractType) ToPointer() *GetContractType {
	return &e
}
func (e *GetContractType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID":
		fallthrough
	case "POSTPAID":
		*e = GetContractType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractType: %v", v)
	}
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type GetContractContractsResponse200ApplicationJSONCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractContractsResponse200ApplicationJSONCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractContractsResponse200ApplicationJSONCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialScheduleItems struct {
	ID           string    `json:"id"`
	Amount       float64   `json:"amount"`
	StartingAt   time.Time `json:"starting_at"`
	EndingBefore time.Time `json:"ending_before"`
}

func (g GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialScheduleItems) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialScheduleItems) GetEndingBefore() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndingBefore
}

// GetContractContractsResponse200ApplicationJSONResponseBodyAccessSchedule - The schedule that the customer will gain access to the credits purposed with this commit.
type GetContractContractsResponse200ApplicationJSONResponseBodyAccessSchedule struct {
	CreditType    *GetContractContractsResponse200ApplicationJSONCreditType                            `json:"credit_type,omitempty"`
	ScheduleItems []GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialScheduleItems `json:"schedule_items"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyAccessSchedule) GetCreditType() *GetContractContractsResponse200ApplicationJSONCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyAccessSchedule) GetScheduleItems() []GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialScheduleItems {
	if o == nil {
		return []GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialScheduleItems{}
	}
	return o.ScheduleItems
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractScheduleItems struct {
	ID        string    `json:"id"`
	InvoiceID string    `json:"invoice_id"`
	Amount    float64   `json:"amount"`
	UnitPrice float64   `json:"unit_price"`
	Quantity  float64   `json:"quantity"`
	Timestamp time.Time `json:"timestamp"`
}

func (g GetContractScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractScheduleItems) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *GetContractScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractScheduleItems) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *GetContractScheduleItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *GetContractScheduleItems) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

// GetContractContractsResponseInvoiceSchedule - The schedule that the customer will be invoiced for this commit.
type GetContractContractsResponseInvoiceSchedule struct {
	CreditType    *GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialCreditType `json:"credit_type,omitempty"`
	ScheduleItems []GetContractScheduleItems                                                       `json:"schedule_items,omitempty"`
}

func (o *GetContractContractsResponseInvoiceSchedule) GetCreditType() *GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *GetContractContractsResponseInvoiceSchedule) GetScheduleItems() []GetContractScheduleItems {
	if o == nil {
		return nil
	}
	return o.ScheduleItems
}

// GetContractContractsResponseInvoiceContract - The contract that this commit will be billed on.
type GetContractContractsResponseInvoiceContract struct {
	ID string `json:"id"`
}

func (o *GetContractContractsResponseInvoiceContract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsResponseRolledOverFrom struct {
	CommitID   string `json:"commit_id"`
	ContractID string `json:"contract_id"`
}

func (o *GetContractContractsResponseRolledOverFrom) GetCommitID() string {
	if o == nil {
		return ""
	}
	return o.CommitID
}

func (o *GetContractContractsResponseRolledOverFrom) GetContractID() string {
	if o == nil {
		return ""
	}
	return o.ContractID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits13Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits13TypePostpaidCommitExpiration GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits13Type = "POSTPAID_COMMIT_EXPIRATION"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits13Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits13Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits13Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_EXPIRATION":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits13Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits13Type: %v", v)
	}
}

type GetContractLedgerContracts13 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits13Type `json:"type"`
	Timestamp time.Time                                                                                `json:"timestamp"`
	Amount    float64                                                                                  `json:"amount"`
}

func (g GetContractLedgerContracts13) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContracts13) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContracts13) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits13Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits13Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContracts13) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContracts13) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits12Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits12TypePostpaidCommitManual GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits12Type = "POSTPAID_COMMIT_MANUAL"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits12Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits12Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_MANUAL":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits12Type: %v", v)
	}
}

type GetContractLedgerContracts12 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits12Type `json:"type"`
	Timestamp time.Time                                                                                `json:"timestamp"`
	Amount    float64                                                                                  `json:"amount"`
	Reason    string                                                                                   `json:"reason"`
}

func (g GetContractLedgerContracts12) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContracts12) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContracts12) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits12Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits12Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContracts12) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContracts12) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContracts12) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits11Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits11TypePrepaidCommitManual GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits11Type = "PREPAID_COMMIT_MANUAL"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits11Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits11Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_MANUAL":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits11Type: %v", v)
	}
}

type GetContractLedgerContracts11 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits11Type `json:"type"`
	Timestamp time.Time                                                                                `json:"timestamp"`
	Amount    float64                                                                                  `json:"amount"`
	Reason    string                                                                                   `json:"reason"`
}

func (g GetContractLedgerContracts11) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContracts11) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContracts11) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits11Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits11Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContracts11) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContracts11) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContracts11) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommitsType string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommitsTypePostpaidCommitTrueup GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommitsType = "POSTPAID_COMMIT_TRUEUP"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommitsType) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommitsType {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommitsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_TRUEUP":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommitsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommitsType: %v", v)
	}
}

type GetContractLedgerContracts10 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommitsType `json:"type"`
	Timestamp time.Time                                                                              `json:"timestamp"`
	Amount    float64                                                                                `json:"amount"`
	InvoiceID string                                                                                 `json:"invoice_id"`
}

func (g GetContractLedgerContracts10) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContracts10) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContracts10) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommitsType {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommitsType("")
	}
	return o.Type
}

func (o *GetContractLedgerContracts10) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContracts10) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContracts10) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialType string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialTypePostpaidCommitRollover GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialType = "POSTPAID_COMMIT_ROLLOVER"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialType) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialType {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_ROLLOVER":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialType: %v", v)
	}
}

type GetContractLedgerContracts9 struct {
	Type          GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialType `json:"type"`
	Timestamp     time.Time                                                                       `json:"timestamp"`
	Amount        float64                                                                         `json:"amount"`
	SegmentID     string                                                                          `json:"segment_id"`
	NewContractID string                                                                          `json:"new_contract_id"`
}

func (g GetContractLedgerContracts9) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContracts9) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContracts9) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialType {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialType("")
	}
	return o.Type
}

func (o *GetContractLedgerContracts9) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContracts9) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContracts9) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedgerContracts9) GetNewContractID() string {
	if o == nil {
		return ""
	}
	return o.NewContractID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataType string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataTypePostpaidCommitAutomatedInvoiceDeduction GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataType = "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataType) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataType {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataType: %v", v)
	}
}

type GetContractLedgerContracts8 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataType `json:"type"`
	Timestamp time.Time                                                                `json:"timestamp"`
	Amount    float64                                                                  `json:"amount"`
	SegmentID string                                                                   `json:"segment_id"`
	InvoiceID string                                                                   `json:"invoice_id"`
}

func (g GetContractLedgerContracts8) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContracts8) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContracts8) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataType {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataType("")
	}
	return o.Type
}

func (o *GetContractLedgerContracts8) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContracts8) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContracts8) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedgerContracts8) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyType string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyTypePostpaidCommitInitialBalance GetContractLedgerContractsResponse200ApplicationJSONResponseBodyType = "POSTPAID_COMMIT_INITIAL_BALANCE"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyType) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_INITIAL_BALANCE":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type GetContractLedgerContracts7 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyType `json:"type"`
	Timestamp time.Time                                                            `json:"timestamp"`
	Amount    float64                                                              `json:"amount"`
}

func (g GetContractLedgerContracts7) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContracts7) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContracts7) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *GetContractLedgerContracts7) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContracts7) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

type GetContractLedgerContractsResponse200ApplicationJSONType string

const (
	GetContractLedgerContractsResponse200ApplicationJSONTypePrepaidCommitCredited GetContractLedgerContractsResponse200ApplicationJSONType = "PREPAID_COMMIT_CREDITED"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONType) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONType {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_CREDITED":
		*e = GetContractLedgerContractsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONType: %v", v)
	}
}

type GetContractLedgerContractsResponse200ApplicationJSON6 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONType `json:"type"`
	Timestamp time.Time                                                `json:"timestamp"`
	Amount    float64                                                  `json:"amount"`
	SegmentID string                                                   `json:"segment_id"`
	InvoiceID string                                                   `json:"invoice_id"`
}

func (g GetContractLedgerContractsResponse200ApplicationJSON6) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse200ApplicationJSON6) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON6) GetType() GetContractLedgerContractsResponse200ApplicationJSONType {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON6) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON6) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON6) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON6) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200Type string

const (
	GetContractLedgerContractsResponse200TypePrepaidCommitCanceled GetContractLedgerContractsResponse200Type = "PREPAID_COMMIT_CANCELED"
)

func (e GetContractLedgerContractsResponse200Type) ToPointer() *GetContractLedgerContractsResponse200Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_CANCELED":
		*e = GetContractLedgerContractsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200Type: %v", v)
	}
}

type GetContractLedgerContractsResponse200ApplicationJSON5 struct {
	Type      GetContractLedgerContractsResponse200Type `json:"type"`
	Timestamp time.Time                                 `json:"timestamp"`
	Amount    float64                                   `json:"amount"`
	SegmentID string                                    `json:"segment_id"`
	InvoiceID string                                    `json:"invoice_id"`
}

func (g GetContractLedgerContractsResponse200ApplicationJSON5) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse200ApplicationJSON5) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON5) GetType() GetContractLedgerContractsResponse200Type {
	if o == nil {
		return GetContractLedgerContractsResponse200Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON5) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON5) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON5) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON5) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponseType string

const (
	GetContractLedgerContractsResponseTypePrepaidCommitExpiration GetContractLedgerContractsResponseType = "PREPAID_COMMIT_EXPIRATION"
)

func (e GetContractLedgerContractsResponseType) ToPointer() *GetContractLedgerContractsResponseType {
	return &e
}
func (e *GetContractLedgerContractsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_EXPIRATION":
		*e = GetContractLedgerContractsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponseType: %v", v)
	}
}

type GetContractLedgerContractsResponse200ApplicationJSON4 struct {
	Type      GetContractLedgerContractsResponseType `json:"type"`
	Timestamp time.Time                              `json:"timestamp"`
	Amount    float64                                `json:"amount"`
	SegmentID string                                 `json:"segment_id"`
}

func (g GetContractLedgerContractsResponse200ApplicationJSON4) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse200ApplicationJSON4) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON4) GetType() GetContractLedgerContractsResponseType {
	if o == nil {
		return GetContractLedgerContractsResponseType("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON4) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON4) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON4) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type GetContractLedgerContractsType string

const (
	GetContractLedgerContractsTypePrepaidCommitRollover GetContractLedgerContractsType = "PREPAID_COMMIT_ROLLOVER"
)

func (e GetContractLedgerContractsType) ToPointer() *GetContractLedgerContractsType {
	return &e
}
func (e *GetContractLedgerContractsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_ROLLOVER":
		*e = GetContractLedgerContractsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsType: %v", v)
	}
}

type GetContractLedgerContractsResponse200ApplicationJSON3 struct {
	Type          GetContractLedgerContractsType `json:"type"`
	Timestamp     time.Time                      `json:"timestamp"`
	Amount        float64                        `json:"amount"`
	SegmentID     string                         `json:"segment_id"`
	NewContractID string                         `json:"new_contract_id"`
}

func (g GetContractLedgerContractsResponse200ApplicationJSON3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse200ApplicationJSON3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON3) GetType() GetContractLedgerContractsType {
	if o == nil {
		return GetContractLedgerContractsType("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON3) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON3) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON3) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON3) GetNewContractID() string {
	if o == nil {
		return ""
	}
	return o.NewContractID
}

type GetContractLedgerType string

const (
	GetContractLedgerTypePrepaidCommitAutomatedInvoiceDeduction GetContractLedgerType = "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e GetContractLedgerType) ToPointer() *GetContractLedgerType {
	return &e
}
func (e *GetContractLedgerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = GetContractLedgerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerType: %v", v)
	}
}

type GetContractLedgerContractsResponse200ApplicationJSON2 struct {
	Type      GetContractLedgerType `json:"type"`
	Timestamp time.Time             `json:"timestamp"`
	Amount    float64               `json:"amount"`
	SegmentID string                `json:"segment_id"`
	InvoiceID string                `json:"invoice_id"`
}

func (g GetContractLedgerContractsResponse200ApplicationJSON2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse200ApplicationJSON2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON2) GetType() GetContractLedgerType {
	if o == nil {
		return GetContractLedgerType("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON2) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON2) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON2) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON2) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits1Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits1TypePrepaidCommitSegmentStart GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits1Type = "PREPAID_COMMIT_SEGMENT_START"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits1Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits1Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_SEGMENT_START":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits1Type: %v", v)
	}
}

type GetContractLedgerContractsResponse200ApplicationJSON1 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits1Type `json:"type"`
	Timestamp time.Time                                                                               `json:"timestamp"`
	Amount    float64                                                                                 `json:"amount"`
	SegmentID string                                                                                  `json:"segment_id"`
}

func (g GetContractLedgerContractsResponse200ApplicationJSON1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse200ApplicationJSON1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON1) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits1Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits1Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON1) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON1) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse200ApplicationJSON1) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type GetContractContractsResponse200ApplicationJSONResponseBodyLedgerType string

const (
	GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContractsResponse200ApplicationJSON1 GetContractContractsResponse200ApplicationJSONResponseBodyLedgerType = "getContract_ledger_Contracts_response_200_ApplicationJSON_1"
	GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContractsResponse200ApplicationJSON2 GetContractContractsResponse200ApplicationJSONResponseBodyLedgerType = "getContract_ledger_Contracts_response_200_ApplicationJSON_2"
	GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContractsResponse200ApplicationJSON3 GetContractContractsResponse200ApplicationJSONResponseBodyLedgerType = "getContract_ledger_Contracts_response_200_ApplicationJSON_3"
	GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContractsResponse200ApplicationJSON4 GetContractContractsResponse200ApplicationJSONResponseBodyLedgerType = "getContract_ledger_Contracts_response_200_ApplicationJSON_4"
	GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContractsResponse200ApplicationJSON5 GetContractContractsResponse200ApplicationJSONResponseBodyLedgerType = "getContract_ledger_Contracts_response_200_ApplicationJSON_5"
	GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContractsResponse200ApplicationJSON6 GetContractContractsResponse200ApplicationJSONResponseBodyLedgerType = "getContract_ledger_Contracts_response_200_ApplicationJSON_6"
	GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContracts7                           GetContractContractsResponse200ApplicationJSONResponseBodyLedgerType = "getContract_ledger_Contracts_7"
	GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContracts8                           GetContractContractsResponse200ApplicationJSONResponseBodyLedgerType = "getContract_ledger_Contracts_8"
	GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContracts9                           GetContractContractsResponse200ApplicationJSONResponseBodyLedgerType = "getContract_ledger_Contracts_9"
	GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContracts10                          GetContractContractsResponse200ApplicationJSONResponseBodyLedgerType = "getContract_ledger_Contracts_10"
	GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContracts11                          GetContractContractsResponse200ApplicationJSONResponseBodyLedgerType = "getContract_ledger_Contracts_11"
	GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContracts12                          GetContractContractsResponse200ApplicationJSONResponseBodyLedgerType = "getContract_ledger_Contracts_12"
	GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContracts13                          GetContractContractsResponse200ApplicationJSONResponseBodyLedgerType = "getContract_ledger_Contracts_13"
)

type GetContractContractsResponse200ApplicationJSONResponseBodyLedger struct {
	GetContractLedgerContractsResponse200ApplicationJSON1 *GetContractLedgerContractsResponse200ApplicationJSON1
	GetContractLedgerContractsResponse200ApplicationJSON2 *GetContractLedgerContractsResponse200ApplicationJSON2
	GetContractLedgerContractsResponse200ApplicationJSON3 *GetContractLedgerContractsResponse200ApplicationJSON3
	GetContractLedgerContractsResponse200ApplicationJSON4 *GetContractLedgerContractsResponse200ApplicationJSON4
	GetContractLedgerContractsResponse200ApplicationJSON5 *GetContractLedgerContractsResponse200ApplicationJSON5
	GetContractLedgerContractsResponse200ApplicationJSON6 *GetContractLedgerContractsResponse200ApplicationJSON6
	GetContractLedgerContracts7                           *GetContractLedgerContracts7
	GetContractLedgerContracts8                           *GetContractLedgerContracts8
	GetContractLedgerContracts9                           *GetContractLedgerContracts9
	GetContractLedgerContracts10                          *GetContractLedgerContracts10
	GetContractLedgerContracts11                          *GetContractLedgerContracts11
	GetContractLedgerContracts12                          *GetContractLedgerContracts12
	GetContractLedgerContracts13                          *GetContractLedgerContracts13

	Type GetContractContractsResponse200ApplicationJSONResponseBodyLedgerType
}

func CreateGetContractContractsResponse200ApplicationJSONResponseBodyLedgerGetContractLedgerContractsResponse200ApplicationJSON1(getContractLedgerContractsResponse200ApplicationJSON1 GetContractLedgerContractsResponse200ApplicationJSON1) GetContractContractsResponse200ApplicationJSONResponseBodyLedger {
	typ := GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContractsResponse200ApplicationJSON1

	return GetContractContractsResponse200ApplicationJSONResponseBodyLedger{
		GetContractLedgerContractsResponse200ApplicationJSON1: &getContractLedgerContractsResponse200ApplicationJSON1,
		Type: typ,
	}
}

func CreateGetContractContractsResponse200ApplicationJSONResponseBodyLedgerGetContractLedgerContractsResponse200ApplicationJSON2(getContractLedgerContractsResponse200ApplicationJSON2 GetContractLedgerContractsResponse200ApplicationJSON2) GetContractContractsResponse200ApplicationJSONResponseBodyLedger {
	typ := GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContractsResponse200ApplicationJSON2

	return GetContractContractsResponse200ApplicationJSONResponseBodyLedger{
		GetContractLedgerContractsResponse200ApplicationJSON2: &getContractLedgerContractsResponse200ApplicationJSON2,
		Type: typ,
	}
}

func CreateGetContractContractsResponse200ApplicationJSONResponseBodyLedgerGetContractLedgerContractsResponse200ApplicationJSON3(getContractLedgerContractsResponse200ApplicationJSON3 GetContractLedgerContractsResponse200ApplicationJSON3) GetContractContractsResponse200ApplicationJSONResponseBodyLedger {
	typ := GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContractsResponse200ApplicationJSON3

	return GetContractContractsResponse200ApplicationJSONResponseBodyLedger{
		GetContractLedgerContractsResponse200ApplicationJSON3: &getContractLedgerContractsResponse200ApplicationJSON3,
		Type: typ,
	}
}

func CreateGetContractContractsResponse200ApplicationJSONResponseBodyLedgerGetContractLedgerContractsResponse200ApplicationJSON4(getContractLedgerContractsResponse200ApplicationJSON4 GetContractLedgerContractsResponse200ApplicationJSON4) GetContractContractsResponse200ApplicationJSONResponseBodyLedger {
	typ := GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContractsResponse200ApplicationJSON4

	return GetContractContractsResponse200ApplicationJSONResponseBodyLedger{
		GetContractLedgerContractsResponse200ApplicationJSON4: &getContractLedgerContractsResponse200ApplicationJSON4,
		Type: typ,
	}
}

func CreateGetContractContractsResponse200ApplicationJSONResponseBodyLedgerGetContractLedgerContractsResponse200ApplicationJSON5(getContractLedgerContractsResponse200ApplicationJSON5 GetContractLedgerContractsResponse200ApplicationJSON5) GetContractContractsResponse200ApplicationJSONResponseBodyLedger {
	typ := GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContractsResponse200ApplicationJSON5

	return GetContractContractsResponse200ApplicationJSONResponseBodyLedger{
		GetContractLedgerContractsResponse200ApplicationJSON5: &getContractLedgerContractsResponse200ApplicationJSON5,
		Type: typ,
	}
}

func CreateGetContractContractsResponse200ApplicationJSONResponseBodyLedgerGetContractLedgerContractsResponse200ApplicationJSON6(getContractLedgerContractsResponse200ApplicationJSON6 GetContractLedgerContractsResponse200ApplicationJSON6) GetContractContractsResponse200ApplicationJSONResponseBodyLedger {
	typ := GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContractsResponse200ApplicationJSON6

	return GetContractContractsResponse200ApplicationJSONResponseBodyLedger{
		GetContractLedgerContractsResponse200ApplicationJSON6: &getContractLedgerContractsResponse200ApplicationJSON6,
		Type: typ,
	}
}

func CreateGetContractContractsResponse200ApplicationJSONResponseBodyLedgerGetContractLedgerContracts7(getContractLedgerContracts7 GetContractLedgerContracts7) GetContractContractsResponse200ApplicationJSONResponseBodyLedger {
	typ := GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContracts7

	return GetContractContractsResponse200ApplicationJSONResponseBodyLedger{
		GetContractLedgerContracts7: &getContractLedgerContracts7,
		Type:                        typ,
	}
}

func CreateGetContractContractsResponse200ApplicationJSONResponseBodyLedgerGetContractLedgerContracts8(getContractLedgerContracts8 GetContractLedgerContracts8) GetContractContractsResponse200ApplicationJSONResponseBodyLedger {
	typ := GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContracts8

	return GetContractContractsResponse200ApplicationJSONResponseBodyLedger{
		GetContractLedgerContracts8: &getContractLedgerContracts8,
		Type:                        typ,
	}
}

func CreateGetContractContractsResponse200ApplicationJSONResponseBodyLedgerGetContractLedgerContracts9(getContractLedgerContracts9 GetContractLedgerContracts9) GetContractContractsResponse200ApplicationJSONResponseBodyLedger {
	typ := GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContracts9

	return GetContractContractsResponse200ApplicationJSONResponseBodyLedger{
		GetContractLedgerContracts9: &getContractLedgerContracts9,
		Type:                        typ,
	}
}

func CreateGetContractContractsResponse200ApplicationJSONResponseBodyLedgerGetContractLedgerContracts10(getContractLedgerContracts10 GetContractLedgerContracts10) GetContractContractsResponse200ApplicationJSONResponseBodyLedger {
	typ := GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContracts10

	return GetContractContractsResponse200ApplicationJSONResponseBodyLedger{
		GetContractLedgerContracts10: &getContractLedgerContracts10,
		Type:                         typ,
	}
}

func CreateGetContractContractsResponse200ApplicationJSONResponseBodyLedgerGetContractLedgerContracts11(getContractLedgerContracts11 GetContractLedgerContracts11) GetContractContractsResponse200ApplicationJSONResponseBodyLedger {
	typ := GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContracts11

	return GetContractContractsResponse200ApplicationJSONResponseBodyLedger{
		GetContractLedgerContracts11: &getContractLedgerContracts11,
		Type:                         typ,
	}
}

func CreateGetContractContractsResponse200ApplicationJSONResponseBodyLedgerGetContractLedgerContracts12(getContractLedgerContracts12 GetContractLedgerContracts12) GetContractContractsResponse200ApplicationJSONResponseBodyLedger {
	typ := GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContracts12

	return GetContractContractsResponse200ApplicationJSONResponseBodyLedger{
		GetContractLedgerContracts12: &getContractLedgerContracts12,
		Type:                         typ,
	}
}

func CreateGetContractContractsResponse200ApplicationJSONResponseBodyLedgerGetContractLedgerContracts13(getContractLedgerContracts13 GetContractLedgerContracts13) GetContractContractsResponse200ApplicationJSONResponseBodyLedger {
	typ := GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContracts13

	return GetContractContractsResponse200ApplicationJSONResponseBodyLedger{
		GetContractLedgerContracts13: &getContractLedgerContracts13,
		Type:                         typ,
	}
}

func (u *GetContractContractsResponse200ApplicationJSONResponseBodyLedger) UnmarshalJSON(data []byte) error {

	var getContractLedgerContracts7 GetContractLedgerContracts7 = GetContractLedgerContracts7{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContracts7, "", true, true); err == nil {
		u.GetContractLedgerContracts7 = &getContractLedgerContracts7
		u.Type = GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContracts7
		return nil
	}

	var getContractLedgerContracts13 GetContractLedgerContracts13 = GetContractLedgerContracts13{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContracts13, "", true, true); err == nil {
		u.GetContractLedgerContracts13 = &getContractLedgerContracts13
		u.Type = GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContracts13
		return nil
	}

	var getContractLedgerContractsResponse200ApplicationJSON4 GetContractLedgerContractsResponse200ApplicationJSON4 = GetContractLedgerContractsResponse200ApplicationJSON4{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse200ApplicationJSON4, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse200ApplicationJSON4 = &getContractLedgerContractsResponse200ApplicationJSON4
		u.Type = GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContractsResponse200ApplicationJSON4
		return nil
	}

	var getContractLedgerContractsResponse200ApplicationJSON1 GetContractLedgerContractsResponse200ApplicationJSON1 = GetContractLedgerContractsResponse200ApplicationJSON1{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse200ApplicationJSON1, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse200ApplicationJSON1 = &getContractLedgerContractsResponse200ApplicationJSON1
		u.Type = GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContractsResponse200ApplicationJSON1
		return nil
	}

	var getContractLedgerContracts10 GetContractLedgerContracts10 = GetContractLedgerContracts10{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContracts10, "", true, true); err == nil {
		u.GetContractLedgerContracts10 = &getContractLedgerContracts10
		u.Type = GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContracts10
		return nil
	}

	var getContractLedgerContracts11 GetContractLedgerContracts11 = GetContractLedgerContracts11{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContracts11, "", true, true); err == nil {
		u.GetContractLedgerContracts11 = &getContractLedgerContracts11
		u.Type = GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContracts11
		return nil
	}

	var getContractLedgerContracts12 GetContractLedgerContracts12 = GetContractLedgerContracts12{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContracts12, "", true, true); err == nil {
		u.GetContractLedgerContracts12 = &getContractLedgerContracts12
		u.Type = GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContracts12
		return nil
	}

	var getContractLedgerContractsResponse200ApplicationJSON5 GetContractLedgerContractsResponse200ApplicationJSON5 = GetContractLedgerContractsResponse200ApplicationJSON5{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse200ApplicationJSON5, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse200ApplicationJSON5 = &getContractLedgerContractsResponse200ApplicationJSON5
		u.Type = GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContractsResponse200ApplicationJSON5
		return nil
	}

	var getContractLedgerContractsResponse200ApplicationJSON6 GetContractLedgerContractsResponse200ApplicationJSON6 = GetContractLedgerContractsResponse200ApplicationJSON6{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse200ApplicationJSON6, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse200ApplicationJSON6 = &getContractLedgerContractsResponse200ApplicationJSON6
		u.Type = GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContractsResponse200ApplicationJSON6
		return nil
	}

	var getContractLedgerContractsResponse200ApplicationJSON3 GetContractLedgerContractsResponse200ApplicationJSON3 = GetContractLedgerContractsResponse200ApplicationJSON3{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse200ApplicationJSON3, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse200ApplicationJSON3 = &getContractLedgerContractsResponse200ApplicationJSON3
		u.Type = GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContractsResponse200ApplicationJSON3
		return nil
	}

	var getContractLedgerContracts8 GetContractLedgerContracts8 = GetContractLedgerContracts8{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContracts8, "", true, true); err == nil {
		u.GetContractLedgerContracts8 = &getContractLedgerContracts8
		u.Type = GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContracts8
		return nil
	}

	var getContractLedgerContracts9 GetContractLedgerContracts9 = GetContractLedgerContracts9{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContracts9, "", true, true); err == nil {
		u.GetContractLedgerContracts9 = &getContractLedgerContracts9
		u.Type = GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContracts9
		return nil
	}

	var getContractLedgerContractsResponse200ApplicationJSON2 GetContractLedgerContractsResponse200ApplicationJSON2 = GetContractLedgerContractsResponse200ApplicationJSON2{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse200ApplicationJSON2, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse200ApplicationJSON2 = &getContractLedgerContractsResponse200ApplicationJSON2
		u.Type = GetContractContractsResponse200ApplicationJSONResponseBodyLedgerTypeGetContractLedgerContractsResponse200ApplicationJSON2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetContractContractsResponse200ApplicationJSONResponseBodyLedger", string(data))
}

func (u GetContractContractsResponse200ApplicationJSONResponseBodyLedger) MarshalJSON() ([]byte, error) {
	if u.GetContractLedgerContractsResponse200ApplicationJSON1 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse200ApplicationJSON1, "", true)
	}

	if u.GetContractLedgerContractsResponse200ApplicationJSON2 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse200ApplicationJSON2, "", true)
	}

	if u.GetContractLedgerContractsResponse200ApplicationJSON3 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse200ApplicationJSON3, "", true)
	}

	if u.GetContractLedgerContractsResponse200ApplicationJSON4 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse200ApplicationJSON4, "", true)
	}

	if u.GetContractLedgerContractsResponse200ApplicationJSON5 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse200ApplicationJSON5, "", true)
	}

	if u.GetContractLedgerContractsResponse200ApplicationJSON6 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse200ApplicationJSON6, "", true)
	}

	if u.GetContractLedgerContracts7 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContracts7, "", true)
	}

	if u.GetContractLedgerContracts8 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContracts8, "", true)
	}

	if u.GetContractLedgerContracts9 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContracts9, "", true)
	}

	if u.GetContractLedgerContracts10 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContracts10, "", true)
	}

	if u.GetContractLedgerContracts11 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContracts11, "", true)
	}

	if u.GetContractLedgerContracts12 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContracts12, "", true)
	}

	if u.GetContractLedgerContracts13 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContracts13, "", true)
	}

	return nil, errors.New("could not marshal union type GetContractContractsResponse200ApplicationJSONResponseBodyLedger: all fields are null")
}

type GetContractContractsResponseCommits struct {
	ID       string                                                              `json:"id"`
	Contract *GetContractContractsResponse200ApplicationJSONResponseBodyContract `json:"contract,omitempty"`
	Type     GetContractType                                                     `json:"type"`
	Name     *string                                                             `json:"name,omitempty"`
	// If multiple credits or commits are applicable, the one with the lower priority will apply first.
	Priority *float64                                                                     `json:"priority,omitempty"`
	Product  GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialProduct `json:"product"`
	// The schedule that the customer will gain access to the credits purposed with this commit.
	AccessSchedule *GetContractContractsResponse200ApplicationJSONResponseBodyAccessSchedule `json:"access_schedule,omitempty"`
	// The schedule that the customer will be invoiced for this commit.
	InvoiceSchedule *GetContractContractsResponseInvoiceSchedule `json:"invoice_schedule,omitempty"`
	// The contract that this commit will be billed on.
	InvoiceContract       *GetContractContractsResponseInvoiceContract `json:"invoice_contract,omitempty"`
	RolledOverFrom        *GetContractContractsResponseRolledOverFrom  `json:"rolled_over_from,omitempty"`
	Description           *string                                      `json:"description,omitempty"`
	RolloverFraction      *float64                                     `json:"rollover_fraction,omitempty"`
	ApplicableProductIds  []string                                     `json:"applicable_product_ids,omitempty"`
	ApplicableProductTags []string                                     `json:"applicable_product_tags,omitempty"`
	ApplicableContractIds []string                                     `json:"applicable_contract_ids,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// (DEPRECATED) Use access_schedule + invoice_schedule instead.
	Amount *float64 `json:"amount,omitempty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string `json:"salesforce_opportunity_id,omitempty"`
	// A list of ordered events that impact the balance of a commit. For example, an invoice deduction or a rollover.
	Ledger       []GetContractContractsResponse200ApplicationJSONResponseBodyLedger `json:"ledger,omitempty"`
	CustomFields map[string]string                                                  `json:"custom_fields,omitempty"`
}

func (o *GetContractContractsResponseCommits) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponseCommits) GetContract() *GetContractContractsResponse200ApplicationJSONResponseBodyContract {
	if o == nil {
		return nil
	}
	return o.Contract
}

func (o *GetContractContractsResponseCommits) GetType() GetContractType {
	if o == nil {
		return GetContractType("")
	}
	return o.Type
}

func (o *GetContractContractsResponseCommits) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetContractContractsResponseCommits) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *GetContractContractsResponseCommits) GetProduct() GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialProduct {
	if o == nil {
		return GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialProduct{}
	}
	return o.Product
}

func (o *GetContractContractsResponseCommits) GetAccessSchedule() *GetContractContractsResponse200ApplicationJSONResponseBodyAccessSchedule {
	if o == nil {
		return nil
	}
	return o.AccessSchedule
}

func (o *GetContractContractsResponseCommits) GetInvoiceSchedule() *GetContractContractsResponseInvoiceSchedule {
	if o == nil {
		return nil
	}
	return o.InvoiceSchedule
}

func (o *GetContractContractsResponseCommits) GetInvoiceContract() *GetContractContractsResponseInvoiceContract {
	if o == nil {
		return nil
	}
	return o.InvoiceContract
}

func (o *GetContractContractsResponseCommits) GetRolledOverFrom() *GetContractContractsResponseRolledOverFrom {
	if o == nil {
		return nil
	}
	return o.RolledOverFrom
}

func (o *GetContractContractsResponseCommits) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetContractContractsResponseCommits) GetRolloverFraction() *float64 {
	if o == nil {
		return nil
	}
	return o.RolloverFraction
}

func (o *GetContractContractsResponseCommits) GetApplicableProductIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductIds
}

func (o *GetContractContractsResponseCommits) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *GetContractContractsResponseCommits) GetApplicableContractIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableContractIds
}

func (o *GetContractContractsResponseCommits) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *GetContractContractsResponseCommits) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *GetContractContractsResponseCommits) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *GetContractContractsResponseCommits) GetLedger() []GetContractContractsResponse200ApplicationJSONResponseBodyLedger {
	if o == nil {
		return nil
	}
	return o.Ledger
}

func (o *GetContractContractsResponseCommits) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type GetContractContract struct {
	ID string `json:"id"`
}

func (o *GetContractContract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsType string

const (
	GetContractContractsTypeCredit GetContractContractsType = "CREDIT"
)

func (e GetContractContractsType) ToPointer() *GetContractContractsType {
	return &e
}
func (e *GetContractContractsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT":
		*e = GetContractContractsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractContractsType: %v", v)
	}
}

type GetContractProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *GetContractProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsScheduleItems struct {
	ID           string    `json:"id"`
	Amount       float64   `json:"amount"`
	StartingAt   time.Time `json:"starting_at"`
	EndingBefore time.Time `json:"ending_before"`
}

func (g GetContractContractsScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractContractsScheduleItems) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *GetContractContractsScheduleItems) GetEndingBefore() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndingBefore
}

// GetContractAccessSchedule - The schedule that the customer will gain access to the credits.
type GetContractAccessSchedule struct {
	CreditType    *GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsCreditType `json:"credit_type,omitempty"`
	ScheduleItems []GetContractContractsScheduleItems                                                     `json:"schedule_items"`
}

func (o *GetContractAccessSchedule) GetCreditType() *GetContractContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *GetContractAccessSchedule) GetScheduleItems() []GetContractContractsScheduleItems {
	if o == nil {
		return []GetContractContractsScheduleItems{}
	}
	return o.ScheduleItems
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits6Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits6TypeCreditManual GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits6Type = "CREDIT_MANUAL"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits6Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits6Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_MANUAL":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits6Type: %v", v)
	}
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBody6 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits6Type `json:"type"`
	Timestamp time.Time                                                                               `json:"timestamp"`
	Amount    float64                                                                                 `json:"amount"`
	Reason    string                                                                                  `json:"reason"`
}

func (g GetContractLedgerContractsResponse200ApplicationJSONResponseBody6) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse200ApplicationJSONResponseBody6) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody6) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits6Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits6Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody6) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody6) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody6) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits5Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits5TypeCreditCredited GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits5Type = "CREDIT_CREDITED"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits5Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits5Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_CREDITED":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits5Type: %v", v)
	}
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBody5 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits5Type `json:"type"`
	Timestamp time.Time                                                                               `json:"timestamp"`
	Amount    float64                                                                                 `json:"amount"`
	SegmentID string                                                                                  `json:"segment_id"`
	InvoiceID string                                                                                  `json:"invoice_id"`
}

func (g GetContractLedgerContractsResponse200ApplicationJSONResponseBody5) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse200ApplicationJSONResponseBody5) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody5) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits5Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits5Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody5) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody5) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody5) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody5) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits4Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits4TypeCreditCanceled GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits4Type = "CREDIT_CANCELED"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits4Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits4Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_CANCELED":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits4Type: %v", v)
	}
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBody4 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits4Type `json:"type"`
	Timestamp time.Time                                                                               `json:"timestamp"`
	Amount    float64                                                                                 `json:"amount"`
	SegmentID string                                                                                  `json:"segment_id"`
	InvoiceID string                                                                                  `json:"invoice_id"`
}

func (g GetContractLedgerContractsResponse200ApplicationJSONResponseBody4) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse200ApplicationJSONResponseBody4) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody4) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits4Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits4Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody4) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody4) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody4) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody4) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits3Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits3TypeCreditExpiration GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits3Type = "CREDIT_EXPIRATION"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits3Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits3Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_EXPIRATION":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits3Type: %v", v)
	}
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBody3 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits3Type `json:"type"`
	Timestamp time.Time                                                                               `json:"timestamp"`
	Amount    float64                                                                                 `json:"amount"`
	SegmentID string                                                                                  `json:"segment_id"`
}

func (g GetContractLedgerContractsResponse200ApplicationJSONResponseBody3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse200ApplicationJSONResponseBody3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody3) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits3Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits3Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody3) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody3) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody3) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits2Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits2TypeCreditAutomatedInvoiceDeduction GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits2Type = "CREDIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits2Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits2Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits2Type: %v", v)
	}
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBody2 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits2Type `json:"type"`
	Timestamp time.Time                                                                               `json:"timestamp"`
	Amount    float64                                                                                 `json:"amount"`
	SegmentID string                                                                                  `json:"segment_id"`
	InvoiceID string                                                                                  `json:"invoice_id"`
}

func (g GetContractLedgerContractsResponse200ApplicationJSONResponseBody2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse200ApplicationJSONResponseBody2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody2) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits2Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits2Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody2) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody2) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody2) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody2) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsType string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsTypeCreditSegmentStart GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsType = "CREDIT_SEGMENT_START"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsType) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsType {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_SEGMENT_START":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsType: %v", v)
	}
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBody1 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsType `json:"type"`
	Timestamp time.Time                                                                              `json:"timestamp"`
	Amount    float64                                                                                `json:"amount"`
	SegmentID string                                                                                 `json:"segment_id"`
}

func (g GetContractLedgerContractsResponse200ApplicationJSONResponseBody1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse200ApplicationJSONResponseBody1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody1) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsType {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsType("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody1) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody1) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse200ApplicationJSONResponseBody1) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type GetContractLedgerUnionType string

const (
	GetContractLedgerUnionTypeGetContractLedgerContractsResponse200ApplicationJSONResponseBody1 GetContractLedgerUnionType = "getContract_ledger_Contracts_response_200_ApplicationJSON_responseBody_1"
	GetContractLedgerUnionTypeGetContractLedgerContractsResponse200ApplicationJSONResponseBody2 GetContractLedgerUnionType = "getContract_ledger_Contracts_response_200_ApplicationJSON_responseBody_2"
	GetContractLedgerUnionTypeGetContractLedgerContractsResponse200ApplicationJSONResponseBody3 GetContractLedgerUnionType = "getContract_ledger_Contracts_response_200_ApplicationJSON_responseBody_3"
	GetContractLedgerUnionTypeGetContractLedgerContractsResponse200ApplicationJSONResponseBody4 GetContractLedgerUnionType = "getContract_ledger_Contracts_response_200_ApplicationJSON_responseBody_4"
	GetContractLedgerUnionTypeGetContractLedgerContractsResponse200ApplicationJSONResponseBody5 GetContractLedgerUnionType = "getContract_ledger_Contracts_response_200_ApplicationJSON_responseBody_5"
	GetContractLedgerUnionTypeGetContractLedgerContractsResponse200ApplicationJSONResponseBody6 GetContractLedgerUnionType = "getContract_ledger_Contracts_response_200_ApplicationJSON_responseBody_6"
)

type GetContractLedger struct {
	GetContractLedgerContractsResponse200ApplicationJSONResponseBody1 *GetContractLedgerContractsResponse200ApplicationJSONResponseBody1
	GetContractLedgerContractsResponse200ApplicationJSONResponseBody2 *GetContractLedgerContractsResponse200ApplicationJSONResponseBody2
	GetContractLedgerContractsResponse200ApplicationJSONResponseBody3 *GetContractLedgerContractsResponse200ApplicationJSONResponseBody3
	GetContractLedgerContractsResponse200ApplicationJSONResponseBody4 *GetContractLedgerContractsResponse200ApplicationJSONResponseBody4
	GetContractLedgerContractsResponse200ApplicationJSONResponseBody5 *GetContractLedgerContractsResponse200ApplicationJSONResponseBody5
	GetContractLedgerContractsResponse200ApplicationJSONResponseBody6 *GetContractLedgerContractsResponse200ApplicationJSONResponseBody6

	Type GetContractLedgerUnionType
}

func CreateGetContractLedgerGetContractLedgerContractsResponse200ApplicationJSONResponseBody1(getContractLedgerContractsResponse200ApplicationJSONResponseBody1 GetContractLedgerContractsResponse200ApplicationJSONResponseBody1) GetContractLedger {
	typ := GetContractLedgerUnionTypeGetContractLedgerContractsResponse200ApplicationJSONResponseBody1

	return GetContractLedger{
		GetContractLedgerContractsResponse200ApplicationJSONResponseBody1: &getContractLedgerContractsResponse200ApplicationJSONResponseBody1,
		Type: typ,
	}
}

func CreateGetContractLedgerGetContractLedgerContractsResponse200ApplicationJSONResponseBody2(getContractLedgerContractsResponse200ApplicationJSONResponseBody2 GetContractLedgerContractsResponse200ApplicationJSONResponseBody2) GetContractLedger {
	typ := GetContractLedgerUnionTypeGetContractLedgerContractsResponse200ApplicationJSONResponseBody2

	return GetContractLedger{
		GetContractLedgerContractsResponse200ApplicationJSONResponseBody2: &getContractLedgerContractsResponse200ApplicationJSONResponseBody2,
		Type: typ,
	}
}

func CreateGetContractLedgerGetContractLedgerContractsResponse200ApplicationJSONResponseBody3(getContractLedgerContractsResponse200ApplicationJSONResponseBody3 GetContractLedgerContractsResponse200ApplicationJSONResponseBody3) GetContractLedger {
	typ := GetContractLedgerUnionTypeGetContractLedgerContractsResponse200ApplicationJSONResponseBody3

	return GetContractLedger{
		GetContractLedgerContractsResponse200ApplicationJSONResponseBody3: &getContractLedgerContractsResponse200ApplicationJSONResponseBody3,
		Type: typ,
	}
}

func CreateGetContractLedgerGetContractLedgerContractsResponse200ApplicationJSONResponseBody4(getContractLedgerContractsResponse200ApplicationJSONResponseBody4 GetContractLedgerContractsResponse200ApplicationJSONResponseBody4) GetContractLedger {
	typ := GetContractLedgerUnionTypeGetContractLedgerContractsResponse200ApplicationJSONResponseBody4

	return GetContractLedger{
		GetContractLedgerContractsResponse200ApplicationJSONResponseBody4: &getContractLedgerContractsResponse200ApplicationJSONResponseBody4,
		Type: typ,
	}
}

func CreateGetContractLedgerGetContractLedgerContractsResponse200ApplicationJSONResponseBody5(getContractLedgerContractsResponse200ApplicationJSONResponseBody5 GetContractLedgerContractsResponse200ApplicationJSONResponseBody5) GetContractLedger {
	typ := GetContractLedgerUnionTypeGetContractLedgerContractsResponse200ApplicationJSONResponseBody5

	return GetContractLedger{
		GetContractLedgerContractsResponse200ApplicationJSONResponseBody5: &getContractLedgerContractsResponse200ApplicationJSONResponseBody5,
		Type: typ,
	}
}

func CreateGetContractLedgerGetContractLedgerContractsResponse200ApplicationJSONResponseBody6(getContractLedgerContractsResponse200ApplicationJSONResponseBody6 GetContractLedgerContractsResponse200ApplicationJSONResponseBody6) GetContractLedger {
	typ := GetContractLedgerUnionTypeGetContractLedgerContractsResponse200ApplicationJSONResponseBody6

	return GetContractLedger{
		GetContractLedgerContractsResponse200ApplicationJSONResponseBody6: &getContractLedgerContractsResponse200ApplicationJSONResponseBody6,
		Type: typ,
	}
}

func (u *GetContractLedger) UnmarshalJSON(data []byte) error {

	var getContractLedgerContractsResponse200ApplicationJSONResponseBody1 GetContractLedgerContractsResponse200ApplicationJSONResponseBody1 = GetContractLedgerContractsResponse200ApplicationJSONResponseBody1{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse200ApplicationJSONResponseBody1, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse200ApplicationJSONResponseBody1 = &getContractLedgerContractsResponse200ApplicationJSONResponseBody1
		u.Type = GetContractLedgerUnionTypeGetContractLedgerContractsResponse200ApplicationJSONResponseBody1
		return nil
	}

	var getContractLedgerContractsResponse200ApplicationJSONResponseBody3 GetContractLedgerContractsResponse200ApplicationJSONResponseBody3 = GetContractLedgerContractsResponse200ApplicationJSONResponseBody3{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse200ApplicationJSONResponseBody3, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse200ApplicationJSONResponseBody3 = &getContractLedgerContractsResponse200ApplicationJSONResponseBody3
		u.Type = GetContractLedgerUnionTypeGetContractLedgerContractsResponse200ApplicationJSONResponseBody3
		return nil
	}

	var getContractLedgerContractsResponse200ApplicationJSONResponseBody6 GetContractLedgerContractsResponse200ApplicationJSONResponseBody6 = GetContractLedgerContractsResponse200ApplicationJSONResponseBody6{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse200ApplicationJSONResponseBody6, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse200ApplicationJSONResponseBody6 = &getContractLedgerContractsResponse200ApplicationJSONResponseBody6
		u.Type = GetContractLedgerUnionTypeGetContractLedgerContractsResponse200ApplicationJSONResponseBody6
		return nil
	}

	var getContractLedgerContractsResponse200ApplicationJSONResponseBody2 GetContractLedgerContractsResponse200ApplicationJSONResponseBody2 = GetContractLedgerContractsResponse200ApplicationJSONResponseBody2{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse200ApplicationJSONResponseBody2, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse200ApplicationJSONResponseBody2 = &getContractLedgerContractsResponse200ApplicationJSONResponseBody2
		u.Type = GetContractLedgerUnionTypeGetContractLedgerContractsResponse200ApplicationJSONResponseBody2
		return nil
	}

	var getContractLedgerContractsResponse200ApplicationJSONResponseBody4 GetContractLedgerContractsResponse200ApplicationJSONResponseBody4 = GetContractLedgerContractsResponse200ApplicationJSONResponseBody4{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse200ApplicationJSONResponseBody4, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse200ApplicationJSONResponseBody4 = &getContractLedgerContractsResponse200ApplicationJSONResponseBody4
		u.Type = GetContractLedgerUnionTypeGetContractLedgerContractsResponse200ApplicationJSONResponseBody4
		return nil
	}

	var getContractLedgerContractsResponse200ApplicationJSONResponseBody5 GetContractLedgerContractsResponse200ApplicationJSONResponseBody5 = GetContractLedgerContractsResponse200ApplicationJSONResponseBody5{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse200ApplicationJSONResponseBody5, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse200ApplicationJSONResponseBody5 = &getContractLedgerContractsResponse200ApplicationJSONResponseBody5
		u.Type = GetContractLedgerUnionTypeGetContractLedgerContractsResponse200ApplicationJSONResponseBody5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetContractLedger", string(data))
}

func (u GetContractLedger) MarshalJSON() ([]byte, error) {
	if u.GetContractLedgerContractsResponse200ApplicationJSONResponseBody1 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse200ApplicationJSONResponseBody1, "", true)
	}

	if u.GetContractLedgerContractsResponse200ApplicationJSONResponseBody2 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse200ApplicationJSONResponseBody2, "", true)
	}

	if u.GetContractLedgerContractsResponse200ApplicationJSONResponseBody3 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse200ApplicationJSONResponseBody3, "", true)
	}

	if u.GetContractLedgerContractsResponse200ApplicationJSONResponseBody4 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse200ApplicationJSONResponseBody4, "", true)
	}

	if u.GetContractLedgerContractsResponse200ApplicationJSONResponseBody5 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse200ApplicationJSONResponseBody5, "", true)
	}

	if u.GetContractLedgerContractsResponse200ApplicationJSONResponseBody6 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse200ApplicationJSONResponseBody6, "", true)
	}

	return nil, errors.New("could not marshal union type GetContractLedger: all fields are null")
}

type GetContractContractsResponseCredits struct {
	ID       string                   `json:"id"`
	Contract *GetContractContract     `json:"contract,omitempty"`
	Type     GetContractContractsType `json:"type"`
	Name     *string                  `json:"name,omitempty"`
	// If multiple credits or commits are applicable, the one with the lower priority will apply first.
	Priority *float64           `json:"priority,omitempty"`
	Product  GetContractProduct `json:"product"`
	// The schedule that the customer will gain access to the credits.
	AccessSchedule        *GetContractAccessSchedule `json:"access_schedule,omitempty"`
	Description           *string                    `json:"description,omitempty"`
	ApplicableProductIds  []string                   `json:"applicable_product_ids,omitempty"`
	ApplicableProductTags []string                   `json:"applicable_product_tags,omitempty"`
	ApplicableContractIds []string                   `json:"applicable_contract_ids,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string `json:"salesforce_opportunity_id,omitempty"`
	// A list of ordered events that impact the balance of a credit. For example, an invoice deduction or an expiration.
	Ledger       []GetContractLedger `json:"ledger,omitempty"`
	CustomFields map[string]string   `json:"custom_fields,omitempty"`
}

func (o *GetContractContractsResponseCredits) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponseCredits) GetContract() *GetContractContract {
	if o == nil {
		return nil
	}
	return o.Contract
}

func (o *GetContractContractsResponseCredits) GetType() GetContractContractsType {
	if o == nil {
		return GetContractContractsType("")
	}
	return o.Type
}

func (o *GetContractContractsResponseCredits) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetContractContractsResponseCredits) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *GetContractContractsResponseCredits) GetProduct() GetContractProduct {
	if o == nil {
		return GetContractProduct{}
	}
	return o.Product
}

func (o *GetContractContractsResponseCredits) GetAccessSchedule() *GetContractAccessSchedule {
	if o == nil {
		return nil
	}
	return o.AccessSchedule
}

func (o *GetContractContractsResponseCredits) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetContractContractsResponseCredits) GetApplicableProductIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductIds
}

func (o *GetContractContractsResponseCredits) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *GetContractContractsResponseCredits) GetApplicableContractIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableContractIds
}

func (o *GetContractContractsResponseCredits) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *GetContractContractsResponseCredits) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *GetContractContractsResponseCredits) GetLedger() []GetContractLedger {
	if o == nil {
		return nil
	}
	return o.Ledger
}

func (o *GetContractContractsResponseCredits) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type GetContractContractsProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *GetContractContractsProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type GetContractContractsResponseOverrideSpecifiers struct {
	ProductID               *string           `json:"product_id,omitempty"`
	ProductTags             []string          `json:"product_tags,omitempty"`
	PricingGroupValues      map[string]string `json:"pricing_group_values,omitempty"`
	PresentationGroupValues map[string]string `json:"presentation_group_values,omitempty"`
}

func (o *GetContractContractsResponseOverrideSpecifiers) GetProductID() *string {
	if o == nil {
		return nil
	}
	return o.ProductID
}

func (o *GetContractContractsResponseOverrideSpecifiers) GetProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ProductTags
}

func (o *GetContractContractsResponseOverrideSpecifiers) GetPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PricingGroupValues
}

func (o *GetContractContractsResponseOverrideSpecifiers) GetPresentationGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PresentationGroupValues
}

type GetContractContractsResponseType string

const (
	GetContractContractsResponseTypeOverwrite  GetContractContractsResponseType = "OVERWRITE"
	GetContractContractsResponseTypeMultiplier GetContractContractsResponseType = "MULTIPLIER"
	GetContractContractsResponseTypeTiered     GetContractContractsResponseType = "TIERED"
)

func (e GetContractContractsResponseType) ToPointer() *GetContractContractsResponseType {
	return &e
}
func (e *GetContractContractsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OVERWRITE":
		fallthrough
	case "MULTIPLIER":
		fallthrough
	case "TIERED":
		*e = GetContractContractsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractContractsResponseType: %v", v)
	}
}

type GetContractContractsResponse200RateType string

const (
	GetContractContractsResponse200RateTypeFlatUpper         GetContractContractsResponse200RateType = "FLAT"
	GetContractContractsResponse200RateTypeFlatLower         GetContractContractsResponse200RateType = "flat"
	GetContractContractsResponse200RateTypePercentageUpper   GetContractContractsResponse200RateType = "PERCENTAGE"
	GetContractContractsResponse200RateTypePercentageLower   GetContractContractsResponse200RateType = "percentage"
	GetContractContractsResponse200RateTypeSubscriptionUpper GetContractContractsResponse200RateType = "SUBSCRIPTION"
	GetContractContractsResponse200RateTypeSubscriptionLower GetContractContractsResponse200RateType = "subscription"
	GetContractContractsResponse200RateTypeTieredUpper       GetContractContractsResponse200RateType = "TIERED"
	GetContractContractsResponse200RateTypeTieredLower       GetContractContractsResponse200RateType = "tiered"
	GetContractContractsResponse200RateTypeCustomUpper       GetContractContractsResponse200RateType = "CUSTOM"
	GetContractContractsResponse200RateTypeCustomLower       GetContractContractsResponse200RateType = "custom"
)

func (e GetContractContractsResponse200RateType) ToPointer() *GetContractContractsResponse200RateType {
	return &e
}
func (e *GetContractContractsResponse200RateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FLAT":
		fallthrough
	case "flat":
		fallthrough
	case "PERCENTAGE":
		fallthrough
	case "percentage":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "subscription":
		fallthrough
	case "TIERED":
		fallthrough
	case "tiered":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "custom":
		*e = GetContractContractsResponse200RateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractContractsResponse200RateType: %v", v)
	}
}

type GetContractContractsResponse200Tiers struct {
	Size  *float64 `json:"size,omitempty"`
	Price float64  `json:"price"`
}

func (o *GetContractContractsResponse200Tiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *GetContractContractsResponse200Tiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type GetContractContractsResponse200CreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractContractsResponse200CreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractContractsResponse200CreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsResponseOverwriteRate struct {
	RateType GetContractContractsResponse200RateType `json:"rate_type"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price *float64 `json:"price,omitempty"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity *float64 `json:"quantity,omitempty"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type.
	IsProrated *bool `json:"is_prorated,omitempty"`
	// Only set for TIERED rate_type.
	Tiers []GetContractContractsResponse200Tiers `json:"tiers,omitempty"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate processors.
	CustomRate map[string]any                             `json:"custom_rate,omitempty"`
	CreditType *GetContractContractsResponse200CreditType `json:"credit_type,omitempty"`
}

func (o *GetContractContractsResponseOverwriteRate) GetRateType() GetContractContractsResponse200RateType {
	if o == nil {
		return GetContractContractsResponse200RateType("")
	}
	return o.RateType
}

func (o *GetContractContractsResponseOverwriteRate) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *GetContractContractsResponseOverwriteRate) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *GetContractContractsResponseOverwriteRate) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *GetContractContractsResponseOverwriteRate) GetTiers() []GetContractContractsResponse200Tiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *GetContractContractsResponseOverwriteRate) GetCustomRate() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomRate
}

func (o *GetContractContractsResponseOverwriteRate) GetCreditType() *GetContractContractsResponse200CreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

type OverrideTiers struct {
	Size       *float64 `json:"size,omitempty"`
	Multiplier float64  `json:"multiplier"`
}

func (o *OverrideTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *OverrideTiers) GetMultiplier() float64 {
	if o == nil {
		return 0.0
	}
	return o.Multiplier
}

type GetContractRateType string

const (
	GetContractRateTypeFlatUpper         GetContractRateType = "FLAT"
	GetContractRateTypeFlatLower         GetContractRateType = "flat"
	GetContractRateTypePercentageUpper   GetContractRateType = "PERCENTAGE"
	GetContractRateTypePercentageLower   GetContractRateType = "percentage"
	GetContractRateTypeSubscriptionUpper GetContractRateType = "SUBSCRIPTION"
	GetContractRateTypeSubscriptionLower GetContractRateType = "subscription"
	GetContractRateTypeTieredUpper       GetContractRateType = "TIERED"
	GetContractRateTypeTieredLower       GetContractRateType = "tiered"
	GetContractRateTypeCustomUpper       GetContractRateType = "CUSTOM"
	GetContractRateTypeCustomLower       GetContractRateType = "custom"
)

func (e GetContractRateType) ToPointer() *GetContractRateType {
	return &e
}
func (e *GetContractRateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FLAT":
		fallthrough
	case "flat":
		fallthrough
	case "PERCENTAGE":
		fallthrough
	case "percentage":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "subscription":
		fallthrough
	case "TIERED":
		fallthrough
	case "tiered":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "custom":
		*e = GetContractRateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractRateType: %v", v)
	}
}

type GetContractTiers struct {
	Size  *float64 `json:"size,omitempty"`
	Price float64  `json:"price"`
}

func (o *GetContractTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *GetContractTiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type GetContractCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsResponseOverrides struct {
	ID                    string                                           `json:"id"`
	Product               *GetContractContractsProduct                     `json:"product,omitempty"`
	ApplicableProductTags []string                                         `json:"applicable_product_tags,omitempty"`
	OverrideSpecifiers    []GetContractContractsResponseOverrideSpecifiers `json:"override_specifiers,omitempty"`
	StartingAt            time.Time                                        `json:"starting_at"`
	EndingBefore          *time.Time                                       `json:"ending_before,omitempty"`
	Entitled              *bool                                            `json:"entitled,omitempty"`
	Type                  *GetContractContractsResponseType                `json:"type,omitempty"`
	Priority              *float64                                         `json:"priority,omitempty"`
	Multiplier            *float64                                         `json:"multiplier,omitempty"`
	OverwriteRate         *GetContractContractsResponseOverwriteRate       `json:"overwrite_rate,omitempty"`
	OverrideTiers         []OverrideTiers                                  `json:"override_tiers,omitempty"`
	RateType              *GetContractRateType                             `json:"rate_type,omitempty"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price *float64 `json:"price,omitempty"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity *float64 `json:"quantity,omitempty"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type.
	IsProrated *bool `json:"is_prorated,omitempty"`
	// Only set for TIERED rate_type.
	Tiers []GetContractTiers `json:"tiers,omitempty"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate processors.
	Value      map[string]any         `json:"value,omitempty"`
	CreditType *GetContractCreditType `json:"credit_type,omitempty"`
}

func (g GetContractContractsResponseOverrides) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsResponseOverrides) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsResponseOverrides) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponseOverrides) GetProduct() *GetContractContractsProduct {
	if o == nil {
		return nil
	}
	return o.Product
}

func (o *GetContractContractsResponseOverrides) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *GetContractContractsResponseOverrides) GetOverrideSpecifiers() []GetContractContractsResponseOverrideSpecifiers {
	if o == nil {
		return nil
	}
	return o.OverrideSpecifiers
}

func (o *GetContractContractsResponseOverrides) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *GetContractContractsResponseOverrides) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *GetContractContractsResponseOverrides) GetEntitled() *bool {
	if o == nil {
		return nil
	}
	return o.Entitled
}

func (o *GetContractContractsResponseOverrides) GetType() *GetContractContractsResponseType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetContractContractsResponseOverrides) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *GetContractContractsResponseOverrides) GetMultiplier() *float64 {
	if o == nil {
		return nil
	}
	return o.Multiplier
}

func (o *GetContractContractsResponseOverrides) GetOverwriteRate() *GetContractContractsResponseOverwriteRate {
	if o == nil {
		return nil
	}
	return o.OverwriteRate
}

func (o *GetContractContractsResponseOverrides) GetOverrideTiers() []OverrideTiers {
	if o == nil {
		return nil
	}
	return o.OverrideTiers
}

func (o *GetContractContractsResponseOverrides) GetRateType() *GetContractRateType {
	if o == nil {
		return nil
	}
	return o.RateType
}

func (o *GetContractContractsResponseOverrides) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *GetContractContractsResponseOverrides) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *GetContractContractsResponseOverrides) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *GetContractContractsResponseOverrides) GetTiers() []GetContractTiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *GetContractContractsResponseOverrides) GetValue() map[string]any {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *GetContractContractsResponseOverrides) GetCreditType() *GetContractCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

type GetContractContractsResponseProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *GetContractContractsResponseProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponseProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type GetContractContractsResponse200ApplicationJSONResponseBodyCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsResponseScheduleItems struct {
	ID        string    `json:"id"`
	InvoiceID string    `json:"invoice_id"`
	Amount    float64   `json:"amount"`
	UnitPrice float64   `json:"unit_price"`
	Quantity  float64   `json:"quantity"`
	Timestamp time.Time `json:"timestamp"`
}

func (g GetContractContractsResponseScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsResponseScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsResponseScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponseScheduleItems) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *GetContractContractsResponseScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractContractsResponseScheduleItems) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *GetContractContractsResponseScheduleItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *GetContractContractsResponseScheduleItems) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

type GetContractContractsResponse200ApplicationJSONResponseBodySchedule struct {
	CreditType    *GetContractContractsResponse200ApplicationJSONResponseBodyCreditType `json:"credit_type,omitempty"`
	ScheduleItems []GetContractContractsResponseScheduleItems                           `json:"schedule_items,omitempty"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodySchedule) GetCreditType() *GetContractContractsResponse200ApplicationJSONResponseBodyCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodySchedule) GetScheduleItems() []GetContractContractsResponseScheduleItems {
	if o == nil {
		return nil
	}
	return o.ScheduleItems
}

type GetContractContractsResponseDiscounts struct {
	ID       string                                                             `json:"id"`
	Product  GetContractContractsResponseProduct                                `json:"product"`
	Schedule GetContractContractsResponse200ApplicationJSONResponseBodySchedule `json:"schedule"`
	Name     *string                                                            `json:"name,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
}

func (o *GetContractContractsResponseDiscounts) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponseDiscounts) GetProduct() GetContractContractsResponseProduct {
	if o == nil {
		return GetContractContractsResponseProduct{}
	}
	return o.Product
}

func (o *GetContractContractsResponseDiscounts) GetSchedule() GetContractContractsResponse200ApplicationJSONResponseBodySchedule {
	if o == nil {
		return GetContractContractsResponse200ApplicationJSONResponseBodySchedule{}
	}
	return o.Schedule
}

func (o *GetContractContractsResponseDiscounts) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetContractContractsResponseDiscounts) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

type GetContractContractsResponseProfessionalServices struct {
	ID          string  `json:"id"`
	Description *string `json:"description,omitempty"`
	ProductID   string  `json:"product_id"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// Unit price for the charge. Will be multiplied by quantity to determine the amount and must be specified.
	UnitPrice float64 `json:"unit_price"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the amount.
	Quantity float64 `json:"quantity"`
	// Maximum amount for the term.
	MaxAmount    float64           `json:"max_amount"`
	CustomFields map[string]string `json:"custom_fields,omitempty"`
}

func (o *GetContractContractsResponseProfessionalServices) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponseProfessionalServices) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetContractContractsResponseProfessionalServices) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *GetContractContractsResponseProfessionalServices) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *GetContractContractsResponseProfessionalServices) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *GetContractContractsResponseProfessionalServices) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *GetContractContractsResponseProfessionalServices) GetMaxAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.MaxAmount
}

func (o *GetContractContractsResponseProfessionalServices) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type GetContractContractsResponse200Product struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *GetContractContractsResponse200Product) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200Product) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsResponse200ScheduleItems struct {
	ID        string    `json:"id"`
	InvoiceID string    `json:"invoice_id"`
	Amount    float64   `json:"amount"`
	UnitPrice float64   `json:"unit_price"`
	Quantity  float64   `json:"quantity"`
	Timestamp time.Time `json:"timestamp"`
}

func (g GetContractContractsResponse200ScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsResponse200ScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsResponse200ScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ScheduleItems) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *GetContractContractsResponse200ScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractContractsResponse200ScheduleItems) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *GetContractContractsResponse200ScheduleItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *GetContractContractsResponse200ScheduleItems) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

type GetContractSchedule struct {
	CreditType    *GetContractContractsResponse200ApplicationJSONResponseBodyDataCreditType `json:"credit_type,omitempty"`
	ScheduleItems []GetContractContractsResponse200ScheduleItems                            `json:"schedule_items,omitempty"`
}

func (o *GetContractSchedule) GetCreditType() *GetContractContractsResponse200ApplicationJSONResponseBodyDataCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *GetContractSchedule) GetScheduleItems() []GetContractContractsResponse200ScheduleItems {
	if o == nil {
		return nil
	}
	return o.ScheduleItems
}

type GetContractContractsResponseScheduledCharges struct {
	ID       string                                 `json:"id"`
	Product  GetContractContractsResponse200Product `json:"product"`
	Schedule GetContractSchedule                    `json:"schedule"`
	// displayed on invoices
	Name *string `json:"name,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string           `json:"netsuite_sales_order_id,omitempty"`
	CustomFields         map[string]string `json:"custom_fields,omitempty"`
}

func (o *GetContractContractsResponseScheduledCharges) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponseScheduledCharges) GetProduct() GetContractContractsResponse200Product {
	if o == nil {
		return GetContractContractsResponse200Product{}
	}
	return o.Product
}

func (o *GetContractContractsResponseScheduledCharges) GetSchedule() GetContractSchedule {
	if o == nil {
		return GetContractSchedule{}
	}
	return o.Schedule
}

func (o *GetContractContractsResponseScheduledCharges) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetContractContractsResponseScheduledCharges) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *GetContractContractsResponseScheduledCharges) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type GetContractContractsResponse200Type string

const (
	GetContractContractsResponse200TypeSupersede GetContractContractsResponse200Type = "SUPERSEDE"
	GetContractContractsResponse200TypeRenewal   GetContractContractsResponse200Type = "RENEWAL"
)

func (e GetContractContractsResponse200Type) ToPointer() *GetContractContractsResponse200Type {
	return &e
}
func (e *GetContractContractsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SUPERSEDE":
		fallthrough
	case "RENEWAL":
		*e = GetContractContractsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractContractsResponse200Type: %v", v)
	}
}

type Transitions struct {
	Type           GetContractContractsResponse200Type `json:"type"`
	FromContractID string                              `json:"from_contract_id"`
	ToContractID   string                              `json:"to_contract_id"`
}

func (o *Transitions) GetType() GetContractContractsResponse200Type {
	if o == nil {
		return GetContractContractsResponse200Type("")
	}
	return o.Type
}

func (o *Transitions) GetFromContractID() string {
	if o == nil {
		return ""
	}
	return o.FromContractID
}

func (o *Transitions) GetToContractID() string {
	if o == nil {
		return ""
	}
	return o.ToContractID
}

type GetContractContractsResponseResellerType string

const (
	GetContractContractsResponseResellerTypeAws           GetContractContractsResponseResellerType = "AWS"
	GetContractContractsResponseResellerTypeAwsProService GetContractContractsResponseResellerType = "AWS_PRO_SERVICE"
	GetContractContractsResponseResellerTypeGcp           GetContractContractsResponseResellerType = "GCP"
	GetContractContractsResponseResellerTypeGcpProService GetContractContractsResponseResellerType = "GCP_PRO_SERVICE"
)

func (e GetContractContractsResponseResellerType) ToPointer() *GetContractContractsResponseResellerType {
	return &e
}
func (e *GetContractContractsResponseResellerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWS":
		fallthrough
	case "AWS_PRO_SERVICE":
		fallthrough
	case "GCP":
		fallthrough
	case "GCP_PRO_SERVICE":
		*e = GetContractContractsResponseResellerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractContractsResponseResellerType: %v", v)
	}
}

type GetContractContractsResponseResellerRoyalties struct {
	ResellerType          GetContractContractsResponseResellerType `json:"reseller_type"`
	Fraction              float64                                  `json:"fraction"`
	ApplicableProductTags []string                                 `json:"applicable_product_tags,omitempty"`
	ApplicableProductIds  []string                                 `json:"applicable_product_ids,omitempty"`
	NetsuiteResellerID    string                                   `json:"netsuite_reseller_id"`
	StartingAt            time.Time                                `json:"starting_at"`
	EndingBefore          *time.Time                               `json:"ending_before,omitempty"`
	ResellerContractValue *float64                                 `json:"reseller_contract_value,omitempty"`
	AwsAccountNumber      *string                                  `json:"aws_account_number,omitempty"`
	AwsPayerReferenceID   *string                                  `json:"aws_payer_reference_id,omitempty"`
	AwsOfferID            *string                                  `json:"aws_offer_id,omitempty"`
	GcpAccountID          *string                                  `json:"gcp_account_id,omitempty"`
	GcpOfferID            *string                                  `json:"gcp_offer_id,omitempty"`
}

func (g GetContractContractsResponseResellerRoyalties) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsResponseResellerRoyalties) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsResponseResellerRoyalties) GetResellerType() GetContractContractsResponseResellerType {
	if o == nil {
		return GetContractContractsResponseResellerType("")
	}
	return o.ResellerType
}

func (o *GetContractContractsResponseResellerRoyalties) GetFraction() float64 {
	if o == nil {
		return 0.0
	}
	return o.Fraction
}

func (o *GetContractContractsResponseResellerRoyalties) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *GetContractContractsResponseResellerRoyalties) GetApplicableProductIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductIds
}

func (o *GetContractContractsResponseResellerRoyalties) GetNetsuiteResellerID() string {
	if o == nil {
		return ""
	}
	return o.NetsuiteResellerID
}

func (o *GetContractContractsResponseResellerRoyalties) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *GetContractContractsResponseResellerRoyalties) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *GetContractContractsResponseResellerRoyalties) GetResellerContractValue() *float64 {
	if o == nil {
		return nil
	}
	return o.ResellerContractValue
}

func (o *GetContractContractsResponseResellerRoyalties) GetAwsAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.AwsAccountNumber
}

func (o *GetContractContractsResponseResellerRoyalties) GetAwsPayerReferenceID() *string {
	if o == nil {
		return nil
	}
	return o.AwsPayerReferenceID
}

func (o *GetContractContractsResponseResellerRoyalties) GetAwsOfferID() *string {
	if o == nil {
		return nil
	}
	return o.AwsOfferID
}

func (o *GetContractContractsResponseResellerRoyalties) GetGcpAccountID() *string {
	if o == nil {
		return nil
	}
	return o.GcpAccountID
}

func (o *GetContractContractsResponseResellerRoyalties) GetGcpOfferID() *string {
	if o == nil {
		return nil
	}
	return o.GcpOfferID
}

type GetContractContractsInitial struct {
	GroupKey    string     `json:"group_key"`
	GroupValues []string   `json:"group_values"`
	StartingAt  *time.Time `json:"starting_at,omitempty"`
}

func (g GetContractContractsInitial) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsInitial) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsInitial) GetGroupKey() string {
	if o == nil {
		return ""
	}
	return o.GroupKey
}

func (o *GetContractContractsInitial) GetGroupValues() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupValues
}

func (o *GetContractContractsInitial) GetStartingAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartingAt
}

type GetContractContractsResponseCurrent struct {
	GroupKey    string     `json:"group_key"`
	GroupValues []string   `json:"group_values"`
	StartingAt  *time.Time `json:"starting_at,omitempty"`
}

func (g GetContractContractsResponseCurrent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsResponseCurrent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsResponseCurrent) GetGroupKey() string {
	if o == nil {
		return ""
	}
	return o.GroupKey
}

func (o *GetContractContractsResponseCurrent) GetGroupValues() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupValues
}

func (o *GetContractContractsResponseCurrent) GetStartingAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartingAt
}

type GetContractUpdates struct {
	GroupKey    string    `json:"group_key"`
	GroupValues []string  `json:"group_values"`
	StartingAt  time.Time `json:"starting_at"`
}

func (g GetContractUpdates) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractUpdates) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractUpdates) GetGroupKey() string {
	if o == nil {
		return ""
	}
	return o.GroupKey
}

func (o *GetContractUpdates) GetGroupValues() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupValues
}

func (o *GetContractUpdates) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

type GetContractContractsUsageFilter struct {
	Initial GetContractContractsInitial          `json:"initial"`
	Current *GetContractContractsResponseCurrent `json:"current"`
	Updates []GetContractUpdates                 `json:"updates"`
}

func (o *GetContractContractsUsageFilter) GetInitial() GetContractContractsInitial {
	if o == nil {
		return GetContractContractsInitial{}
	}
	return o.Initial
}

func (o *GetContractContractsUsageFilter) GetCurrent() *GetContractContractsResponseCurrent {
	if o == nil {
		return nil
	}
	return o.Current
}

func (o *GetContractContractsUsageFilter) GetUpdates() []GetContractUpdates {
	if o == nil {
		return []GetContractUpdates{}
	}
	return o.Updates
}

type GetContractContractsFrequency string

const (
	GetContractContractsFrequencyMonthlyUpper   GetContractContractsFrequency = "MONTHLY"
	GetContractContractsFrequencyMonthlyLower   GetContractContractsFrequency = "monthly"
	GetContractContractsFrequencyQuarterlyUpper GetContractContractsFrequency = "QUARTERLY"
	GetContractContractsFrequencyQuarterlyLower GetContractContractsFrequency = "quarterly"
)

func (e GetContractContractsFrequency) ToPointer() *GetContractContractsFrequency {
	return &e
}
func (e *GetContractContractsFrequency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MONTHLY":
		fallthrough
	case "monthly":
		fallthrough
	case "QUARTERLY":
		fallthrough
	case "quarterly":
		*e = GetContractContractsFrequency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractContractsFrequency: %v", v)
	}
}

type GetContractContractsUsageStatementSchedule struct {
	Frequency GetContractContractsFrequency `json:"frequency"`
}

func (o *GetContractContractsUsageStatementSchedule) GetFrequency() GetContractContractsFrequency {
	if o == nil {
		return GetContractContractsFrequency("")
	}
	return o.Frequency
}

type GetContractInitial struct {
	Name *string `json:"name,omitempty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string                                 `json:"salesforce_opportunity_id,omitempty"`
	RateCardID              *string                                 `json:"rate_card_id,omitempty"`
	StartingAt              time.Time                               `json:"starting_at"`
	Commits                 []GetContractContractsResponseCommits   `json:"commits"`
	Credits                 []GetContractContractsResponseCredits   `json:"credits,omitempty"`
	Overrides               []GetContractContractsResponseOverrides `json:"overrides"`
	// This field's availability is dependent on your client's configuration.
	Discounts []GetContractContractsResponseDiscounts `json:"discounts,omitempty"`
	// This field's availability is dependent on your client's configuration.
	ProfessionalServices []GetContractContractsResponseProfessionalServices `json:"professional_services,omitempty"`
	ScheduledCharges     []GetContractContractsResponseScheduledCharges     `json:"scheduled_charges"`
	Transitions          []Transitions                                      `json:"transitions"`
	// This field's availability is dependent on your client's configuration.
	ResellerRoyalties []GetContractContractsResponseResellerRoyalties `json:"reseller_royalties,omitempty"`
	CreatedAt         time.Time                                       `json:"created_at"`
	CreatedBy         string                                          `json:"created_by"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string    `json:"netsuite_sales_order_id,omitempty"`
	NetPaymentTermsDays  *float64   `json:"net_payment_terms_days,omitempty"`
	EndingBefore         *time.Time `json:"ending_before,omitempty"`
	// This field's availability is dependent on your client's configuration.
	TotalContractValue     *float64                                   `json:"total_contract_value,omitempty"`
	UsageFilter            *GetContractContractsUsageFilter           `json:"usage_filter,omitempty"`
	UsageStatementSchedule GetContractContractsUsageStatementSchedule `json:"usage_statement_schedule"`
}

func (g GetContractInitial) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractInitial) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractInitial) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetContractInitial) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *GetContractInitial) GetRateCardID() *string {
	if o == nil {
		return nil
	}
	return o.RateCardID
}

func (o *GetContractInitial) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *GetContractInitial) GetCommits() []GetContractContractsResponseCommits {
	if o == nil {
		return []GetContractContractsResponseCommits{}
	}
	return o.Commits
}

func (o *GetContractInitial) GetCredits() []GetContractContractsResponseCredits {
	if o == nil {
		return nil
	}
	return o.Credits
}

func (o *GetContractInitial) GetOverrides() []GetContractContractsResponseOverrides {
	if o == nil {
		return []GetContractContractsResponseOverrides{}
	}
	return o.Overrides
}

func (o *GetContractInitial) GetDiscounts() []GetContractContractsResponseDiscounts {
	if o == nil {
		return nil
	}
	return o.Discounts
}

func (o *GetContractInitial) GetProfessionalServices() []GetContractContractsResponseProfessionalServices {
	if o == nil {
		return nil
	}
	return o.ProfessionalServices
}

func (o *GetContractInitial) GetScheduledCharges() []GetContractContractsResponseScheduledCharges {
	if o == nil {
		return []GetContractContractsResponseScheduledCharges{}
	}
	return o.ScheduledCharges
}

func (o *GetContractInitial) GetTransitions() []Transitions {
	if o == nil {
		return []Transitions{}
	}
	return o.Transitions
}

func (o *GetContractInitial) GetResellerRoyalties() []GetContractContractsResponseResellerRoyalties {
	if o == nil {
		return nil
	}
	return o.ResellerRoyalties
}

func (o *GetContractInitial) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *GetContractInitial) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *GetContractInitial) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *GetContractInitial) GetNetPaymentTermsDays() *float64 {
	if o == nil {
		return nil
	}
	return o.NetPaymentTermsDays
}

func (o *GetContractInitial) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *GetContractInitial) GetTotalContractValue() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalContractValue
}

func (o *GetContractInitial) GetUsageFilter() *GetContractContractsUsageFilter {
	if o == nil {
		return nil
	}
	return o.UsageFilter
}

func (o *GetContractInitial) GetUsageStatementSchedule() GetContractContractsUsageStatementSchedule {
	if o == nil {
		return GetContractContractsUsageStatementSchedule{}
	}
	return o.UsageStatementSchedule
}

type GetContractContractsContract struct {
	ID string `json:"id"`
}

func (o *GetContractContractsContract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsResponse200ApplicationJSONType string

const (
	GetContractContractsResponse200ApplicationJSONTypePrepaid  GetContractContractsResponse200ApplicationJSONType = "PREPAID"
	GetContractContractsResponse200ApplicationJSONTypePostpaid GetContractContractsResponse200ApplicationJSONType = "POSTPAID"
)

func (e GetContractContractsResponse200ApplicationJSONType) ToPointer() *GetContractContractsResponse200ApplicationJSONType {
	return &e
}
func (e *GetContractContractsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID":
		fallthrough
	case "POSTPAID":
		*e = GetContractContractsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractContractsResponse200ApplicationJSONType: %v", v)
	}
}

type GetContractContractsResponse200ApplicationJSONProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *GetContractContractsResponse200ApplicationJSONProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ApplicationJSONProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsResponse200ApplicationJSONScheduleItems struct {
	ID           string    `json:"id"`
	Amount       float64   `json:"amount"`
	StartingAt   time.Time `json:"starting_at"`
	EndingBefore time.Time `json:"ending_before"`
}

func (g GetContractContractsResponse200ApplicationJSONScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsResponse200ApplicationJSONScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsResponse200ApplicationJSONScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ApplicationJSONScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractContractsResponse200ApplicationJSONScheduleItems) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *GetContractContractsResponse200ApplicationJSONScheduleItems) GetEndingBefore() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndingBefore
}

// GetContractContractsAccessSchedule - The schedule that the customer will gain access to the credits purposed with this commit.
type GetContractContractsAccessSchedule struct {
	CreditType    *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditType `json:"credit_type,omitempty"`
	ScheduleItems []GetContractContractsResponse200ApplicationJSONScheduleItems                    `json:"schedule_items"`
}

func (o *GetContractContractsAccessSchedule) GetCreditType() *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *GetContractContractsAccessSchedule) GetScheduleItems() []GetContractContractsResponse200ApplicationJSONScheduleItems {
	if o == nil {
		return []GetContractContractsResponse200ApplicationJSONScheduleItems{}
	}
	return o.ScheduleItems
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsResponse200ApplicationJSONResponseBodyScheduleItems struct {
	ID        string    `json:"id"`
	InvoiceID string    `json:"invoice_id"`
	Amount    float64   `json:"amount"`
	UnitPrice float64   `json:"unit_price"`
	Quantity  float64   `json:"quantity"`
	Timestamp time.Time `json:"timestamp"`
}

func (g GetContractContractsResponse200ApplicationJSONResponseBodyScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsResponse200ApplicationJSONResponseBodyScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyScheduleItems) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyScheduleItems) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyScheduleItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyScheduleItems) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

// GetContractInvoiceSchedule - The schedule that the customer will be invoiced for this commit.
type GetContractInvoiceSchedule struct {
	CreditType    *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsCreditType `json:"credit_type,omitempty"`
	ScheduleItems []GetContractContractsResponse200ApplicationJSONResponseBodyScheduleItems               `json:"schedule_items,omitempty"`
}

func (o *GetContractInvoiceSchedule) GetCreditType() *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *GetContractInvoiceSchedule) GetScheduleItems() []GetContractContractsResponse200ApplicationJSONResponseBodyScheduleItems {
	if o == nil {
		return nil
	}
	return o.ScheduleItems
}

// GetContractInvoiceContract - The contract that this commit will be billed on.
type GetContractInvoiceContract struct {
	ID string `json:"id"`
}

func (o *GetContractInvoiceContract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractRolledOverFrom struct {
	CommitID   string `json:"commit_id"`
	ContractID string `json:"contract_id"`
}

func (o *GetContractRolledOverFrom) GetCommitID() string {
	if o == nil {
		return ""
	}
	return o.CommitID
}

func (o *GetContractRolledOverFrom) GetContractID() string {
	if o == nil {
		return ""
	}
	return o.ContractID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits13Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits13TypePostpaidCommitExpiration GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits13Type = "POSTPAID_COMMIT_EXPIRATION"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits13Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits13Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits13Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_EXPIRATION":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits13Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits13Type: %v", v)
	}
}

type GetContractLedgerContractsResponse13 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits13Type `json:"type"`
	Timestamp time.Time                                                                                `json:"timestamp"`
	Amount    float64                                                                                  `json:"amount"`
}

func (g GetContractLedgerContractsResponse13) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse13) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse13) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits13Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits13Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse13) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse13) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits12Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits12TypePostpaidCommitManual GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits12Type = "POSTPAID_COMMIT_MANUAL"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits12Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits12Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_MANUAL":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits12Type: %v", v)
	}
}

type GetContractLedgerContractsResponse12 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits12Type `json:"type"`
	Timestamp time.Time                                                                                `json:"timestamp"`
	Amount    float64                                                                                  `json:"amount"`
	Reason    string                                                                                   `json:"reason"`
}

func (g GetContractLedgerContractsResponse12) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse12) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse12) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits12Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits12Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse12) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse12) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse12) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits11Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits11TypePrepaidCommitManual GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits11Type = "PREPAID_COMMIT_MANUAL"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits11Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits11Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_MANUAL":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits11Type: %v", v)
	}
}

type GetContractLedgerContractsResponse11 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits11Type `json:"type"`
	Timestamp time.Time                                                                                `json:"timestamp"`
	Amount    float64                                                                                  `json:"amount"`
	Reason    string                                                                                   `json:"reason"`
}

func (g GetContractLedgerContractsResponse11) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse11) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse11) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits11Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits11Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse11) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse11) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse11) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits10Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits10TypePostpaidCommitTrueup GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits10Type = "POSTPAID_COMMIT_TRUEUP"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits10Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits10Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_TRUEUP":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits10Type: %v", v)
	}
}

type GetContractLedgerContractsResponse10 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits10Type `json:"type"`
	Timestamp time.Time                                                                                `json:"timestamp"`
	Amount    float64                                                                                  `json:"amount"`
	InvoiceID string                                                                                   `json:"invoice_id"`
}

func (g GetContractLedgerContractsResponse10) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse10) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse10) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits10Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits10Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse10) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse10) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse10) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits9Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits9TypePostpaidCommitRollover GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits9Type = "POSTPAID_COMMIT_ROLLOVER"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits9Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits9Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_ROLLOVER":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits9Type: %v", v)
	}
}

type GetContractLedgerContractsResponse9 struct {
	Type          GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits9Type `json:"type"`
	Timestamp     time.Time                                                                               `json:"timestamp"`
	Amount        float64                                                                                 `json:"amount"`
	SegmentID     string                                                                                  `json:"segment_id"`
	NewContractID string                                                                                  `json:"new_contract_id"`
}

func (g GetContractLedgerContractsResponse9) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse9) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse9) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits9Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits9Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse9) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse9) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse9) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedgerContractsResponse9) GetNewContractID() string {
	if o == nil {
		return ""
	}
	return o.NewContractID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits8Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits8TypePostpaidCommitAutomatedInvoiceDeduction GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits8Type = "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits8Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits8Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits8Type: %v", v)
	}
}

type GetContractLedgerContractsResponse8 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits8Type `json:"type"`
	Timestamp time.Time                                                                               `json:"timestamp"`
	Amount    float64                                                                                 `json:"amount"`
	SegmentID string                                                                                  `json:"segment_id"`
	InvoiceID string                                                                                  `json:"invoice_id"`
}

func (g GetContractLedgerContractsResponse8) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse8) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse8) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits8Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits8Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse8) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse8) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse8) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedgerContractsResponse8) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits7Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits7TypePostpaidCommitInitialBalance GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits7Type = "POSTPAID_COMMIT_INITIAL_BALANCE"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits7Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits7Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_INITIAL_BALANCE":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits7Type: %v", v)
	}
}

type GetContractLedgerContractsResponse7 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits7Type `json:"type"`
	Timestamp time.Time                                                                               `json:"timestamp"`
	Amount    float64                                                                                 `json:"amount"`
}

func (g GetContractLedgerContractsResponse7) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse7) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse7) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits7Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits7Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse7) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse7) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits6Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits6TypePrepaidCommitCredited GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits6Type = "PREPAID_COMMIT_CREDITED"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits6Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits6Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_CREDITED":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits6Type: %v", v)
	}
}

type GetContractLedger6 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits6Type `json:"type"`
	Timestamp time.Time                                                                               `json:"timestamp"`
	Amount    float64                                                                                 `json:"amount"`
	SegmentID string                                                                                  `json:"segment_id"`
	InvoiceID string                                                                                  `json:"invoice_id"`
}

func (g GetContractLedger6) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedger6) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedger6) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits6Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits6Type("")
	}
	return o.Type
}

func (o *GetContractLedger6) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedger6) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedger6) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedger6) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits5Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits5TypePrepaidCommitCanceled GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits5Type = "PREPAID_COMMIT_CANCELED"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits5Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits5Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_CANCELED":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits5Type: %v", v)
	}
}

type GetContractLedger5 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits5Type `json:"type"`
	Timestamp time.Time                                                                               `json:"timestamp"`
	Amount    float64                                                                                 `json:"amount"`
	SegmentID string                                                                                  `json:"segment_id"`
	InvoiceID string                                                                                  `json:"invoice_id"`
}

func (g GetContractLedger5) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedger5) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedger5) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits5Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits5Type("")
	}
	return o.Type
}

func (o *GetContractLedger5) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedger5) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedger5) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedger5) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits4Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits4TypePrepaidCommitExpiration GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits4Type = "PREPAID_COMMIT_EXPIRATION"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits4Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits4Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_EXPIRATION":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits4Type: %v", v)
	}
}

type GetContractLedger4 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits4Type `json:"type"`
	Timestamp time.Time                                                                               `json:"timestamp"`
	Amount    float64                                                                                 `json:"amount"`
	SegmentID string                                                                                  `json:"segment_id"`
}

func (g GetContractLedger4) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedger4) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedger4) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits4Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits4Type("")
	}
	return o.Type
}

func (o *GetContractLedger4) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedger4) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedger4) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits3Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits3TypePrepaidCommitRollover GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits3Type = "PREPAID_COMMIT_ROLLOVER"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits3Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits3Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_ROLLOVER":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits3Type: %v", v)
	}
}

type GetContractLedger3 struct {
	Type          GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits3Type `json:"type"`
	Timestamp     time.Time                                                                               `json:"timestamp"`
	Amount        float64                                                                                 `json:"amount"`
	SegmentID     string                                                                                  `json:"segment_id"`
	NewContractID string                                                                                  `json:"new_contract_id"`
}

func (g GetContractLedger3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedger3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedger3) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits3Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits3Type("")
	}
	return o.Type
}

func (o *GetContractLedger3) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedger3) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedger3) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedger3) GetNewContractID() string {
	if o == nil {
		return ""
	}
	return o.NewContractID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsType string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsTypePrepaidCommitAutomatedInvoiceDeduction GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsType = "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsType) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsType {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsType: %v", v)
	}
}

type GetContractLedger2 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsType `json:"type"`
	Timestamp time.Time                                                                              `json:"timestamp"`
	Amount    float64                                                                                `json:"amount"`
	SegmentID string                                                                                 `json:"segment_id"`
	InvoiceID string                                                                                 `json:"invoice_id"`
}

func (g GetContractLedger2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedger2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedger2) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsType {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsType("")
	}
	return o.Type
}

func (o *GetContractLedger2) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedger2) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedger2) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedger2) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentType string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentTypePrepaidCommitSegmentStart GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentType = "PREPAID_COMMIT_SEGMENT_START"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentType) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentType {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_SEGMENT_START":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentType: %v", v)
	}
}

type GetContractLedger1 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentType `json:"type"`
	Timestamp time.Time                                                                       `json:"timestamp"`
	Amount    float64                                                                         `json:"amount"`
	SegmentID string                                                                          `json:"segment_id"`
}

func (g GetContractLedger1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedger1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedger1) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentType {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentType("")
	}
	return o.Type
}

func (o *GetContractLedger1) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedger1) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedger1) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type GetContractContractsLedgerType string

const (
	GetContractContractsLedgerTypeGetContractLedger1                   GetContractContractsLedgerType = "getContract_ledger_1"
	GetContractContractsLedgerTypeGetContractLedger2                   GetContractContractsLedgerType = "getContract_ledger_2"
	GetContractContractsLedgerTypeGetContractLedger3                   GetContractContractsLedgerType = "getContract_ledger_3"
	GetContractContractsLedgerTypeGetContractLedger4                   GetContractContractsLedgerType = "getContract_ledger_4"
	GetContractContractsLedgerTypeGetContractLedger5                   GetContractContractsLedgerType = "getContract_ledger_5"
	GetContractContractsLedgerTypeGetContractLedger6                   GetContractContractsLedgerType = "getContract_ledger_6"
	GetContractContractsLedgerTypeGetContractLedgerContractsResponse7  GetContractContractsLedgerType = "getContract_ledger_Contracts_response_7"
	GetContractContractsLedgerTypeGetContractLedgerContractsResponse8  GetContractContractsLedgerType = "getContract_ledger_Contracts_response_8"
	GetContractContractsLedgerTypeGetContractLedgerContractsResponse9  GetContractContractsLedgerType = "getContract_ledger_Contracts_response_9"
	GetContractContractsLedgerTypeGetContractLedgerContractsResponse10 GetContractContractsLedgerType = "getContract_ledger_Contracts_response_10"
	GetContractContractsLedgerTypeGetContractLedgerContractsResponse11 GetContractContractsLedgerType = "getContract_ledger_Contracts_response_11"
	GetContractContractsLedgerTypeGetContractLedgerContractsResponse12 GetContractContractsLedgerType = "getContract_ledger_Contracts_response_12"
	GetContractContractsLedgerTypeGetContractLedgerContractsResponse13 GetContractContractsLedgerType = "getContract_ledger_Contracts_response_13"
)

type GetContractContractsLedger struct {
	GetContractLedger1                   *GetContractLedger1
	GetContractLedger2                   *GetContractLedger2
	GetContractLedger3                   *GetContractLedger3
	GetContractLedger4                   *GetContractLedger4
	GetContractLedger5                   *GetContractLedger5
	GetContractLedger6                   *GetContractLedger6
	GetContractLedgerContractsResponse7  *GetContractLedgerContractsResponse7
	GetContractLedgerContractsResponse8  *GetContractLedgerContractsResponse8
	GetContractLedgerContractsResponse9  *GetContractLedgerContractsResponse9
	GetContractLedgerContractsResponse10 *GetContractLedgerContractsResponse10
	GetContractLedgerContractsResponse11 *GetContractLedgerContractsResponse11
	GetContractLedgerContractsResponse12 *GetContractLedgerContractsResponse12
	GetContractLedgerContractsResponse13 *GetContractLedgerContractsResponse13

	Type GetContractContractsLedgerType
}

func CreateGetContractContractsLedgerGetContractLedger1(getContractLedger1 GetContractLedger1) GetContractContractsLedger {
	typ := GetContractContractsLedgerTypeGetContractLedger1

	return GetContractContractsLedger{
		GetContractLedger1: &getContractLedger1,
		Type:               typ,
	}
}

func CreateGetContractContractsLedgerGetContractLedger2(getContractLedger2 GetContractLedger2) GetContractContractsLedger {
	typ := GetContractContractsLedgerTypeGetContractLedger2

	return GetContractContractsLedger{
		GetContractLedger2: &getContractLedger2,
		Type:               typ,
	}
}

func CreateGetContractContractsLedgerGetContractLedger3(getContractLedger3 GetContractLedger3) GetContractContractsLedger {
	typ := GetContractContractsLedgerTypeGetContractLedger3

	return GetContractContractsLedger{
		GetContractLedger3: &getContractLedger3,
		Type:               typ,
	}
}

func CreateGetContractContractsLedgerGetContractLedger4(getContractLedger4 GetContractLedger4) GetContractContractsLedger {
	typ := GetContractContractsLedgerTypeGetContractLedger4

	return GetContractContractsLedger{
		GetContractLedger4: &getContractLedger4,
		Type:               typ,
	}
}

func CreateGetContractContractsLedgerGetContractLedger5(getContractLedger5 GetContractLedger5) GetContractContractsLedger {
	typ := GetContractContractsLedgerTypeGetContractLedger5

	return GetContractContractsLedger{
		GetContractLedger5: &getContractLedger5,
		Type:               typ,
	}
}

func CreateGetContractContractsLedgerGetContractLedger6(getContractLedger6 GetContractLedger6) GetContractContractsLedger {
	typ := GetContractContractsLedgerTypeGetContractLedger6

	return GetContractContractsLedger{
		GetContractLedger6: &getContractLedger6,
		Type:               typ,
	}
}

func CreateGetContractContractsLedgerGetContractLedgerContractsResponse7(getContractLedgerContractsResponse7 GetContractLedgerContractsResponse7) GetContractContractsLedger {
	typ := GetContractContractsLedgerTypeGetContractLedgerContractsResponse7

	return GetContractContractsLedger{
		GetContractLedgerContractsResponse7: &getContractLedgerContractsResponse7,
		Type:                                typ,
	}
}

func CreateGetContractContractsLedgerGetContractLedgerContractsResponse8(getContractLedgerContractsResponse8 GetContractLedgerContractsResponse8) GetContractContractsLedger {
	typ := GetContractContractsLedgerTypeGetContractLedgerContractsResponse8

	return GetContractContractsLedger{
		GetContractLedgerContractsResponse8: &getContractLedgerContractsResponse8,
		Type:                                typ,
	}
}

func CreateGetContractContractsLedgerGetContractLedgerContractsResponse9(getContractLedgerContractsResponse9 GetContractLedgerContractsResponse9) GetContractContractsLedger {
	typ := GetContractContractsLedgerTypeGetContractLedgerContractsResponse9

	return GetContractContractsLedger{
		GetContractLedgerContractsResponse9: &getContractLedgerContractsResponse9,
		Type:                                typ,
	}
}

func CreateGetContractContractsLedgerGetContractLedgerContractsResponse10(getContractLedgerContractsResponse10 GetContractLedgerContractsResponse10) GetContractContractsLedger {
	typ := GetContractContractsLedgerTypeGetContractLedgerContractsResponse10

	return GetContractContractsLedger{
		GetContractLedgerContractsResponse10: &getContractLedgerContractsResponse10,
		Type:                                 typ,
	}
}

func CreateGetContractContractsLedgerGetContractLedgerContractsResponse11(getContractLedgerContractsResponse11 GetContractLedgerContractsResponse11) GetContractContractsLedger {
	typ := GetContractContractsLedgerTypeGetContractLedgerContractsResponse11

	return GetContractContractsLedger{
		GetContractLedgerContractsResponse11: &getContractLedgerContractsResponse11,
		Type:                                 typ,
	}
}

func CreateGetContractContractsLedgerGetContractLedgerContractsResponse12(getContractLedgerContractsResponse12 GetContractLedgerContractsResponse12) GetContractContractsLedger {
	typ := GetContractContractsLedgerTypeGetContractLedgerContractsResponse12

	return GetContractContractsLedger{
		GetContractLedgerContractsResponse12: &getContractLedgerContractsResponse12,
		Type:                                 typ,
	}
}

func CreateGetContractContractsLedgerGetContractLedgerContractsResponse13(getContractLedgerContractsResponse13 GetContractLedgerContractsResponse13) GetContractContractsLedger {
	typ := GetContractContractsLedgerTypeGetContractLedgerContractsResponse13

	return GetContractContractsLedger{
		GetContractLedgerContractsResponse13: &getContractLedgerContractsResponse13,
		Type:                                 typ,
	}
}

func (u *GetContractContractsLedger) UnmarshalJSON(data []byte) error {

	var getContractLedgerContractsResponse7 GetContractLedgerContractsResponse7 = GetContractLedgerContractsResponse7{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse7, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse7 = &getContractLedgerContractsResponse7
		u.Type = GetContractContractsLedgerTypeGetContractLedgerContractsResponse7
		return nil
	}

	var getContractLedgerContractsResponse13 GetContractLedgerContractsResponse13 = GetContractLedgerContractsResponse13{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse13, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse13 = &getContractLedgerContractsResponse13
		u.Type = GetContractContractsLedgerTypeGetContractLedgerContractsResponse13
		return nil
	}

	var getContractLedger4 GetContractLedger4 = GetContractLedger4{}
	if err := utils.UnmarshalJSON(data, &getContractLedger4, "", true, true); err == nil {
		u.GetContractLedger4 = &getContractLedger4
		u.Type = GetContractContractsLedgerTypeGetContractLedger4
		return nil
	}

	var getContractLedger1 GetContractLedger1 = GetContractLedger1{}
	if err := utils.UnmarshalJSON(data, &getContractLedger1, "", true, true); err == nil {
		u.GetContractLedger1 = &getContractLedger1
		u.Type = GetContractContractsLedgerTypeGetContractLedger1
		return nil
	}

	var getContractLedgerContractsResponse10 GetContractLedgerContractsResponse10 = GetContractLedgerContractsResponse10{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse10, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse10 = &getContractLedgerContractsResponse10
		u.Type = GetContractContractsLedgerTypeGetContractLedgerContractsResponse10
		return nil
	}

	var getContractLedgerContractsResponse11 GetContractLedgerContractsResponse11 = GetContractLedgerContractsResponse11{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse11, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse11 = &getContractLedgerContractsResponse11
		u.Type = GetContractContractsLedgerTypeGetContractLedgerContractsResponse11
		return nil
	}

	var getContractLedgerContractsResponse12 GetContractLedgerContractsResponse12 = GetContractLedgerContractsResponse12{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse12, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse12 = &getContractLedgerContractsResponse12
		u.Type = GetContractContractsLedgerTypeGetContractLedgerContractsResponse12
		return nil
	}

	var getContractLedger5 GetContractLedger5 = GetContractLedger5{}
	if err := utils.UnmarshalJSON(data, &getContractLedger5, "", true, true); err == nil {
		u.GetContractLedger5 = &getContractLedger5
		u.Type = GetContractContractsLedgerTypeGetContractLedger5
		return nil
	}

	var getContractLedger6 GetContractLedger6 = GetContractLedger6{}
	if err := utils.UnmarshalJSON(data, &getContractLedger6, "", true, true); err == nil {
		u.GetContractLedger6 = &getContractLedger6
		u.Type = GetContractContractsLedgerTypeGetContractLedger6
		return nil
	}

	var getContractLedger3 GetContractLedger3 = GetContractLedger3{}
	if err := utils.UnmarshalJSON(data, &getContractLedger3, "", true, true); err == nil {
		u.GetContractLedger3 = &getContractLedger3
		u.Type = GetContractContractsLedgerTypeGetContractLedger3
		return nil
	}

	var getContractLedgerContractsResponse8 GetContractLedgerContractsResponse8 = GetContractLedgerContractsResponse8{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse8, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse8 = &getContractLedgerContractsResponse8
		u.Type = GetContractContractsLedgerTypeGetContractLedgerContractsResponse8
		return nil
	}

	var getContractLedgerContractsResponse9 GetContractLedgerContractsResponse9 = GetContractLedgerContractsResponse9{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse9, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse9 = &getContractLedgerContractsResponse9
		u.Type = GetContractContractsLedgerTypeGetContractLedgerContractsResponse9
		return nil
	}

	var getContractLedger2 GetContractLedger2 = GetContractLedger2{}
	if err := utils.UnmarshalJSON(data, &getContractLedger2, "", true, true); err == nil {
		u.GetContractLedger2 = &getContractLedger2
		u.Type = GetContractContractsLedgerTypeGetContractLedger2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetContractContractsLedger", string(data))
}

func (u GetContractContractsLedger) MarshalJSON() ([]byte, error) {
	if u.GetContractLedger1 != nil {
		return utils.MarshalJSON(u.GetContractLedger1, "", true)
	}

	if u.GetContractLedger2 != nil {
		return utils.MarshalJSON(u.GetContractLedger2, "", true)
	}

	if u.GetContractLedger3 != nil {
		return utils.MarshalJSON(u.GetContractLedger3, "", true)
	}

	if u.GetContractLedger4 != nil {
		return utils.MarshalJSON(u.GetContractLedger4, "", true)
	}

	if u.GetContractLedger5 != nil {
		return utils.MarshalJSON(u.GetContractLedger5, "", true)
	}

	if u.GetContractLedger6 != nil {
		return utils.MarshalJSON(u.GetContractLedger6, "", true)
	}

	if u.GetContractLedgerContractsResponse7 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse7, "", true)
	}

	if u.GetContractLedgerContractsResponse8 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse8, "", true)
	}

	if u.GetContractLedgerContractsResponse9 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse9, "", true)
	}

	if u.GetContractLedgerContractsResponse10 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse10, "", true)
	}

	if u.GetContractLedgerContractsResponse11 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse11, "", true)
	}

	if u.GetContractLedgerContractsResponse12 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse12, "", true)
	}

	if u.GetContractLedgerContractsResponse13 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse13, "", true)
	}

	return nil, errors.New("could not marshal union type GetContractContractsLedger: all fields are null")
}

type GetContractCommits struct {
	ID       string                                             `json:"id"`
	Contract *GetContractContractsContract                      `json:"contract,omitempty"`
	Type     GetContractContractsResponse200ApplicationJSONType `json:"type"`
	Name     *string                                            `json:"name,omitempty"`
	// If multiple credits or commits are applicable, the one with the lower priority will apply first.
	Priority *float64                                              `json:"priority,omitempty"`
	Product  GetContractContractsResponse200ApplicationJSONProduct `json:"product"`
	// The schedule that the customer will gain access to the credits purposed with this commit.
	AccessSchedule *GetContractContractsAccessSchedule `json:"access_schedule,omitempty"`
	// The schedule that the customer will be invoiced for this commit.
	InvoiceSchedule *GetContractInvoiceSchedule `json:"invoice_schedule,omitempty"`
	// The contract that this commit will be billed on.
	InvoiceContract       *GetContractInvoiceContract `json:"invoice_contract,omitempty"`
	RolledOverFrom        *GetContractRolledOverFrom  `json:"rolled_over_from,omitempty"`
	Description           *string                     `json:"description,omitempty"`
	RolloverFraction      *float64                    `json:"rollover_fraction,omitempty"`
	ApplicableProductIds  []string                    `json:"applicable_product_ids,omitempty"`
	ApplicableProductTags []string                    `json:"applicable_product_tags,omitempty"`
	ApplicableContractIds []string                    `json:"applicable_contract_ids,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// (DEPRECATED) Use access_schedule + invoice_schedule instead.
	Amount *float64 `json:"amount,omitempty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string `json:"salesforce_opportunity_id,omitempty"`
	// A list of ordered events that impact the balance of a commit. For example, an invoice deduction or a rollover.
	Ledger       []GetContractContractsLedger `json:"ledger,omitempty"`
	CustomFields map[string]string            `json:"custom_fields,omitempty"`
}

func (o *GetContractCommits) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractCommits) GetContract() *GetContractContractsContract {
	if o == nil {
		return nil
	}
	return o.Contract
}

func (o *GetContractCommits) GetType() GetContractContractsResponse200ApplicationJSONType {
	if o == nil {
		return GetContractContractsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *GetContractCommits) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetContractCommits) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *GetContractCommits) GetProduct() GetContractContractsResponse200ApplicationJSONProduct {
	if o == nil {
		return GetContractContractsResponse200ApplicationJSONProduct{}
	}
	return o.Product
}

func (o *GetContractCommits) GetAccessSchedule() *GetContractContractsAccessSchedule {
	if o == nil {
		return nil
	}
	return o.AccessSchedule
}

func (o *GetContractCommits) GetInvoiceSchedule() *GetContractInvoiceSchedule {
	if o == nil {
		return nil
	}
	return o.InvoiceSchedule
}

func (o *GetContractCommits) GetInvoiceContract() *GetContractInvoiceContract {
	if o == nil {
		return nil
	}
	return o.InvoiceContract
}

func (o *GetContractCommits) GetRolledOverFrom() *GetContractRolledOverFrom {
	if o == nil {
		return nil
	}
	return o.RolledOverFrom
}

func (o *GetContractCommits) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetContractCommits) GetRolloverFraction() *float64 {
	if o == nil {
		return nil
	}
	return o.RolloverFraction
}

func (o *GetContractCommits) GetApplicableProductIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductIds
}

func (o *GetContractCommits) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *GetContractCommits) GetApplicableContractIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableContractIds
}

func (o *GetContractCommits) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *GetContractCommits) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *GetContractCommits) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *GetContractCommits) GetLedger() []GetContractContractsLedger {
	if o == nil {
		return nil
	}
	return o.Ledger
}

func (o *GetContractCommits) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type GetContractContractsResponseContract struct {
	ID string `json:"id"`
}

func (o *GetContractContractsResponseContract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsResponse200ApplicationJSONResponseBodyType string

const (
	GetContractContractsResponse200ApplicationJSONResponseBodyTypeCredit GetContractContractsResponse200ApplicationJSONResponseBodyType = "CREDIT"
)

func (e GetContractContractsResponse200ApplicationJSONResponseBodyType) ToPointer() *GetContractContractsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *GetContractContractsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT":
		*e = GetContractContractsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractContractsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type GetContractContractsResponse200ApplicationJSONResponseBodyProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataScheduleItems struct {
	ID           string    `json:"id"`
	Amount       float64   `json:"amount"`
	StartingAt   time.Time `json:"starting_at"`
	EndingBefore time.Time `json:"ending_before"`
}

func (g GetContractContractsResponse200ApplicationJSONResponseBodyDataScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsResponse200ApplicationJSONResponseBodyDataScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataScheduleItems) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataScheduleItems) GetEndingBefore() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndingBefore
}

// GetContractContractsResponseAccessSchedule - The schedule that the customer will gain access to the credits.
type GetContractContractsResponseAccessSchedule struct {
	CreditType    *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsCreditType `json:"credit_type,omitempty"`
	ScheduleItems []GetContractContractsResponse200ApplicationJSONResponseBodyDataScheduleItems           `json:"schedule_items"`
}

func (o *GetContractContractsResponseAccessSchedule) GetCreditType() *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *GetContractContractsResponseAccessSchedule) GetScheduleItems() []GetContractContractsResponse200ApplicationJSONResponseBodyDataScheduleItems {
	if o == nil {
		return []GetContractContractsResponse200ApplicationJSONResponseBodyDataScheduleItems{}
	}
	return o.ScheduleItems
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits6Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits6TypeCreditManual GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits6Type = "CREDIT_MANUAL"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits6Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits6Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_MANUAL":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits6Type: %v", v)
	}
}

type GetContractLedgerContracts6 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits6Type `json:"type"`
	Timestamp time.Time                                                                               `json:"timestamp"`
	Amount    float64                                                                                 `json:"amount"`
	Reason    string                                                                                  `json:"reason"`
}

func (g GetContractLedgerContracts6) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContracts6) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContracts6) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits6Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits6Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContracts6) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContracts6) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContracts6) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits5Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits5TypeCreditCredited GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits5Type = "CREDIT_CREDITED"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits5Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits5Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_CREDITED":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits5Type: %v", v)
	}
}

type GetContractLedgerContracts5 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits5Type `json:"type"`
	Timestamp time.Time                                                                               `json:"timestamp"`
	Amount    float64                                                                                 `json:"amount"`
	SegmentID string                                                                                  `json:"segment_id"`
	InvoiceID string                                                                                  `json:"invoice_id"`
}

func (g GetContractLedgerContracts5) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContracts5) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContracts5) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits5Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits5Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContracts5) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContracts5) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContracts5) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedgerContracts5) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits4Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits4TypeCreditCanceled GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits4Type = "CREDIT_CANCELED"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits4Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits4Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_CANCELED":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits4Type: %v", v)
	}
}

type GetContractLedgerContracts4 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits4Type `json:"type"`
	Timestamp time.Time                                                                               `json:"timestamp"`
	Amount    float64                                                                                 `json:"amount"`
	SegmentID string                                                                                  `json:"segment_id"`
	InvoiceID string                                                                                  `json:"invoice_id"`
}

func (g GetContractLedgerContracts4) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContracts4) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContracts4) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits4Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits4Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContracts4) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContracts4) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContracts4) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedgerContracts4) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits3Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits3TypeCreditExpiration GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits3Type = "CREDIT_EXPIRATION"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits3Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits3Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_EXPIRATION":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits3Type: %v", v)
	}
}

type GetContractLedgerContracts3 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits3Type `json:"type"`
	Timestamp time.Time                                                                               `json:"timestamp"`
	Amount    float64                                                                                 `json:"amount"`
	SegmentID string                                                                                  `json:"segment_id"`
}

func (g GetContractLedgerContracts3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContracts3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContracts3) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits3Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits3Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContracts3) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContracts3) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContracts3) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits2Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits2TypeCreditAutomatedInvoiceDeduction GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits2Type = "CREDIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits2Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits2Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits2Type: %v", v)
	}
}

type GetContractLedgerContracts2 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits2Type `json:"type"`
	Timestamp time.Time                                                                               `json:"timestamp"`
	Amount    float64                                                                                 `json:"amount"`
	SegmentID string                                                                                  `json:"segment_id"`
	InvoiceID string                                                                                  `json:"invoice_id"`
}

func (g GetContractLedgerContracts2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContracts2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContracts2) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits2Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits2Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContracts2) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContracts2) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContracts2) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedgerContracts2) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsType string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsTypeCreditSegmentStart GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsType = "CREDIT_SEGMENT_START"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsType) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsType {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_SEGMENT_START":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsType: %v", v)
	}
}

type GetContractLedgerContracts1 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsType `json:"type"`
	Timestamp time.Time                                                                              `json:"timestamp"`
	Amount    float64                                                                                `json:"amount"`
	SegmentID string                                                                                 `json:"segment_id"`
}

func (g GetContractLedgerContracts1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContracts1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContracts1) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsType {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsType("")
	}
	return o.Type
}

func (o *GetContractLedgerContracts1) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContracts1) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContracts1) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type GetContractContractsResponseLedgerType string

const (
	GetContractContractsResponseLedgerTypeGetContractLedgerContracts1 GetContractContractsResponseLedgerType = "getContract_ledger_Contracts_1"
	GetContractContractsResponseLedgerTypeGetContractLedgerContracts2 GetContractContractsResponseLedgerType = "getContract_ledger_Contracts_2"
	GetContractContractsResponseLedgerTypeGetContractLedgerContracts3 GetContractContractsResponseLedgerType = "getContract_ledger_Contracts_3"
	GetContractContractsResponseLedgerTypeGetContractLedgerContracts4 GetContractContractsResponseLedgerType = "getContract_ledger_Contracts_4"
	GetContractContractsResponseLedgerTypeGetContractLedgerContracts5 GetContractContractsResponseLedgerType = "getContract_ledger_Contracts_5"
	GetContractContractsResponseLedgerTypeGetContractLedgerContracts6 GetContractContractsResponseLedgerType = "getContract_ledger_Contracts_6"
)

type GetContractContractsResponseLedger struct {
	GetContractLedgerContracts1 *GetContractLedgerContracts1
	GetContractLedgerContracts2 *GetContractLedgerContracts2
	GetContractLedgerContracts3 *GetContractLedgerContracts3
	GetContractLedgerContracts4 *GetContractLedgerContracts4
	GetContractLedgerContracts5 *GetContractLedgerContracts5
	GetContractLedgerContracts6 *GetContractLedgerContracts6

	Type GetContractContractsResponseLedgerType
}

func CreateGetContractContractsResponseLedgerGetContractLedgerContracts1(getContractLedgerContracts1 GetContractLedgerContracts1) GetContractContractsResponseLedger {
	typ := GetContractContractsResponseLedgerTypeGetContractLedgerContracts1

	return GetContractContractsResponseLedger{
		GetContractLedgerContracts1: &getContractLedgerContracts1,
		Type:                        typ,
	}
}

func CreateGetContractContractsResponseLedgerGetContractLedgerContracts2(getContractLedgerContracts2 GetContractLedgerContracts2) GetContractContractsResponseLedger {
	typ := GetContractContractsResponseLedgerTypeGetContractLedgerContracts2

	return GetContractContractsResponseLedger{
		GetContractLedgerContracts2: &getContractLedgerContracts2,
		Type:                        typ,
	}
}

func CreateGetContractContractsResponseLedgerGetContractLedgerContracts3(getContractLedgerContracts3 GetContractLedgerContracts3) GetContractContractsResponseLedger {
	typ := GetContractContractsResponseLedgerTypeGetContractLedgerContracts3

	return GetContractContractsResponseLedger{
		GetContractLedgerContracts3: &getContractLedgerContracts3,
		Type:                        typ,
	}
}

func CreateGetContractContractsResponseLedgerGetContractLedgerContracts4(getContractLedgerContracts4 GetContractLedgerContracts4) GetContractContractsResponseLedger {
	typ := GetContractContractsResponseLedgerTypeGetContractLedgerContracts4

	return GetContractContractsResponseLedger{
		GetContractLedgerContracts4: &getContractLedgerContracts4,
		Type:                        typ,
	}
}

func CreateGetContractContractsResponseLedgerGetContractLedgerContracts5(getContractLedgerContracts5 GetContractLedgerContracts5) GetContractContractsResponseLedger {
	typ := GetContractContractsResponseLedgerTypeGetContractLedgerContracts5

	return GetContractContractsResponseLedger{
		GetContractLedgerContracts5: &getContractLedgerContracts5,
		Type:                        typ,
	}
}

func CreateGetContractContractsResponseLedgerGetContractLedgerContracts6(getContractLedgerContracts6 GetContractLedgerContracts6) GetContractContractsResponseLedger {
	typ := GetContractContractsResponseLedgerTypeGetContractLedgerContracts6

	return GetContractContractsResponseLedger{
		GetContractLedgerContracts6: &getContractLedgerContracts6,
		Type:                        typ,
	}
}

func (u *GetContractContractsResponseLedger) UnmarshalJSON(data []byte) error {

	var getContractLedgerContracts1 GetContractLedgerContracts1 = GetContractLedgerContracts1{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContracts1, "", true, true); err == nil {
		u.GetContractLedgerContracts1 = &getContractLedgerContracts1
		u.Type = GetContractContractsResponseLedgerTypeGetContractLedgerContracts1
		return nil
	}

	var getContractLedgerContracts3 GetContractLedgerContracts3 = GetContractLedgerContracts3{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContracts3, "", true, true); err == nil {
		u.GetContractLedgerContracts3 = &getContractLedgerContracts3
		u.Type = GetContractContractsResponseLedgerTypeGetContractLedgerContracts3
		return nil
	}

	var getContractLedgerContracts6 GetContractLedgerContracts6 = GetContractLedgerContracts6{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContracts6, "", true, true); err == nil {
		u.GetContractLedgerContracts6 = &getContractLedgerContracts6
		u.Type = GetContractContractsResponseLedgerTypeGetContractLedgerContracts6
		return nil
	}

	var getContractLedgerContracts2 GetContractLedgerContracts2 = GetContractLedgerContracts2{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContracts2, "", true, true); err == nil {
		u.GetContractLedgerContracts2 = &getContractLedgerContracts2
		u.Type = GetContractContractsResponseLedgerTypeGetContractLedgerContracts2
		return nil
	}

	var getContractLedgerContracts4 GetContractLedgerContracts4 = GetContractLedgerContracts4{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContracts4, "", true, true); err == nil {
		u.GetContractLedgerContracts4 = &getContractLedgerContracts4
		u.Type = GetContractContractsResponseLedgerTypeGetContractLedgerContracts4
		return nil
	}

	var getContractLedgerContracts5 GetContractLedgerContracts5 = GetContractLedgerContracts5{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContracts5, "", true, true); err == nil {
		u.GetContractLedgerContracts5 = &getContractLedgerContracts5
		u.Type = GetContractContractsResponseLedgerTypeGetContractLedgerContracts5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetContractContractsResponseLedger", string(data))
}

func (u GetContractContractsResponseLedger) MarshalJSON() ([]byte, error) {
	if u.GetContractLedgerContracts1 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContracts1, "", true)
	}

	if u.GetContractLedgerContracts2 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContracts2, "", true)
	}

	if u.GetContractLedgerContracts3 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContracts3, "", true)
	}

	if u.GetContractLedgerContracts4 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContracts4, "", true)
	}

	if u.GetContractLedgerContracts5 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContracts5, "", true)
	}

	if u.GetContractLedgerContracts6 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContracts6, "", true)
	}

	return nil, errors.New("could not marshal union type GetContractContractsResponseLedger: all fields are null")
}

type GetContractCredits struct {
	ID       string                                                         `json:"id"`
	Contract *GetContractContractsResponseContract                          `json:"contract,omitempty"`
	Type     GetContractContractsResponse200ApplicationJSONResponseBodyType `json:"type"`
	Name     *string                                                        `json:"name,omitempty"`
	// If multiple credits or commits are applicable, the one with the lower priority will apply first.
	Priority *float64                                                          `json:"priority,omitempty"`
	Product  GetContractContractsResponse200ApplicationJSONResponseBodyProduct `json:"product"`
	// The schedule that the customer will gain access to the credits.
	AccessSchedule        *GetContractContractsResponseAccessSchedule `json:"access_schedule,omitempty"`
	Description           *string                                     `json:"description,omitempty"`
	ApplicableProductIds  []string                                    `json:"applicable_product_ids,omitempty"`
	ApplicableProductTags []string                                    `json:"applicable_product_tags,omitempty"`
	ApplicableContractIds []string                                    `json:"applicable_contract_ids,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string `json:"salesforce_opportunity_id,omitempty"`
	// A list of ordered events that impact the balance of a credit. For example, an invoice deduction or an expiration.
	Ledger       []GetContractContractsResponseLedger `json:"ledger,omitempty"`
	CustomFields map[string]string                    `json:"custom_fields,omitempty"`
}

func (o *GetContractCredits) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractCredits) GetContract() *GetContractContractsResponseContract {
	if o == nil {
		return nil
	}
	return o.Contract
}

func (o *GetContractCredits) GetType() GetContractContractsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return GetContractContractsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *GetContractCredits) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetContractCredits) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *GetContractCredits) GetProduct() GetContractContractsResponse200ApplicationJSONResponseBodyProduct {
	if o == nil {
		return GetContractContractsResponse200ApplicationJSONResponseBodyProduct{}
	}
	return o.Product
}

func (o *GetContractCredits) GetAccessSchedule() *GetContractContractsResponseAccessSchedule {
	if o == nil {
		return nil
	}
	return o.AccessSchedule
}

func (o *GetContractCredits) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetContractCredits) GetApplicableProductIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductIds
}

func (o *GetContractCredits) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *GetContractCredits) GetApplicableContractIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableContractIds
}

func (o *GetContractCredits) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *GetContractCredits) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *GetContractCredits) GetLedger() []GetContractContractsResponseLedger {
	if o == nil {
		return nil
	}
	return o.Ledger
}

func (o *GetContractCredits) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type GetContractOverrideSpecifiers struct {
	ProductID               *string           `json:"product_id,omitempty"`
	ProductTags             []string          `json:"product_tags,omitempty"`
	PricingGroupValues      map[string]string `json:"pricing_group_values,omitempty"`
	PresentationGroupValues map[string]string `json:"presentation_group_values,omitempty"`
}

func (o *GetContractOverrideSpecifiers) GetProductID() *string {
	if o == nil {
		return nil
	}
	return o.ProductID
}

func (o *GetContractOverrideSpecifiers) GetProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ProductTags
}

func (o *GetContractOverrideSpecifiers) GetPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PricingGroupValues
}

func (o *GetContractOverrideSpecifiers) GetPresentationGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PresentationGroupValues
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataType string

const (
	GetContractContractsResponse200ApplicationJSONResponseBodyDataTypeOverwrite  GetContractContractsResponse200ApplicationJSONResponseBodyDataType = "OVERWRITE"
	GetContractContractsResponse200ApplicationJSONResponseBodyDataTypeMultiplier GetContractContractsResponse200ApplicationJSONResponseBodyDataType = "MULTIPLIER"
	GetContractContractsResponse200ApplicationJSONResponseBodyDataTypeTiered     GetContractContractsResponse200ApplicationJSONResponseBodyDataType = "TIERED"
)

func (e GetContractContractsResponse200ApplicationJSONResponseBodyDataType) ToPointer() *GetContractContractsResponse200ApplicationJSONResponseBodyDataType {
	return &e
}
func (e *GetContractContractsResponse200ApplicationJSONResponseBodyDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OVERWRITE":
		fallthrough
	case "MULTIPLIER":
		fallthrough
	case "TIERED":
		*e = GetContractContractsResponse200ApplicationJSONResponseBodyDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractContractsResponse200ApplicationJSONResponseBodyDataType: %v", v)
	}
}

type GetContractContractsResponse200ApplicationJSONResponseBodyRateType string

const (
	GetContractContractsResponse200ApplicationJSONResponseBodyRateTypeFlatUpper         GetContractContractsResponse200ApplicationJSONResponseBodyRateType = "FLAT"
	GetContractContractsResponse200ApplicationJSONResponseBodyRateTypeFlatLower         GetContractContractsResponse200ApplicationJSONResponseBodyRateType = "flat"
	GetContractContractsResponse200ApplicationJSONResponseBodyRateTypePercentageUpper   GetContractContractsResponse200ApplicationJSONResponseBodyRateType = "PERCENTAGE"
	GetContractContractsResponse200ApplicationJSONResponseBodyRateTypePercentageLower   GetContractContractsResponse200ApplicationJSONResponseBodyRateType = "percentage"
	GetContractContractsResponse200ApplicationJSONResponseBodyRateTypeSubscriptionUpper GetContractContractsResponse200ApplicationJSONResponseBodyRateType = "SUBSCRIPTION"
	GetContractContractsResponse200ApplicationJSONResponseBodyRateTypeSubscriptionLower GetContractContractsResponse200ApplicationJSONResponseBodyRateType = "subscription"
	GetContractContractsResponse200ApplicationJSONResponseBodyRateTypeTieredUpper       GetContractContractsResponse200ApplicationJSONResponseBodyRateType = "TIERED"
	GetContractContractsResponse200ApplicationJSONResponseBodyRateTypeTieredLower       GetContractContractsResponse200ApplicationJSONResponseBodyRateType = "tiered"
	GetContractContractsResponse200ApplicationJSONResponseBodyRateTypeCustomUpper       GetContractContractsResponse200ApplicationJSONResponseBodyRateType = "CUSTOM"
	GetContractContractsResponse200ApplicationJSONResponseBodyRateTypeCustomLower       GetContractContractsResponse200ApplicationJSONResponseBodyRateType = "custom"
)

func (e GetContractContractsResponse200ApplicationJSONResponseBodyRateType) ToPointer() *GetContractContractsResponse200ApplicationJSONResponseBodyRateType {
	return &e
}
func (e *GetContractContractsResponse200ApplicationJSONResponseBodyRateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FLAT":
		fallthrough
	case "flat":
		fallthrough
	case "PERCENTAGE":
		fallthrough
	case "percentage":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "subscription":
		fallthrough
	case "TIERED":
		fallthrough
	case "tiered":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "custom":
		*e = GetContractContractsResponse200ApplicationJSONResponseBodyRateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractContractsResponse200ApplicationJSONResponseBodyRateType: %v", v)
	}
}

type GetContractContractsResponse200ApplicationJSONResponseBodyTiers struct {
	Size  *float64 `json:"size,omitempty"`
	Price float64  `json:"price"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyTiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentOverridesCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentOverridesCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentOverridesCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractOverwriteRate struct {
	RateType GetContractContractsResponse200ApplicationJSONResponseBodyRateType `json:"rate_type"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price *float64 `json:"price,omitempty"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity *float64 `json:"quantity,omitempty"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type.
	IsProrated *bool `json:"is_prorated,omitempty"`
	// Only set for TIERED rate_type.
	Tiers []GetContractContractsResponse200ApplicationJSONResponseBodyTiers `json:"tiers,omitempty"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate processors.
	CustomRate map[string]any                                                                            `json:"custom_rate,omitempty"`
	CreditType *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentOverridesCreditType `json:"credit_type,omitempty"`
}

func (o *GetContractOverwriteRate) GetRateType() GetContractContractsResponse200ApplicationJSONResponseBodyRateType {
	if o == nil {
		return GetContractContractsResponse200ApplicationJSONResponseBodyRateType("")
	}
	return o.RateType
}

func (o *GetContractOverwriteRate) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *GetContractOverwriteRate) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *GetContractOverwriteRate) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *GetContractOverwriteRate) GetTiers() []GetContractContractsResponse200ApplicationJSONResponseBodyTiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *GetContractOverwriteRate) GetCustomRate() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomRate
}

func (o *GetContractOverwriteRate) GetCreditType() *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentOverridesCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

type GetContractOverrideTiers struct {
	Size       *float64 `json:"size,omitempty"`
	Multiplier float64  `json:"multiplier"`
}

func (o *GetContractOverrideTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *GetContractOverrideTiers) GetMultiplier() float64 {
	if o == nil {
		return 0.0
	}
	return o.Multiplier
}

type GetContractContractsRateType string

const (
	GetContractContractsRateTypeFlatUpper         GetContractContractsRateType = "FLAT"
	GetContractContractsRateTypeFlatLower         GetContractContractsRateType = "flat"
	GetContractContractsRateTypePercentageUpper   GetContractContractsRateType = "PERCENTAGE"
	GetContractContractsRateTypePercentageLower   GetContractContractsRateType = "percentage"
	GetContractContractsRateTypeSubscriptionUpper GetContractContractsRateType = "SUBSCRIPTION"
	GetContractContractsRateTypeSubscriptionLower GetContractContractsRateType = "subscription"
	GetContractContractsRateTypeTieredUpper       GetContractContractsRateType = "TIERED"
	GetContractContractsRateTypeTieredLower       GetContractContractsRateType = "tiered"
	GetContractContractsRateTypeCustomUpper       GetContractContractsRateType = "CUSTOM"
	GetContractContractsRateTypeCustomLower       GetContractContractsRateType = "custom"
)

func (e GetContractContractsRateType) ToPointer() *GetContractContractsRateType {
	return &e
}
func (e *GetContractContractsRateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FLAT":
		fallthrough
	case "flat":
		fallthrough
	case "PERCENTAGE":
		fallthrough
	case "percentage":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "subscription":
		fallthrough
	case "TIERED":
		fallthrough
	case "tiered":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "custom":
		*e = GetContractContractsRateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractContractsRateType: %v", v)
	}
}

type GetContractContractsTiers struct {
	Size  *float64 `json:"size,omitempty"`
	Price float64  `json:"price"`
}

func (o *GetContractContractsTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *GetContractContractsTiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type GetContractContractsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractContractsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractContractsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractOverrides struct {
	ID                    string                                                                 `json:"id"`
	Product               *GetContractContractsResponse200ApplicationJSONResponseBodyDataProduct `json:"product,omitempty"`
	ApplicableProductTags []string                                                               `json:"applicable_product_tags,omitempty"`
	OverrideSpecifiers    []GetContractOverrideSpecifiers                                        `json:"override_specifiers,omitempty"`
	StartingAt            time.Time                                                              `json:"starting_at"`
	EndingBefore          *time.Time                                                             `json:"ending_before,omitempty"`
	Entitled              *bool                                                                  `json:"entitled,omitempty"`
	Type                  *GetContractContractsResponse200ApplicationJSONResponseBodyDataType    `json:"type,omitempty"`
	Priority              *float64                                                               `json:"priority,omitempty"`
	Multiplier            *float64                                                               `json:"multiplier,omitempty"`
	OverwriteRate         *GetContractOverwriteRate                                              `json:"overwrite_rate,omitempty"`
	OverrideTiers         []GetContractOverrideTiers                                             `json:"override_tiers,omitempty"`
	RateType              *GetContractContractsRateType                                          `json:"rate_type,omitempty"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price *float64 `json:"price,omitempty"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity *float64 `json:"quantity,omitempty"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type.
	IsProrated *bool `json:"is_prorated,omitempty"`
	// Only set for TIERED rate_type.
	Tiers []GetContractContractsTiers `json:"tiers,omitempty"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate processors.
	Value      map[string]any                  `json:"value,omitempty"`
	CreditType *GetContractContractsCreditType `json:"credit_type,omitempty"`
}

func (g GetContractOverrides) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractOverrides) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractOverrides) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractOverrides) GetProduct() *GetContractContractsResponse200ApplicationJSONResponseBodyDataProduct {
	if o == nil {
		return nil
	}
	return o.Product
}

func (o *GetContractOverrides) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *GetContractOverrides) GetOverrideSpecifiers() []GetContractOverrideSpecifiers {
	if o == nil {
		return nil
	}
	return o.OverrideSpecifiers
}

func (o *GetContractOverrides) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *GetContractOverrides) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *GetContractOverrides) GetEntitled() *bool {
	if o == nil {
		return nil
	}
	return o.Entitled
}

func (o *GetContractOverrides) GetType() *GetContractContractsResponse200ApplicationJSONResponseBodyDataType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetContractOverrides) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *GetContractOverrides) GetMultiplier() *float64 {
	if o == nil {
		return nil
	}
	return o.Multiplier
}

func (o *GetContractOverrides) GetOverwriteRate() *GetContractOverwriteRate {
	if o == nil {
		return nil
	}
	return o.OverwriteRate
}

func (o *GetContractOverrides) GetOverrideTiers() []GetContractOverrideTiers {
	if o == nil {
		return nil
	}
	return o.OverrideTiers
}

func (o *GetContractOverrides) GetRateType() *GetContractContractsRateType {
	if o == nil {
		return nil
	}
	return o.RateType
}

func (o *GetContractOverrides) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *GetContractOverrides) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *GetContractOverrides) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *GetContractOverrides) GetTiers() []GetContractContractsTiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *GetContractOverrides) GetValue() map[string]any {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *GetContractOverrides) GetCreditType() *GetContractContractsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduleItems struct {
	ID        string    `json:"id"`
	InvoiceID string    `json:"invoice_id"`
	Amount    float64   `json:"amount"`
	UnitPrice float64   `json:"unit_price"`
	Quantity  float64   `json:"quantity"`
	Timestamp time.Time `json:"timestamp"`
}

func (g GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduleItems) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduleItems) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduleItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduleItems) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

type GetContractContractsSchedule struct {
	CreditType    *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsCreditType `json:"credit_type,omitempty"`
	ScheduleItems []GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduleItems      `json:"schedule_items,omitempty"`
}

func (o *GetContractContractsSchedule) GetCreditType() *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *GetContractContractsSchedule) GetScheduleItems() []GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduleItems {
	if o == nil {
		return nil
	}
	return o.ScheduleItems
}

type GetContractDiscounts struct {
	ID       string                                                                       `json:"id"`
	Product  GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentProduct `json:"product"`
	Schedule GetContractContractsSchedule                                                 `json:"schedule"`
	Name     *string                                                                      `json:"name,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
}

func (o *GetContractDiscounts) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractDiscounts) GetProduct() GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentProduct {
	if o == nil {
		return GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentProduct{}
	}
	return o.Product
}

func (o *GetContractDiscounts) GetSchedule() GetContractContractsSchedule {
	if o == nil {
		return GetContractContractsSchedule{}
	}
	return o.Schedule
}

func (o *GetContractDiscounts) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetContractDiscounts) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

type GetContractProfessionalServices struct {
	ID          string  `json:"id"`
	Description *string `json:"description,omitempty"`
	ProductID   string  `json:"product_id"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// Unit price for the charge. Will be multiplied by quantity to determine the amount and must be specified.
	UnitPrice float64 `json:"unit_price"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the amount.
	Quantity float64 `json:"quantity"`
	// Maximum amount for the term.
	MaxAmount    float64           `json:"max_amount"`
	CustomFields map[string]string `json:"custom_fields,omitempty"`
}

func (o *GetContractProfessionalServices) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractProfessionalServices) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetContractProfessionalServices) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *GetContractProfessionalServices) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *GetContractProfessionalServices) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *GetContractProfessionalServices) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *GetContractProfessionalServices) GetMaxAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.MaxAmount
}

func (o *GetContractProfessionalServices) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems struct {
	ID        string    `json:"id"`
	InvoiceID string    `json:"invoice_id"`
	Amount    float64   `json:"amount"`
	UnitPrice float64   `json:"unit_price"`
	Quantity  float64   `json:"quantity"`
	Timestamp time.Time `json:"timestamp"`
}

func (g GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

type GetContractContractsResponseSchedule struct {
	CreditType    *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesCreditType     `json:"credit_type,omitempty"`
	ScheduleItems []GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems `json:"schedule_items,omitempty"`
}

func (o *GetContractContractsResponseSchedule) GetCreditType() *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *GetContractContractsResponseSchedule) GetScheduleItems() []GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems {
	if o == nil {
		return nil
	}
	return o.ScheduleItems
}

type GetContractScheduledCharges struct {
	ID       string                                                                                       `json:"id"`
	Product  GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesProduct `json:"product"`
	Schedule GetContractContractsResponseSchedule                                                         `json:"schedule"`
	// displayed on invoices
	Name *string `json:"name,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string           `json:"netsuite_sales_order_id,omitempty"`
	CustomFields         map[string]string `json:"custom_fields,omitempty"`
}

func (o *GetContractScheduledCharges) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractScheduledCharges) GetProduct() GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesProduct {
	if o == nil {
		return GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesProduct{}
	}
	return o.Product
}

func (o *GetContractScheduledCharges) GetSchedule() GetContractContractsResponseSchedule {
	if o == nil {
		return GetContractContractsResponseSchedule{}
	}
	return o.Schedule
}

func (o *GetContractScheduledCharges) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetContractScheduledCharges) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *GetContractScheduledCharges) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentType string

const (
	GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentTypeSupersede GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentType = "SUPERSEDE"
	GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentTypeRenewal   GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentType = "RENEWAL"
)

func (e GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentType) ToPointer() *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentType {
	return &e
}
func (e *GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SUPERSEDE":
		fallthrough
	case "RENEWAL":
		*e = GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentType: %v", v)
	}
}

type GetContractTransitions struct {
	Type           GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentType `json:"type"`
	FromContractID string                                                                    `json:"from_contract_id"`
	ToContractID   string                                                                    `json:"to_contract_id"`
}

func (o *GetContractTransitions) GetType() GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentType {
	if o == nil {
		return GetContractContractsResponse200ApplicationJSONResponseBodyDataCurrentType("")
	}
	return o.Type
}

func (o *GetContractTransitions) GetFromContractID() string {
	if o == nil {
		return ""
	}
	return o.FromContractID
}

func (o *GetContractTransitions) GetToContractID() string {
	if o == nil {
		return ""
	}
	return o.ToContractID
}

type GetContractResellerType string

const (
	GetContractResellerTypeAws           GetContractResellerType = "AWS"
	GetContractResellerTypeAwsProService GetContractResellerType = "AWS_PRO_SERVICE"
	GetContractResellerTypeGcp           GetContractResellerType = "GCP"
	GetContractResellerTypeGcpProService GetContractResellerType = "GCP_PRO_SERVICE"
)

func (e GetContractResellerType) ToPointer() *GetContractResellerType {
	return &e
}
func (e *GetContractResellerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWS":
		fallthrough
	case "AWS_PRO_SERVICE":
		fallthrough
	case "GCP":
		fallthrough
	case "GCP_PRO_SERVICE":
		*e = GetContractResellerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractResellerType: %v", v)
	}
}

type GetContractResellerRoyalties struct {
	ResellerType          GetContractResellerType `json:"reseller_type"`
	Fraction              float64                 `json:"fraction"`
	ApplicableProductTags []string                `json:"applicable_product_tags,omitempty"`
	ApplicableProductIds  []string                `json:"applicable_product_ids,omitempty"`
	NetsuiteResellerID    string                  `json:"netsuite_reseller_id"`
	StartingAt            time.Time               `json:"starting_at"`
	EndingBefore          *time.Time              `json:"ending_before,omitempty"`
	ResellerContractValue *float64                `json:"reseller_contract_value,omitempty"`
	AwsAccountNumber      *string                 `json:"aws_account_number,omitempty"`
	AwsPayerReferenceID   *string                 `json:"aws_payer_reference_id,omitempty"`
	AwsOfferID            *string                 `json:"aws_offer_id,omitempty"`
	GcpAccountID          *string                 `json:"gcp_account_id,omitempty"`
	GcpOfferID            *string                 `json:"gcp_offer_id,omitempty"`
}

func (g GetContractResellerRoyalties) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractResellerRoyalties) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractResellerRoyalties) GetResellerType() GetContractResellerType {
	if o == nil {
		return GetContractResellerType("")
	}
	return o.ResellerType
}

func (o *GetContractResellerRoyalties) GetFraction() float64 {
	if o == nil {
		return 0.0
	}
	return o.Fraction
}

func (o *GetContractResellerRoyalties) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *GetContractResellerRoyalties) GetApplicableProductIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductIds
}

func (o *GetContractResellerRoyalties) GetNetsuiteResellerID() string {
	if o == nil {
		return ""
	}
	return o.NetsuiteResellerID
}

func (o *GetContractResellerRoyalties) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *GetContractResellerRoyalties) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *GetContractResellerRoyalties) GetResellerContractValue() *float64 {
	if o == nil {
		return nil
	}
	return o.ResellerContractValue
}

func (o *GetContractResellerRoyalties) GetAwsAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.AwsAccountNumber
}

func (o *GetContractResellerRoyalties) GetAwsPayerReferenceID() *string {
	if o == nil {
		return nil
	}
	return o.AwsPayerReferenceID
}

func (o *GetContractResellerRoyalties) GetAwsOfferID() *string {
	if o == nil {
		return nil
	}
	return o.AwsOfferID
}

func (o *GetContractResellerRoyalties) GetGcpAccountID() *string {
	if o == nil {
		return nil
	}
	return o.GcpAccountID
}

func (o *GetContractResellerRoyalties) GetGcpOfferID() *string {
	if o == nil {
		return nil
	}
	return o.GcpOfferID
}

type GetContractContractsResponseInitial struct {
	GroupKey    string     `json:"group_key"`
	GroupValues []string   `json:"group_values"`
	StartingAt  *time.Time `json:"starting_at,omitempty"`
}

func (g GetContractContractsResponseInitial) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsResponseInitial) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsResponseInitial) GetGroupKey() string {
	if o == nil {
		return ""
	}
	return o.GroupKey
}

func (o *GetContractContractsResponseInitial) GetGroupValues() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupValues
}

func (o *GetContractContractsResponseInitial) GetStartingAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartingAt
}

type GetContractContractsCurrent struct {
	GroupKey    string     `json:"group_key"`
	GroupValues []string   `json:"group_values"`
	StartingAt  *time.Time `json:"starting_at,omitempty"`
}

func (g GetContractContractsCurrent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsCurrent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsCurrent) GetGroupKey() string {
	if o == nil {
		return ""
	}
	return o.GroupKey
}

func (o *GetContractContractsCurrent) GetGroupValues() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupValues
}

func (o *GetContractContractsCurrent) GetStartingAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartingAt
}

type GetContractContractsUpdates struct {
	GroupKey    string    `json:"group_key"`
	GroupValues []string  `json:"group_values"`
	StartingAt  time.Time `json:"starting_at"`
}

func (g GetContractContractsUpdates) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsUpdates) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsUpdates) GetGroupKey() string {
	if o == nil {
		return ""
	}
	return o.GroupKey
}

func (o *GetContractContractsUpdates) GetGroupValues() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupValues
}

func (o *GetContractContractsUpdates) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

type GetContractUsageFilter struct {
	Initial GetContractContractsResponseInitial `json:"initial"`
	Current *GetContractContractsCurrent        `json:"current"`
	Updates []GetContractContractsUpdates       `json:"updates"`
}

func (o *GetContractUsageFilter) GetInitial() GetContractContractsResponseInitial {
	if o == nil {
		return GetContractContractsResponseInitial{}
	}
	return o.Initial
}

func (o *GetContractUsageFilter) GetCurrent() *GetContractContractsCurrent {
	if o == nil {
		return nil
	}
	return o.Current
}

func (o *GetContractUsageFilter) GetUpdates() []GetContractContractsUpdates {
	if o == nil {
		return []GetContractContractsUpdates{}
	}
	return o.Updates
}

type GetContractFrequency string

const (
	GetContractFrequencyMonthlyUpper   GetContractFrequency = "MONTHLY"
	GetContractFrequencyMonthlyLower   GetContractFrequency = "monthly"
	GetContractFrequencyQuarterlyUpper GetContractFrequency = "QUARTERLY"
	GetContractFrequencyQuarterlyLower GetContractFrequency = "quarterly"
)

func (e GetContractFrequency) ToPointer() *GetContractFrequency {
	return &e
}
func (e *GetContractFrequency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MONTHLY":
		fallthrough
	case "monthly":
		fallthrough
	case "QUARTERLY":
		fallthrough
	case "quarterly":
		*e = GetContractFrequency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractFrequency: %v", v)
	}
}

type GetContractUsageStatementSchedule struct {
	Frequency GetContractFrequency `json:"frequency"`
}

func (o *GetContractUsageStatementSchedule) GetFrequency() GetContractFrequency {
	if o == nil {
		return GetContractFrequency("")
	}
	return o.Frequency
}

type GetContractCurrent struct {
	Name *string `json:"name,omitempty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string                `json:"salesforce_opportunity_id,omitempty"`
	RateCardID              *string                `json:"rate_card_id,omitempty"`
	StartingAt              time.Time              `json:"starting_at"`
	Commits                 []GetContractCommits   `json:"commits"`
	Credits                 []GetContractCredits   `json:"credits,omitempty"`
	Overrides               []GetContractOverrides `json:"overrides"`
	// This field's availability is dependent on your client's configuration.
	Discounts []GetContractDiscounts `json:"discounts,omitempty"`
	// This field's availability is dependent on your client's configuration.
	ProfessionalServices []GetContractProfessionalServices `json:"professional_services,omitempty"`
	ScheduledCharges     []GetContractScheduledCharges     `json:"scheduled_charges"`
	Transitions          []GetContractTransitions          `json:"transitions"`
	// This field's availability is dependent on your client's configuration.
	ResellerRoyalties []GetContractResellerRoyalties `json:"reseller_royalties,omitempty"`
	CreatedAt         time.Time                      `json:"created_at"`
	CreatedBy         string                         `json:"created_by"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string    `json:"netsuite_sales_order_id,omitempty"`
	NetPaymentTermsDays  *float64   `json:"net_payment_terms_days,omitempty"`
	EndingBefore         *time.Time `json:"ending_before,omitempty"`
	// This field's availability is dependent on your client's configuration.
	TotalContractValue     *float64                          `json:"total_contract_value,omitempty"`
	UsageFilter            *GetContractUsageFilter           `json:"usage_filter,omitempty"`
	UsageStatementSchedule GetContractUsageStatementSchedule `json:"usage_statement_schedule"`
}

func (g GetContractCurrent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractCurrent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractCurrent) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetContractCurrent) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *GetContractCurrent) GetRateCardID() *string {
	if o == nil {
		return nil
	}
	return o.RateCardID
}

func (o *GetContractCurrent) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *GetContractCurrent) GetCommits() []GetContractCommits {
	if o == nil {
		return []GetContractCommits{}
	}
	return o.Commits
}

func (o *GetContractCurrent) GetCredits() []GetContractCredits {
	if o == nil {
		return nil
	}
	return o.Credits
}

func (o *GetContractCurrent) GetOverrides() []GetContractOverrides {
	if o == nil {
		return []GetContractOverrides{}
	}
	return o.Overrides
}

func (o *GetContractCurrent) GetDiscounts() []GetContractDiscounts {
	if o == nil {
		return nil
	}
	return o.Discounts
}

func (o *GetContractCurrent) GetProfessionalServices() []GetContractProfessionalServices {
	if o == nil {
		return nil
	}
	return o.ProfessionalServices
}

func (o *GetContractCurrent) GetScheduledCharges() []GetContractScheduledCharges {
	if o == nil {
		return []GetContractScheduledCharges{}
	}
	return o.ScheduledCharges
}

func (o *GetContractCurrent) GetTransitions() []GetContractTransitions {
	if o == nil {
		return []GetContractTransitions{}
	}
	return o.Transitions
}

func (o *GetContractCurrent) GetResellerRoyalties() []GetContractResellerRoyalties {
	if o == nil {
		return nil
	}
	return o.ResellerRoyalties
}

func (o *GetContractCurrent) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *GetContractCurrent) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *GetContractCurrent) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *GetContractCurrent) GetNetPaymentTermsDays() *float64 {
	if o == nil {
		return nil
	}
	return o.NetPaymentTermsDays
}

func (o *GetContractCurrent) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *GetContractCurrent) GetTotalContractValue() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalContractValue
}

func (o *GetContractCurrent) GetUsageFilter() *GetContractUsageFilter {
	if o == nil {
		return nil
	}
	return o.UsageFilter
}

func (o *GetContractCurrent) GetUsageStatementSchedule() GetContractUsageStatementSchedule {
	if o == nil {
		return GetContractUsageStatementSchedule{}
	}
	return o.UsageStatementSchedule
}

type GetContractContractsResponse200Contract struct {
	ID string `json:"id"`
}

func (o *GetContractContractsResponse200Contract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType string

const (
	GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsTypePrepaid  GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType = "PREPAID"
	GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsTypePostpaid GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType = "POSTPAID"
)

func (e GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType) ToPointer() *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType {
	return &e
}
func (e *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID":
		fallthrough
	case "POSTPAID":
		*e = GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType: %v", v)
	}
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduleItems struct {
	ID           string    `json:"id"`
	Amount       float64   `json:"amount"`
	StartingAt   time.Time `json:"starting_at"`
	EndingBefore time.Time `json:"ending_before"`
}

func (g GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduleItems) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduleItems) GetEndingBefore() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndingBefore
}

// GetContractContractsResponse200AccessSchedule - The schedule that the customer will gain access to the credits purposed with this commit.
type GetContractContractsResponse200AccessSchedule struct {
	CreditType    *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditType     `json:"credit_type,omitempty"`
	ScheduleItems []GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduleItems `json:"schedule_items"`
}

func (o *GetContractContractsResponse200AccessSchedule) GetCreditType() *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *GetContractContractsResponse200AccessSchedule) GetScheduleItems() []GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduleItems {
	if o == nil {
		return []GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduleItems{}
	}
	return o.ScheduleItems
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsScheduleItems struct {
	ID        string    `json:"id"`
	InvoiceID string    `json:"invoice_id"`
	Amount    float64   `json:"amount"`
	UnitPrice float64   `json:"unit_price"`
	Quantity  float64   `json:"quantity"`
	Timestamp time.Time `json:"timestamp"`
}

func (g GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsScheduleItems) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsScheduleItems) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsScheduleItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsScheduleItems) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

// GetContractContractsInvoiceSchedule - The schedule that the customer will be invoiced for this commit.
type GetContractContractsInvoiceSchedule struct {
	CreditType    *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsCreditType     `json:"credit_type,omitempty"`
	ScheduleItems []GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsScheduleItems `json:"schedule_items,omitempty"`
}

func (o *GetContractContractsInvoiceSchedule) GetCreditType() *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *GetContractContractsInvoiceSchedule) GetScheduleItems() []GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsScheduleItems {
	if o == nil {
		return nil
	}
	return o.ScheduleItems
}

// GetContractContractsInvoiceContract - The contract that this commit will be billed on.
type GetContractContractsInvoiceContract struct {
	ID string `json:"id"`
}

func (o *GetContractContractsInvoiceContract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsRolledOverFrom struct {
	CommitID   string `json:"commit_id"`
	ContractID string `json:"contract_id"`
}

func (o *GetContractContractsRolledOverFrom) GetCommitID() string {
	if o == nil {
		return ""
	}
	return o.CommitID
}

func (o *GetContractContractsRolledOverFrom) GetContractID() string {
	if o == nil {
		return ""
	}
	return o.ContractID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits13Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits13TypePostpaidCommitExpiration GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits13Type = "POSTPAID_COMMIT_EXPIRATION"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits13Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits13Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits13Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_EXPIRATION":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits13Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits13Type: %v", v)
	}
}

type GetContractLedger13 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits13Type `json:"type"`
	Timestamp time.Time                                                                                   `json:"timestamp"`
	Amount    float64                                                                                     `json:"amount"`
}

func (g GetContractLedger13) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedger13) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedger13) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits13Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits13Type("")
	}
	return o.Type
}

func (o *GetContractLedger13) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedger13) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits12Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits12TypePostpaidCommitManual GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits12Type = "POSTPAID_COMMIT_MANUAL"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits12Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits12Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_MANUAL":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits12Type: %v", v)
	}
}

type GetContractLedger12 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits12Type `json:"type"`
	Timestamp time.Time                                                                                   `json:"timestamp"`
	Amount    float64                                                                                     `json:"amount"`
	Reason    string                                                                                      `json:"reason"`
}

func (g GetContractLedger12) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedger12) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedger12) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits12Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits12Type("")
	}
	return o.Type
}

func (o *GetContractLedger12) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedger12) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedger12) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits11Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits11TypePrepaidCommitManual GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits11Type = "PREPAID_COMMIT_MANUAL"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits11Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits11Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_MANUAL":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits11Type: %v", v)
	}
}

type GetContractLedger11 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits11Type `json:"type"`
	Timestamp time.Time                                                                                   `json:"timestamp"`
	Amount    float64                                                                                     `json:"amount"`
	Reason    string                                                                                      `json:"reason"`
}

func (g GetContractLedger11) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedger11) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedger11) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits11Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits11Type("")
	}
	return o.Type
}

func (o *GetContractLedger11) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedger11) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedger11) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits10Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits10TypePostpaidCommitTrueup GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits10Type = "POSTPAID_COMMIT_TRUEUP"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits10Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits10Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_TRUEUP":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits10Type: %v", v)
	}
}

type GetContractLedger10 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits10Type `json:"type"`
	Timestamp time.Time                                                                                   `json:"timestamp"`
	Amount    float64                                                                                     `json:"amount"`
	InvoiceID string                                                                                      `json:"invoice_id"`
}

func (g GetContractLedger10) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedger10) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedger10) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits10Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits10Type("")
	}
	return o.Type
}

func (o *GetContractLedger10) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedger10) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedger10) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits9Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits9TypePostpaidCommitRollover GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits9Type = "POSTPAID_COMMIT_ROLLOVER"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits9Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits9Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_ROLLOVER":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits9Type: %v", v)
	}
}

type GetContractLedger9 struct {
	Type          GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits9Type `json:"type"`
	Timestamp     time.Time                                                                                  `json:"timestamp"`
	Amount        float64                                                                                    `json:"amount"`
	SegmentID     string                                                                                     `json:"segment_id"`
	NewContractID string                                                                                     `json:"new_contract_id"`
}

func (g GetContractLedger9) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedger9) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedger9) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits9Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits9Type("")
	}
	return o.Type
}

func (o *GetContractLedger9) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedger9) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedger9) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedger9) GetNewContractID() string {
	if o == nil {
		return ""
	}
	return o.NewContractID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits8Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits8TypePostpaidCommitAutomatedInvoiceDeduction GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits8Type = "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits8Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits8Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits8Type: %v", v)
	}
}

type GetContractLedger8 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits8Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
	SegmentID string                                                                                     `json:"segment_id"`
	InvoiceID string                                                                                     `json:"invoice_id"`
}

func (g GetContractLedger8) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedger8) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedger8) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits8Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits8Type("")
	}
	return o.Type
}

func (o *GetContractLedger8) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedger8) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedger8) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedger8) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits7Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits7TypePostpaidCommitInitialBalance GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits7Type = "POSTPAID_COMMIT_INITIAL_BALANCE"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits7Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits7Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_INITIAL_BALANCE":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits7Type: %v", v)
	}
}

type GetContractLedger7 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits7Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
}

func (g GetContractLedger7) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedger7) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedger7) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits7Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits7Type("")
	}
	return o.Type
}

func (o *GetContractLedger7) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedger7) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits6Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits6TypePrepaidCommitCredited GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits6Type = "PREPAID_COMMIT_CREDITED"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits6Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits6Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_CREDITED":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits6Type: %v", v)
	}
}

type GetContractLedgerContractsResponse6 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits6Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
	SegmentID string                                                                                     `json:"segment_id"`
	InvoiceID string                                                                                     `json:"invoice_id"`
}

func (g GetContractLedgerContractsResponse6) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse6) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse6) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits6Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits6Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse6) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse6) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse6) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedgerContractsResponse6) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits5Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits5TypePrepaidCommitCanceled GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits5Type = "PREPAID_COMMIT_CANCELED"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits5Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits5Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_CANCELED":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits5Type: %v", v)
	}
}

type GetContractLedgerContractsResponse5 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits5Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
	SegmentID string                                                                                     `json:"segment_id"`
	InvoiceID string                                                                                     `json:"invoice_id"`
}

func (g GetContractLedgerContractsResponse5) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse5) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse5) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits5Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits5Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse5) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse5) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse5) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedgerContractsResponse5) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits4Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits4TypePrepaidCommitExpiration GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits4Type = "PREPAID_COMMIT_EXPIRATION"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits4Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits4Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_EXPIRATION":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits4Type: %v", v)
	}
}

type GetContractLedgerContractsResponse4 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits4Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
	SegmentID string                                                                                     `json:"segment_id"`
}

func (g GetContractLedgerContractsResponse4) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse4) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse4) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits4Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits4Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse4) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse4) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse4) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits3Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits3TypePrepaidCommitRollover GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits3Type = "PREPAID_COMMIT_ROLLOVER"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits3Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits3Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_ROLLOVER":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits3Type: %v", v)
	}
}

type GetContractLedgerContractsResponse3 struct {
	Type          GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits3Type `json:"type"`
	Timestamp     time.Time                                                                                  `json:"timestamp"`
	Amount        float64                                                                                    `json:"amount"`
	SegmentID     string                                                                                     `json:"segment_id"`
	NewContractID string                                                                                     `json:"new_contract_id"`
}

func (g GetContractLedgerContractsResponse3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse3) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits3Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits3Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse3) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse3) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse3) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedgerContractsResponse3) GetNewContractID() string {
	if o == nil {
		return ""
	}
	return o.NewContractID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsType string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsTypePrepaidCommitAutomatedInvoiceDeduction GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsType = "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsType) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsType {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsType: %v", v)
	}
}

type GetContractLedgerContractsResponse2 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsType `json:"type"`
	Timestamp time.Time                                                                                 `json:"timestamp"`
	Amount    float64                                                                                   `json:"amount"`
	SegmentID string                                                                                    `json:"segment_id"`
	InvoiceID string                                                                                    `json:"invoice_id"`
}

func (g GetContractLedgerContractsResponse2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse2) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsType {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsType("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse2) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse2) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse2) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedgerContractsResponse2) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsTypePrepaidCommitSegmentStart GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType = "PREPAID_COMMIT_SEGMENT_START"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_SEGMENT_START":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType: %v", v)
	}
}

type GetContractLedgerContractsResponse1 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType `json:"type"`
	Timestamp time.Time                                                                          `json:"timestamp"`
	Amount    float64                                                                            `json:"amount"`
	SegmentID string                                                                             `json:"segment_id"`
}

func (g GetContractLedgerContractsResponse1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse1) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse1) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse1) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse1) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type GetContractContractsResponse200LedgerType string

const (
	GetContractContractsResponse200LedgerTypeGetContractLedgerContractsResponse1 GetContractContractsResponse200LedgerType = "getContract_ledger_Contracts_response_1"
	GetContractContractsResponse200LedgerTypeGetContractLedgerContractsResponse2 GetContractContractsResponse200LedgerType = "getContract_ledger_Contracts_response_2"
	GetContractContractsResponse200LedgerTypeGetContractLedgerContractsResponse3 GetContractContractsResponse200LedgerType = "getContract_ledger_Contracts_response_3"
	GetContractContractsResponse200LedgerTypeGetContractLedgerContractsResponse4 GetContractContractsResponse200LedgerType = "getContract_ledger_Contracts_response_4"
	GetContractContractsResponse200LedgerTypeGetContractLedgerContractsResponse5 GetContractContractsResponse200LedgerType = "getContract_ledger_Contracts_response_5"
	GetContractContractsResponse200LedgerTypeGetContractLedgerContractsResponse6 GetContractContractsResponse200LedgerType = "getContract_ledger_Contracts_response_6"
	GetContractContractsResponse200LedgerTypeGetContractLedger7                  GetContractContractsResponse200LedgerType = "getContract_ledger_7"
	GetContractContractsResponse200LedgerTypeGetContractLedger8                  GetContractContractsResponse200LedgerType = "getContract_ledger_8"
	GetContractContractsResponse200LedgerTypeGetContractLedger9                  GetContractContractsResponse200LedgerType = "getContract_ledger_9"
	GetContractContractsResponse200LedgerTypeGetContractLedger10                 GetContractContractsResponse200LedgerType = "getContract_ledger_10"
	GetContractContractsResponse200LedgerTypeGetContractLedger11                 GetContractContractsResponse200LedgerType = "getContract_ledger_11"
	GetContractContractsResponse200LedgerTypeGetContractLedger12                 GetContractContractsResponse200LedgerType = "getContract_ledger_12"
	GetContractContractsResponse200LedgerTypeGetContractLedger13                 GetContractContractsResponse200LedgerType = "getContract_ledger_13"
)

type GetContractContractsResponse200Ledger struct {
	GetContractLedgerContractsResponse1 *GetContractLedgerContractsResponse1
	GetContractLedgerContractsResponse2 *GetContractLedgerContractsResponse2
	GetContractLedgerContractsResponse3 *GetContractLedgerContractsResponse3
	GetContractLedgerContractsResponse4 *GetContractLedgerContractsResponse4
	GetContractLedgerContractsResponse5 *GetContractLedgerContractsResponse5
	GetContractLedgerContractsResponse6 *GetContractLedgerContractsResponse6
	GetContractLedger7                  *GetContractLedger7
	GetContractLedger8                  *GetContractLedger8
	GetContractLedger9                  *GetContractLedger9
	GetContractLedger10                 *GetContractLedger10
	GetContractLedger11                 *GetContractLedger11
	GetContractLedger12                 *GetContractLedger12
	GetContractLedger13                 *GetContractLedger13

	Type GetContractContractsResponse200LedgerType
}

func CreateGetContractContractsResponse200LedgerGetContractLedgerContractsResponse1(getContractLedgerContractsResponse1 GetContractLedgerContractsResponse1) GetContractContractsResponse200Ledger {
	typ := GetContractContractsResponse200LedgerTypeGetContractLedgerContractsResponse1

	return GetContractContractsResponse200Ledger{
		GetContractLedgerContractsResponse1: &getContractLedgerContractsResponse1,
		Type:                                typ,
	}
}

func CreateGetContractContractsResponse200LedgerGetContractLedgerContractsResponse2(getContractLedgerContractsResponse2 GetContractLedgerContractsResponse2) GetContractContractsResponse200Ledger {
	typ := GetContractContractsResponse200LedgerTypeGetContractLedgerContractsResponse2

	return GetContractContractsResponse200Ledger{
		GetContractLedgerContractsResponse2: &getContractLedgerContractsResponse2,
		Type:                                typ,
	}
}

func CreateGetContractContractsResponse200LedgerGetContractLedgerContractsResponse3(getContractLedgerContractsResponse3 GetContractLedgerContractsResponse3) GetContractContractsResponse200Ledger {
	typ := GetContractContractsResponse200LedgerTypeGetContractLedgerContractsResponse3

	return GetContractContractsResponse200Ledger{
		GetContractLedgerContractsResponse3: &getContractLedgerContractsResponse3,
		Type:                                typ,
	}
}

func CreateGetContractContractsResponse200LedgerGetContractLedgerContractsResponse4(getContractLedgerContractsResponse4 GetContractLedgerContractsResponse4) GetContractContractsResponse200Ledger {
	typ := GetContractContractsResponse200LedgerTypeGetContractLedgerContractsResponse4

	return GetContractContractsResponse200Ledger{
		GetContractLedgerContractsResponse4: &getContractLedgerContractsResponse4,
		Type:                                typ,
	}
}

func CreateGetContractContractsResponse200LedgerGetContractLedgerContractsResponse5(getContractLedgerContractsResponse5 GetContractLedgerContractsResponse5) GetContractContractsResponse200Ledger {
	typ := GetContractContractsResponse200LedgerTypeGetContractLedgerContractsResponse5

	return GetContractContractsResponse200Ledger{
		GetContractLedgerContractsResponse5: &getContractLedgerContractsResponse5,
		Type:                                typ,
	}
}

func CreateGetContractContractsResponse200LedgerGetContractLedgerContractsResponse6(getContractLedgerContractsResponse6 GetContractLedgerContractsResponse6) GetContractContractsResponse200Ledger {
	typ := GetContractContractsResponse200LedgerTypeGetContractLedgerContractsResponse6

	return GetContractContractsResponse200Ledger{
		GetContractLedgerContractsResponse6: &getContractLedgerContractsResponse6,
		Type:                                typ,
	}
}

func CreateGetContractContractsResponse200LedgerGetContractLedger7(getContractLedger7 GetContractLedger7) GetContractContractsResponse200Ledger {
	typ := GetContractContractsResponse200LedgerTypeGetContractLedger7

	return GetContractContractsResponse200Ledger{
		GetContractLedger7: &getContractLedger7,
		Type:               typ,
	}
}

func CreateGetContractContractsResponse200LedgerGetContractLedger8(getContractLedger8 GetContractLedger8) GetContractContractsResponse200Ledger {
	typ := GetContractContractsResponse200LedgerTypeGetContractLedger8

	return GetContractContractsResponse200Ledger{
		GetContractLedger8: &getContractLedger8,
		Type:               typ,
	}
}

func CreateGetContractContractsResponse200LedgerGetContractLedger9(getContractLedger9 GetContractLedger9) GetContractContractsResponse200Ledger {
	typ := GetContractContractsResponse200LedgerTypeGetContractLedger9

	return GetContractContractsResponse200Ledger{
		GetContractLedger9: &getContractLedger9,
		Type:               typ,
	}
}

func CreateGetContractContractsResponse200LedgerGetContractLedger10(getContractLedger10 GetContractLedger10) GetContractContractsResponse200Ledger {
	typ := GetContractContractsResponse200LedgerTypeGetContractLedger10

	return GetContractContractsResponse200Ledger{
		GetContractLedger10: &getContractLedger10,
		Type:                typ,
	}
}

func CreateGetContractContractsResponse200LedgerGetContractLedger11(getContractLedger11 GetContractLedger11) GetContractContractsResponse200Ledger {
	typ := GetContractContractsResponse200LedgerTypeGetContractLedger11

	return GetContractContractsResponse200Ledger{
		GetContractLedger11: &getContractLedger11,
		Type:                typ,
	}
}

func CreateGetContractContractsResponse200LedgerGetContractLedger12(getContractLedger12 GetContractLedger12) GetContractContractsResponse200Ledger {
	typ := GetContractContractsResponse200LedgerTypeGetContractLedger12

	return GetContractContractsResponse200Ledger{
		GetContractLedger12: &getContractLedger12,
		Type:                typ,
	}
}

func CreateGetContractContractsResponse200LedgerGetContractLedger13(getContractLedger13 GetContractLedger13) GetContractContractsResponse200Ledger {
	typ := GetContractContractsResponse200LedgerTypeGetContractLedger13

	return GetContractContractsResponse200Ledger{
		GetContractLedger13: &getContractLedger13,
		Type:                typ,
	}
}

func (u *GetContractContractsResponse200Ledger) UnmarshalJSON(data []byte) error {

	var getContractLedger7 GetContractLedger7 = GetContractLedger7{}
	if err := utils.UnmarshalJSON(data, &getContractLedger7, "", true, true); err == nil {
		u.GetContractLedger7 = &getContractLedger7
		u.Type = GetContractContractsResponse200LedgerTypeGetContractLedger7
		return nil
	}

	var getContractLedger13 GetContractLedger13 = GetContractLedger13{}
	if err := utils.UnmarshalJSON(data, &getContractLedger13, "", true, true); err == nil {
		u.GetContractLedger13 = &getContractLedger13
		u.Type = GetContractContractsResponse200LedgerTypeGetContractLedger13
		return nil
	}

	var getContractLedgerContractsResponse4 GetContractLedgerContractsResponse4 = GetContractLedgerContractsResponse4{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse4, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse4 = &getContractLedgerContractsResponse4
		u.Type = GetContractContractsResponse200LedgerTypeGetContractLedgerContractsResponse4
		return nil
	}

	var getContractLedgerContractsResponse1 GetContractLedgerContractsResponse1 = GetContractLedgerContractsResponse1{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse1, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse1 = &getContractLedgerContractsResponse1
		u.Type = GetContractContractsResponse200LedgerTypeGetContractLedgerContractsResponse1
		return nil
	}

	var getContractLedger10 GetContractLedger10 = GetContractLedger10{}
	if err := utils.UnmarshalJSON(data, &getContractLedger10, "", true, true); err == nil {
		u.GetContractLedger10 = &getContractLedger10
		u.Type = GetContractContractsResponse200LedgerTypeGetContractLedger10
		return nil
	}

	var getContractLedger11 GetContractLedger11 = GetContractLedger11{}
	if err := utils.UnmarshalJSON(data, &getContractLedger11, "", true, true); err == nil {
		u.GetContractLedger11 = &getContractLedger11
		u.Type = GetContractContractsResponse200LedgerTypeGetContractLedger11
		return nil
	}

	var getContractLedger12 GetContractLedger12 = GetContractLedger12{}
	if err := utils.UnmarshalJSON(data, &getContractLedger12, "", true, true); err == nil {
		u.GetContractLedger12 = &getContractLedger12
		u.Type = GetContractContractsResponse200LedgerTypeGetContractLedger12
		return nil
	}

	var getContractLedgerContractsResponse5 GetContractLedgerContractsResponse5 = GetContractLedgerContractsResponse5{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse5, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse5 = &getContractLedgerContractsResponse5
		u.Type = GetContractContractsResponse200LedgerTypeGetContractLedgerContractsResponse5
		return nil
	}

	var getContractLedgerContractsResponse6 GetContractLedgerContractsResponse6 = GetContractLedgerContractsResponse6{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse6, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse6 = &getContractLedgerContractsResponse6
		u.Type = GetContractContractsResponse200LedgerTypeGetContractLedgerContractsResponse6
		return nil
	}

	var getContractLedgerContractsResponse3 GetContractLedgerContractsResponse3 = GetContractLedgerContractsResponse3{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse3, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse3 = &getContractLedgerContractsResponse3
		u.Type = GetContractContractsResponse200LedgerTypeGetContractLedgerContractsResponse3
		return nil
	}

	var getContractLedger8 GetContractLedger8 = GetContractLedger8{}
	if err := utils.UnmarshalJSON(data, &getContractLedger8, "", true, true); err == nil {
		u.GetContractLedger8 = &getContractLedger8
		u.Type = GetContractContractsResponse200LedgerTypeGetContractLedger8
		return nil
	}

	var getContractLedger9 GetContractLedger9 = GetContractLedger9{}
	if err := utils.UnmarshalJSON(data, &getContractLedger9, "", true, true); err == nil {
		u.GetContractLedger9 = &getContractLedger9
		u.Type = GetContractContractsResponse200LedgerTypeGetContractLedger9
		return nil
	}

	var getContractLedgerContractsResponse2 GetContractLedgerContractsResponse2 = GetContractLedgerContractsResponse2{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse2, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse2 = &getContractLedgerContractsResponse2
		u.Type = GetContractContractsResponse200LedgerTypeGetContractLedgerContractsResponse2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetContractContractsResponse200Ledger", string(data))
}

func (u GetContractContractsResponse200Ledger) MarshalJSON() ([]byte, error) {
	if u.GetContractLedgerContractsResponse1 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse1, "", true)
	}

	if u.GetContractLedgerContractsResponse2 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse2, "", true)
	}

	if u.GetContractLedgerContractsResponse3 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse3, "", true)
	}

	if u.GetContractLedgerContractsResponse4 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse4, "", true)
	}

	if u.GetContractLedgerContractsResponse5 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse5, "", true)
	}

	if u.GetContractLedgerContractsResponse6 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse6, "", true)
	}

	if u.GetContractLedger7 != nil {
		return utils.MarshalJSON(u.GetContractLedger7, "", true)
	}

	if u.GetContractLedger8 != nil {
		return utils.MarshalJSON(u.GetContractLedger8, "", true)
	}

	if u.GetContractLedger9 != nil {
		return utils.MarshalJSON(u.GetContractLedger9, "", true)
	}

	if u.GetContractLedger10 != nil {
		return utils.MarshalJSON(u.GetContractLedger10, "", true)
	}

	if u.GetContractLedger11 != nil {
		return utils.MarshalJSON(u.GetContractLedger11, "", true)
	}

	if u.GetContractLedger12 != nil {
		return utils.MarshalJSON(u.GetContractLedger12, "", true)
	}

	if u.GetContractLedger13 != nil {
		return utils.MarshalJSON(u.GetContractLedger13, "", true)
	}

	return nil, errors.New("could not marshal union type GetContractContractsResponse200Ledger: all fields are null")
}

type GetContractContractsCommits struct {
	ID       string                                                                       `json:"id"`
	Contract *GetContractContractsResponse200Contract                                     `json:"contract,omitempty"`
	Type     GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType `json:"type"`
	Name     *string                                                                      `json:"name,omitempty"`
	// If multiple credits or commits are applicable, the one with the lower priority will apply first.
	Priority *float64                                                                        `json:"priority,omitempty"`
	Product  GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsProduct `json:"product"`
	// The schedule that the customer will gain access to the credits purposed with this commit.
	AccessSchedule *GetContractContractsResponse200AccessSchedule `json:"access_schedule,omitempty"`
	// The schedule that the customer will be invoiced for this commit.
	InvoiceSchedule *GetContractContractsInvoiceSchedule `json:"invoice_schedule,omitempty"`
	// The contract that this commit will be billed on.
	InvoiceContract       *GetContractContractsInvoiceContract `json:"invoice_contract,omitempty"`
	RolledOverFrom        *GetContractContractsRolledOverFrom  `json:"rolled_over_from,omitempty"`
	Description           *string                              `json:"description,omitempty"`
	RolloverFraction      *float64                             `json:"rollover_fraction,omitempty"`
	ApplicableProductIds  []string                             `json:"applicable_product_ids,omitempty"`
	ApplicableProductTags []string                             `json:"applicable_product_tags,omitempty"`
	ApplicableContractIds []string                             `json:"applicable_contract_ids,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// (DEPRECATED) Use access_schedule + invoice_schedule instead.
	Amount *float64 `json:"amount,omitempty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string `json:"salesforce_opportunity_id,omitempty"`
	// A list of ordered events that impact the balance of a commit. For example, an invoice deduction or a rollover.
	Ledger       []GetContractContractsResponse200Ledger `json:"ledger,omitempty"`
	CustomFields map[string]string                       `json:"custom_fields,omitempty"`
}

func (o *GetContractContractsCommits) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsCommits) GetContract() *GetContractContractsResponse200Contract {
	if o == nil {
		return nil
	}
	return o.Contract
}

func (o *GetContractContractsCommits) GetType() GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType {
	if o == nil {
		return GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType("")
	}
	return o.Type
}

func (o *GetContractContractsCommits) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetContractContractsCommits) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *GetContractContractsCommits) GetProduct() GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsProduct {
	if o == nil {
		return GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsProduct{}
	}
	return o.Product
}

func (o *GetContractContractsCommits) GetAccessSchedule() *GetContractContractsResponse200AccessSchedule {
	if o == nil {
		return nil
	}
	return o.AccessSchedule
}

func (o *GetContractContractsCommits) GetInvoiceSchedule() *GetContractContractsInvoiceSchedule {
	if o == nil {
		return nil
	}
	return o.InvoiceSchedule
}

func (o *GetContractContractsCommits) GetInvoiceContract() *GetContractContractsInvoiceContract {
	if o == nil {
		return nil
	}
	return o.InvoiceContract
}

func (o *GetContractContractsCommits) GetRolledOverFrom() *GetContractContractsRolledOverFrom {
	if o == nil {
		return nil
	}
	return o.RolledOverFrom
}

func (o *GetContractContractsCommits) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetContractContractsCommits) GetRolloverFraction() *float64 {
	if o == nil {
		return nil
	}
	return o.RolloverFraction
}

func (o *GetContractContractsCommits) GetApplicableProductIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductIds
}

func (o *GetContractContractsCommits) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *GetContractContractsCommits) GetApplicableContractIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableContractIds
}

func (o *GetContractContractsCommits) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *GetContractContractsCommits) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *GetContractContractsCommits) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *GetContractContractsCommits) GetLedger() []GetContractContractsResponse200Ledger {
	if o == nil {
		return nil
	}
	return o.Ledger
}

func (o *GetContractContractsCommits) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type GetContractContractsResponse200ApplicationJSONContract struct {
	ID string `json:"id"`
}

func (o *GetContractContractsResponse200ApplicationJSONContract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType string

const (
	GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsTypeCredit GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType = "CREDIT"
)

func (e GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType) ToPointer() *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType {
	return &e
}
func (e *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT":
		*e = GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType: %v", v)
	}
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsScheduleItems struct {
	ID           string    `json:"id"`
	Amount       float64   `json:"amount"`
	StartingAt   time.Time `json:"starting_at"`
	EndingBefore time.Time `json:"ending_before"`
}

func (g GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsScheduleItems) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsScheduleItems) GetEndingBefore() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndingBefore
}

// GetContractContractsResponse200ApplicationJSONAccessSchedule - The schedule that the customer will gain access to the credits.
type GetContractContractsResponse200ApplicationJSONAccessSchedule struct {
	CreditType    *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsCreditType     `json:"credit_type,omitempty"`
	ScheduleItems []GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsScheduleItems `json:"schedule_items"`
}

func (o *GetContractContractsResponse200ApplicationJSONAccessSchedule) GetCreditType() *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *GetContractContractsResponse200ApplicationJSONAccessSchedule) GetScheduleItems() []GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsScheduleItems {
	if o == nil {
		return []GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsScheduleItems{}
	}
	return o.ScheduleItems
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits6Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits6TypeCreditManual GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits6Type = "CREDIT_MANUAL"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits6Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits6Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_MANUAL":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits6Type: %v", v)
	}
}

type GetContractLedgerContractsResponse2006 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits6Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
	Reason    string                                                                                     `json:"reason"`
}

func (g GetContractLedgerContractsResponse2006) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse2006) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse2006) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits6Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits6Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse2006) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse2006) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse2006) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits5Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits5TypeCreditCredited GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits5Type = "CREDIT_CREDITED"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits5Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits5Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_CREDITED":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits5Type: %v", v)
	}
}

type GetContractLedgerContractsResponse2005 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits5Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
	SegmentID string                                                                                     `json:"segment_id"`
	InvoiceID string                                                                                     `json:"invoice_id"`
}

func (g GetContractLedgerContractsResponse2005) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse2005) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse2005) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits5Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits5Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse2005) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse2005) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse2005) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedgerContractsResponse2005) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits4Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits4TypeCreditCanceled GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits4Type = "CREDIT_CANCELED"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits4Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits4Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_CANCELED":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits4Type: %v", v)
	}
}

type GetContractLedgerContractsResponse2004 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits4Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
	SegmentID string                                                                                     `json:"segment_id"`
	InvoiceID string                                                                                     `json:"invoice_id"`
}

func (g GetContractLedgerContractsResponse2004) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse2004) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse2004) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits4Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits4Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse2004) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse2004) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse2004) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedgerContractsResponse2004) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits3Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits3TypeCreditExpiration GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits3Type = "CREDIT_EXPIRATION"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits3Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits3Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_EXPIRATION":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits3Type: %v", v)
	}
}

type GetContractLedgerContractsResponse2003 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits3Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
	SegmentID string                                                                                     `json:"segment_id"`
}

func (g GetContractLedgerContractsResponse2003) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse2003) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse2003) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits3Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits3Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse2003) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse2003) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse2003) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits2Type string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits2TypeCreditAutomatedInvoiceDeduction GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits2Type = "CREDIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits2Type) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits2Type {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits2Type: %v", v)
	}
}

type GetContractLedgerContractsResponse2002 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits2Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
	SegmentID string                                                                                     `json:"segment_id"`
	InvoiceID string                                                                                     `json:"invoice_id"`
}

func (g GetContractLedgerContractsResponse2002) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse2002) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse2002) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits2Type {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits2Type("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse2002) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse2002) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse2002) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *GetContractLedgerContractsResponse2002) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType string

const (
	GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsTypeCreditSegmentStart GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType = "CREDIT_SEGMENT_START"
)

func (e GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType) ToPointer() *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType {
	return &e
}
func (e *GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_SEGMENT_START":
		*e = GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType: %v", v)
	}
}

type GetContractLedgerContractsResponse2001 struct {
	Type      GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType `json:"type"`
	Timestamp time.Time                                                                                 `json:"timestamp"`
	Amount    float64                                                                                   `json:"amount"`
	SegmentID string                                                                                    `json:"segment_id"`
}

func (g GetContractLedgerContractsResponse2001) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractLedgerContractsResponse2001) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *GetContractLedgerContractsResponse2001) GetType() GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType {
	if o == nil {
		return GetContractLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType("")
	}
	return o.Type
}

func (o *GetContractLedgerContractsResponse2001) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *GetContractLedgerContractsResponse2001) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractLedgerContractsResponse2001) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type GetContractContractsResponse200ApplicationJSONLedgerType string

const (
	GetContractContractsResponse200ApplicationJSONLedgerTypeGetContractLedgerContractsResponse2001 GetContractContractsResponse200ApplicationJSONLedgerType = "getContract_ledger_Contracts_response_200_1"
	GetContractContractsResponse200ApplicationJSONLedgerTypeGetContractLedgerContractsResponse2002 GetContractContractsResponse200ApplicationJSONLedgerType = "getContract_ledger_Contracts_response_200_2"
	GetContractContractsResponse200ApplicationJSONLedgerTypeGetContractLedgerContractsResponse2003 GetContractContractsResponse200ApplicationJSONLedgerType = "getContract_ledger_Contracts_response_200_3"
	GetContractContractsResponse200ApplicationJSONLedgerTypeGetContractLedgerContractsResponse2004 GetContractContractsResponse200ApplicationJSONLedgerType = "getContract_ledger_Contracts_response_200_4"
	GetContractContractsResponse200ApplicationJSONLedgerTypeGetContractLedgerContractsResponse2005 GetContractContractsResponse200ApplicationJSONLedgerType = "getContract_ledger_Contracts_response_200_5"
	GetContractContractsResponse200ApplicationJSONLedgerTypeGetContractLedgerContractsResponse2006 GetContractContractsResponse200ApplicationJSONLedgerType = "getContract_ledger_Contracts_response_200_6"
)

type GetContractContractsResponse200ApplicationJSONLedger struct {
	GetContractLedgerContractsResponse2001 *GetContractLedgerContractsResponse2001
	GetContractLedgerContractsResponse2002 *GetContractLedgerContractsResponse2002
	GetContractLedgerContractsResponse2003 *GetContractLedgerContractsResponse2003
	GetContractLedgerContractsResponse2004 *GetContractLedgerContractsResponse2004
	GetContractLedgerContractsResponse2005 *GetContractLedgerContractsResponse2005
	GetContractLedgerContractsResponse2006 *GetContractLedgerContractsResponse2006

	Type GetContractContractsResponse200ApplicationJSONLedgerType
}

func CreateGetContractContractsResponse200ApplicationJSONLedgerGetContractLedgerContractsResponse2001(getContractLedgerContractsResponse2001 GetContractLedgerContractsResponse2001) GetContractContractsResponse200ApplicationJSONLedger {
	typ := GetContractContractsResponse200ApplicationJSONLedgerTypeGetContractLedgerContractsResponse2001

	return GetContractContractsResponse200ApplicationJSONLedger{
		GetContractLedgerContractsResponse2001: &getContractLedgerContractsResponse2001,
		Type:                                   typ,
	}
}

func CreateGetContractContractsResponse200ApplicationJSONLedgerGetContractLedgerContractsResponse2002(getContractLedgerContractsResponse2002 GetContractLedgerContractsResponse2002) GetContractContractsResponse200ApplicationJSONLedger {
	typ := GetContractContractsResponse200ApplicationJSONLedgerTypeGetContractLedgerContractsResponse2002

	return GetContractContractsResponse200ApplicationJSONLedger{
		GetContractLedgerContractsResponse2002: &getContractLedgerContractsResponse2002,
		Type:                                   typ,
	}
}

func CreateGetContractContractsResponse200ApplicationJSONLedgerGetContractLedgerContractsResponse2003(getContractLedgerContractsResponse2003 GetContractLedgerContractsResponse2003) GetContractContractsResponse200ApplicationJSONLedger {
	typ := GetContractContractsResponse200ApplicationJSONLedgerTypeGetContractLedgerContractsResponse2003

	return GetContractContractsResponse200ApplicationJSONLedger{
		GetContractLedgerContractsResponse2003: &getContractLedgerContractsResponse2003,
		Type:                                   typ,
	}
}

func CreateGetContractContractsResponse200ApplicationJSONLedgerGetContractLedgerContractsResponse2004(getContractLedgerContractsResponse2004 GetContractLedgerContractsResponse2004) GetContractContractsResponse200ApplicationJSONLedger {
	typ := GetContractContractsResponse200ApplicationJSONLedgerTypeGetContractLedgerContractsResponse2004

	return GetContractContractsResponse200ApplicationJSONLedger{
		GetContractLedgerContractsResponse2004: &getContractLedgerContractsResponse2004,
		Type:                                   typ,
	}
}

func CreateGetContractContractsResponse200ApplicationJSONLedgerGetContractLedgerContractsResponse2005(getContractLedgerContractsResponse2005 GetContractLedgerContractsResponse2005) GetContractContractsResponse200ApplicationJSONLedger {
	typ := GetContractContractsResponse200ApplicationJSONLedgerTypeGetContractLedgerContractsResponse2005

	return GetContractContractsResponse200ApplicationJSONLedger{
		GetContractLedgerContractsResponse2005: &getContractLedgerContractsResponse2005,
		Type:                                   typ,
	}
}

func CreateGetContractContractsResponse200ApplicationJSONLedgerGetContractLedgerContractsResponse2006(getContractLedgerContractsResponse2006 GetContractLedgerContractsResponse2006) GetContractContractsResponse200ApplicationJSONLedger {
	typ := GetContractContractsResponse200ApplicationJSONLedgerTypeGetContractLedgerContractsResponse2006

	return GetContractContractsResponse200ApplicationJSONLedger{
		GetContractLedgerContractsResponse2006: &getContractLedgerContractsResponse2006,
		Type:                                   typ,
	}
}

func (u *GetContractContractsResponse200ApplicationJSONLedger) UnmarshalJSON(data []byte) error {

	var getContractLedgerContractsResponse2001 GetContractLedgerContractsResponse2001 = GetContractLedgerContractsResponse2001{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse2001, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse2001 = &getContractLedgerContractsResponse2001
		u.Type = GetContractContractsResponse200ApplicationJSONLedgerTypeGetContractLedgerContractsResponse2001
		return nil
	}

	var getContractLedgerContractsResponse2003 GetContractLedgerContractsResponse2003 = GetContractLedgerContractsResponse2003{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse2003, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse2003 = &getContractLedgerContractsResponse2003
		u.Type = GetContractContractsResponse200ApplicationJSONLedgerTypeGetContractLedgerContractsResponse2003
		return nil
	}

	var getContractLedgerContractsResponse2006 GetContractLedgerContractsResponse2006 = GetContractLedgerContractsResponse2006{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse2006, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse2006 = &getContractLedgerContractsResponse2006
		u.Type = GetContractContractsResponse200ApplicationJSONLedgerTypeGetContractLedgerContractsResponse2006
		return nil
	}

	var getContractLedgerContractsResponse2002 GetContractLedgerContractsResponse2002 = GetContractLedgerContractsResponse2002{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse2002, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse2002 = &getContractLedgerContractsResponse2002
		u.Type = GetContractContractsResponse200ApplicationJSONLedgerTypeGetContractLedgerContractsResponse2002
		return nil
	}

	var getContractLedgerContractsResponse2004 GetContractLedgerContractsResponse2004 = GetContractLedgerContractsResponse2004{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse2004, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse2004 = &getContractLedgerContractsResponse2004
		u.Type = GetContractContractsResponse200ApplicationJSONLedgerTypeGetContractLedgerContractsResponse2004
		return nil
	}

	var getContractLedgerContractsResponse2005 GetContractLedgerContractsResponse2005 = GetContractLedgerContractsResponse2005{}
	if err := utils.UnmarshalJSON(data, &getContractLedgerContractsResponse2005, "", true, true); err == nil {
		u.GetContractLedgerContractsResponse2005 = &getContractLedgerContractsResponse2005
		u.Type = GetContractContractsResponse200ApplicationJSONLedgerTypeGetContractLedgerContractsResponse2005
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetContractContractsResponse200ApplicationJSONLedger", string(data))
}

func (u GetContractContractsResponse200ApplicationJSONLedger) MarshalJSON() ([]byte, error) {
	if u.GetContractLedgerContractsResponse2001 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse2001, "", true)
	}

	if u.GetContractLedgerContractsResponse2002 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse2002, "", true)
	}

	if u.GetContractLedgerContractsResponse2003 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse2003, "", true)
	}

	if u.GetContractLedgerContractsResponse2004 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse2004, "", true)
	}

	if u.GetContractLedgerContractsResponse2005 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse2005, "", true)
	}

	if u.GetContractLedgerContractsResponse2006 != nil {
		return utils.MarshalJSON(u.GetContractLedgerContractsResponse2006, "", true)
	}

	return nil, errors.New("could not marshal union type GetContractContractsResponse200ApplicationJSONLedger: all fields are null")
}

type GetContractContractsCredits struct {
	ID       string                                                                              `json:"id"`
	Contract *GetContractContractsResponse200ApplicationJSONContract                             `json:"contract,omitempty"`
	Type     GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType `json:"type"`
	Name     *string                                                                             `json:"name,omitempty"`
	// If multiple credits or commits are applicable, the one with the lower priority will apply first.
	Priority *float64                                                                               `json:"priority,omitempty"`
	Product  GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsProduct `json:"product"`
	// The schedule that the customer will gain access to the credits.
	AccessSchedule        *GetContractContractsResponse200ApplicationJSONAccessSchedule `json:"access_schedule,omitempty"`
	Description           *string                                                       `json:"description,omitempty"`
	ApplicableProductIds  []string                                                      `json:"applicable_product_ids,omitempty"`
	ApplicableProductTags []string                                                      `json:"applicable_product_tags,omitempty"`
	ApplicableContractIds []string                                                      `json:"applicable_contract_ids,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string `json:"salesforce_opportunity_id,omitempty"`
	// A list of ordered events that impact the balance of a credit. For example, an invoice deduction or an expiration.
	Ledger       []GetContractContractsResponse200ApplicationJSONLedger `json:"ledger,omitempty"`
	CustomFields map[string]string                                      `json:"custom_fields,omitempty"`
}

func (o *GetContractContractsCredits) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsCredits) GetContract() *GetContractContractsResponse200ApplicationJSONContract {
	if o == nil {
		return nil
	}
	return o.Contract
}

func (o *GetContractContractsCredits) GetType() GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType {
	if o == nil {
		return GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType("")
	}
	return o.Type
}

func (o *GetContractContractsCredits) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetContractContractsCredits) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *GetContractContractsCredits) GetProduct() GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsProduct {
	if o == nil {
		return GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsProduct{}
	}
	return o.Product
}

func (o *GetContractContractsCredits) GetAccessSchedule() *GetContractContractsResponse200ApplicationJSONAccessSchedule {
	if o == nil {
		return nil
	}
	return o.AccessSchedule
}

func (o *GetContractContractsCredits) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetContractContractsCredits) GetApplicableProductIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductIds
}

func (o *GetContractContractsCredits) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *GetContractContractsCredits) GetApplicableContractIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableContractIds
}

func (o *GetContractContractsCredits) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *GetContractContractsCredits) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *GetContractContractsCredits) GetLedger() []GetContractContractsResponse200ApplicationJSONLedger {
	if o == nil {
		return nil
	}
	return o.Ledger
}

func (o *GetContractContractsCredits) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type GetContractContractsOverrideSpecifiers struct {
	ProductID               *string           `json:"product_id,omitempty"`
	ProductTags             []string          `json:"product_tags,omitempty"`
	PricingGroupValues      map[string]string `json:"pricing_group_values,omitempty"`
	PresentationGroupValues map[string]string `json:"presentation_group_values,omitempty"`
}

func (o *GetContractContractsOverrideSpecifiers) GetProductID() *string {
	if o == nil {
		return nil
	}
	return o.ProductID
}

func (o *GetContractContractsOverrideSpecifiers) GetProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ProductTags
}

func (o *GetContractContractsOverrideSpecifiers) GetPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PricingGroupValues
}

func (o *GetContractContractsOverrideSpecifiers) GetPresentationGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PresentationGroupValues
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesType string

const (
	GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesTypeOverwrite  GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesType = "OVERWRITE"
	GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesTypeMultiplier GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesType = "MULTIPLIER"
	GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesTypeTiered     GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesType = "TIERED"
)

func (e GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesType) ToPointer() *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesType {
	return &e
}
func (e *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OVERWRITE":
		fallthrough
	case "MULTIPLIER":
		fallthrough
	case "TIERED":
		*e = GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesType: %v", v)
	}
}

type GetContractContractsResponse200ApplicationJSONRateType string

const (
	GetContractContractsResponse200ApplicationJSONRateTypeFlatUpper         GetContractContractsResponse200ApplicationJSONRateType = "FLAT"
	GetContractContractsResponse200ApplicationJSONRateTypeFlatLower         GetContractContractsResponse200ApplicationJSONRateType = "flat"
	GetContractContractsResponse200ApplicationJSONRateTypePercentageUpper   GetContractContractsResponse200ApplicationJSONRateType = "PERCENTAGE"
	GetContractContractsResponse200ApplicationJSONRateTypePercentageLower   GetContractContractsResponse200ApplicationJSONRateType = "percentage"
	GetContractContractsResponse200ApplicationJSONRateTypeSubscriptionUpper GetContractContractsResponse200ApplicationJSONRateType = "SUBSCRIPTION"
	GetContractContractsResponse200ApplicationJSONRateTypeSubscriptionLower GetContractContractsResponse200ApplicationJSONRateType = "subscription"
	GetContractContractsResponse200ApplicationJSONRateTypeTieredUpper       GetContractContractsResponse200ApplicationJSONRateType = "TIERED"
	GetContractContractsResponse200ApplicationJSONRateTypeTieredLower       GetContractContractsResponse200ApplicationJSONRateType = "tiered"
	GetContractContractsResponse200ApplicationJSONRateTypeCustomUpper       GetContractContractsResponse200ApplicationJSONRateType = "CUSTOM"
	GetContractContractsResponse200ApplicationJSONRateTypeCustomLower       GetContractContractsResponse200ApplicationJSONRateType = "custom"
)

func (e GetContractContractsResponse200ApplicationJSONRateType) ToPointer() *GetContractContractsResponse200ApplicationJSONRateType {
	return &e
}
func (e *GetContractContractsResponse200ApplicationJSONRateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FLAT":
		fallthrough
	case "flat":
		fallthrough
	case "PERCENTAGE":
		fallthrough
	case "percentage":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "subscription":
		fallthrough
	case "TIERED":
		fallthrough
	case "tiered":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "custom":
		*e = GetContractContractsResponse200ApplicationJSONRateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractContractsResponse200ApplicationJSONRateType: %v", v)
	}
}

type GetContractContractsResponse200ApplicationJSONTiers struct {
	Size  *float64 `json:"size,omitempty"`
	Price float64  `json:"price"`
}

func (o *GetContractContractsResponse200ApplicationJSONTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *GetContractContractsResponse200ApplicationJSONTiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsOverwriteRate struct {
	RateType GetContractContractsResponse200ApplicationJSONRateType `json:"rate_type"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price *float64 `json:"price,omitempty"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity *float64 `json:"quantity,omitempty"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type.
	IsProrated *bool `json:"is_prorated,omitempty"`
	// Only set for TIERED rate_type.
	Tiers []GetContractContractsResponse200ApplicationJSONTiers `json:"tiers,omitempty"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate processors.
	CustomRate map[string]any                                                                               `json:"custom_rate,omitempty"`
	CreditType *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesCreditType `json:"credit_type,omitempty"`
}

func (o *GetContractContractsOverwriteRate) GetRateType() GetContractContractsResponse200ApplicationJSONRateType {
	if o == nil {
		return GetContractContractsResponse200ApplicationJSONRateType("")
	}
	return o.RateType
}

func (o *GetContractContractsOverwriteRate) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *GetContractContractsOverwriteRate) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *GetContractContractsOverwriteRate) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *GetContractContractsOverwriteRate) GetTiers() []GetContractContractsResponse200ApplicationJSONTiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *GetContractContractsOverwriteRate) GetCustomRate() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomRate
}

func (o *GetContractContractsOverwriteRate) GetCreditType() *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

type GetContractContractsOverrideTiers struct {
	Size       *float64 `json:"size,omitempty"`
	Multiplier float64  `json:"multiplier"`
}

func (o *GetContractContractsOverrideTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *GetContractContractsOverrideTiers) GetMultiplier() float64 {
	if o == nil {
		return 0.0
	}
	return o.Multiplier
}

type GetContractContractsResponseRateType string

const (
	GetContractContractsResponseRateTypeFlatUpper         GetContractContractsResponseRateType = "FLAT"
	GetContractContractsResponseRateTypeFlatLower         GetContractContractsResponseRateType = "flat"
	GetContractContractsResponseRateTypePercentageUpper   GetContractContractsResponseRateType = "PERCENTAGE"
	GetContractContractsResponseRateTypePercentageLower   GetContractContractsResponseRateType = "percentage"
	GetContractContractsResponseRateTypeSubscriptionUpper GetContractContractsResponseRateType = "SUBSCRIPTION"
	GetContractContractsResponseRateTypeSubscriptionLower GetContractContractsResponseRateType = "subscription"
	GetContractContractsResponseRateTypeTieredUpper       GetContractContractsResponseRateType = "TIERED"
	GetContractContractsResponseRateTypeTieredLower       GetContractContractsResponseRateType = "tiered"
	GetContractContractsResponseRateTypeCustomUpper       GetContractContractsResponseRateType = "CUSTOM"
	GetContractContractsResponseRateTypeCustomLower       GetContractContractsResponseRateType = "custom"
)

func (e GetContractContractsResponseRateType) ToPointer() *GetContractContractsResponseRateType {
	return &e
}
func (e *GetContractContractsResponseRateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FLAT":
		fallthrough
	case "flat":
		fallthrough
	case "PERCENTAGE":
		fallthrough
	case "percentage":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "subscription":
		fallthrough
	case "TIERED":
		fallthrough
	case "tiered":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "custom":
		*e = GetContractContractsResponseRateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractContractsResponseRateType: %v", v)
	}
}

type GetContractContractsResponseTiers struct {
	Size  *float64 `json:"size,omitempty"`
	Price float64  `json:"price"`
}

func (o *GetContractContractsResponseTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *GetContractContractsResponseTiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type GetContractContractsResponseCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractContractsResponseCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractContractsResponseCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsOverrides struct {
	ID                    string                                                                                    `json:"id"`
	Product               *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesProduct `json:"product,omitempty"`
	ApplicableProductTags []string                                                                                  `json:"applicable_product_tags,omitempty"`
	OverrideSpecifiers    []GetContractContractsOverrideSpecifiers                                                  `json:"override_specifiers,omitempty"`
	StartingAt            time.Time                                                                                 `json:"starting_at"`
	EndingBefore          *time.Time                                                                                `json:"ending_before,omitempty"`
	Entitled              *bool                                                                                     `json:"entitled,omitempty"`
	Type                  *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesType    `json:"type,omitempty"`
	Priority              *float64                                                                                  `json:"priority,omitempty"`
	Multiplier            *float64                                                                                  `json:"multiplier,omitempty"`
	OverwriteRate         *GetContractContractsOverwriteRate                                                        `json:"overwrite_rate,omitempty"`
	OverrideTiers         []GetContractContractsOverrideTiers                                                       `json:"override_tiers,omitempty"`
	RateType              *GetContractContractsResponseRateType                                                     `json:"rate_type,omitempty"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price *float64 `json:"price,omitempty"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity *float64 `json:"quantity,omitempty"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type.
	IsProrated *bool `json:"is_prorated,omitempty"`
	// Only set for TIERED rate_type.
	Tiers []GetContractContractsResponseTiers `json:"tiers,omitempty"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate processors.
	Value      map[string]any                          `json:"value,omitempty"`
	CreditType *GetContractContractsResponseCreditType `json:"credit_type,omitempty"`
}

func (g GetContractContractsOverrides) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsOverrides) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsOverrides) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsOverrides) GetProduct() *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesProduct {
	if o == nil {
		return nil
	}
	return o.Product
}

func (o *GetContractContractsOverrides) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *GetContractContractsOverrides) GetOverrideSpecifiers() []GetContractContractsOverrideSpecifiers {
	if o == nil {
		return nil
	}
	return o.OverrideSpecifiers
}

func (o *GetContractContractsOverrides) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *GetContractContractsOverrides) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *GetContractContractsOverrides) GetEntitled() *bool {
	if o == nil {
		return nil
	}
	return o.Entitled
}

func (o *GetContractContractsOverrides) GetType() *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetContractContractsOverrides) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *GetContractContractsOverrides) GetMultiplier() *float64 {
	if o == nil {
		return nil
	}
	return o.Multiplier
}

func (o *GetContractContractsOverrides) GetOverwriteRate() *GetContractContractsOverwriteRate {
	if o == nil {
		return nil
	}
	return o.OverwriteRate
}

func (o *GetContractContractsOverrides) GetOverrideTiers() []GetContractContractsOverrideTiers {
	if o == nil {
		return nil
	}
	return o.OverrideTiers
}

func (o *GetContractContractsOverrides) GetRateType() *GetContractContractsResponseRateType {
	if o == nil {
		return nil
	}
	return o.RateType
}

func (o *GetContractContractsOverrides) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *GetContractContractsOverrides) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *GetContractContractsOverrides) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *GetContractContractsOverrides) GetTiers() []GetContractContractsResponseTiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *GetContractContractsOverrides) GetValue() map[string]any {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *GetContractContractsOverrides) GetCreditType() *GetContractContractsResponseCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsScheduleItems struct {
	ID        string    `json:"id"`
	InvoiceID string    `json:"invoice_id"`
	Amount    float64   `json:"amount"`
	UnitPrice float64   `json:"unit_price"`
	Quantity  float64   `json:"quantity"`
	Timestamp time.Time `json:"timestamp"`
}

func (g GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsScheduleItems) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsScheduleItems) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsScheduleItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsScheduleItems) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

type GetContractContractsResponse200Schedule struct {
	CreditType    *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsCreditType     `json:"credit_type,omitempty"`
	ScheduleItems []GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsScheduleItems `json:"schedule_items,omitempty"`
}

func (o *GetContractContractsResponse200Schedule) GetCreditType() *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *GetContractContractsResponse200Schedule) GetScheduleItems() []GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsScheduleItems {
	if o == nil {
		return nil
	}
	return o.ScheduleItems
}

type GetContractContractsDiscounts struct {
	ID       string                                                                                   `json:"id"`
	Product  GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsProduct `json:"product"`
	Schedule GetContractContractsResponse200Schedule                                                  `json:"schedule"`
	Name     *string                                                                                  `json:"name,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
}

func (o *GetContractContractsDiscounts) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsDiscounts) GetProduct() GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsProduct {
	if o == nil {
		return GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsProduct{}
	}
	return o.Product
}

func (o *GetContractContractsDiscounts) GetSchedule() GetContractContractsResponse200Schedule {
	if o == nil {
		return GetContractContractsResponse200Schedule{}
	}
	return o.Schedule
}

func (o *GetContractContractsDiscounts) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetContractContractsDiscounts) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

type GetContractContractsProfessionalServices struct {
	ID          string  `json:"id"`
	Description *string `json:"description,omitempty"`
	ProductID   string  `json:"product_id"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// Unit price for the charge. Will be multiplied by quantity to determine the amount and must be specified.
	UnitPrice float64 `json:"unit_price"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the amount.
	Quantity float64 `json:"quantity"`
	// Maximum amount for the term.
	MaxAmount    float64           `json:"max_amount"`
	CustomFields map[string]string `json:"custom_fields,omitempty"`
}

func (o *GetContractContractsProfessionalServices) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsProfessionalServices) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetContractContractsProfessionalServices) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *GetContractContractsProfessionalServices) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *GetContractContractsProfessionalServices) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *GetContractContractsProfessionalServices) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *GetContractContractsProfessionalServices) GetMaxAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.MaxAmount
}

func (o *GetContractContractsProfessionalServices) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems struct {
	ID        string    `json:"id"`
	InvoiceID string    `json:"invoice_id"`
	Amount    float64   `json:"amount"`
	UnitPrice float64   `json:"unit_price"`
	Quantity  float64   `json:"quantity"`
	Timestamp time.Time `json:"timestamp"`
}

func (g GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

type GetContractContractsResponse200ApplicationJSONSchedule struct {
	CreditType    *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesCreditType     `json:"credit_type,omitempty"`
	ScheduleItems []GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems `json:"schedule_items,omitempty"`
}

func (o *GetContractContractsResponse200ApplicationJSONSchedule) GetCreditType() *GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *GetContractContractsResponse200ApplicationJSONSchedule) GetScheduleItems() []GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems {
	if o == nil {
		return nil
	}
	return o.ScheduleItems
}

type GetContractContractsScheduledCharges struct {
	ID       string                                                                                          `json:"id"`
	Product  GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesProduct `json:"product"`
	Schedule GetContractContractsResponse200ApplicationJSONSchedule                                          `json:"schedule"`
	// displayed on invoices
	Name *string `json:"name,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string           `json:"netsuite_sales_order_id,omitempty"`
	CustomFields         map[string]string `json:"custom_fields,omitempty"`
}

func (o *GetContractContractsScheduledCharges) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractContractsScheduledCharges) GetProduct() GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesProduct {
	if o == nil {
		return GetContractContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesProduct{}
	}
	return o.Product
}

func (o *GetContractContractsScheduledCharges) GetSchedule() GetContractContractsResponse200ApplicationJSONSchedule {
	if o == nil {
		return GetContractContractsResponse200ApplicationJSONSchedule{}
	}
	return o.Schedule
}

func (o *GetContractContractsScheduledCharges) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetContractContractsScheduledCharges) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *GetContractContractsScheduledCharges) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type GetContractContractsResellerType string

const (
	GetContractContractsResellerTypeAws           GetContractContractsResellerType = "AWS"
	GetContractContractsResellerTypeAwsProService GetContractContractsResellerType = "AWS_PRO_SERVICE"
	GetContractContractsResellerTypeGcp           GetContractContractsResellerType = "GCP"
	GetContractContractsResellerTypeGcpProService GetContractContractsResellerType = "GCP_PRO_SERVICE"
)

func (e GetContractContractsResellerType) ToPointer() *GetContractContractsResellerType {
	return &e
}
func (e *GetContractContractsResellerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWS":
		fallthrough
	case "AWS_PRO_SERVICE":
		fallthrough
	case "GCP":
		fallthrough
	case "GCP_PRO_SERVICE":
		*e = GetContractContractsResellerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractContractsResellerType: %v", v)
	}
}

type GetContractContractsResellerRoyalties struct {
	ResellerType          GetContractContractsResellerType `json:"reseller_type"`
	Fraction              *float64                         `json:"fraction,omitempty"`
	NetsuiteResellerID    *string                          `json:"netsuite_reseller_id,omitempty"`
	StartingAt            *time.Time                       `json:"starting_at,omitempty"`
	EndingBefore          *time.Time                       `json:"ending_before,omitempty"`
	ResellerContractValue *float64                         `json:"reseller_contract_value,omitempty"`
	AwsAccountNumber      *string                          `json:"aws_account_number,omitempty"`
	AwsPayerReferenceID   *string                          `json:"aws_payer_reference_id,omitempty"`
	AwsOfferID            *string                          `json:"aws_offer_id,omitempty"`
	GcpAccountID          *string                          `json:"gcp_account_id,omitempty"`
	GcpOfferID            *string                          `json:"gcp_offer_id,omitempty"`
}

func (g GetContractContractsResellerRoyalties) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractContractsResellerRoyalties) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractContractsResellerRoyalties) GetResellerType() GetContractContractsResellerType {
	if o == nil {
		return GetContractContractsResellerType("")
	}
	return o.ResellerType
}

func (o *GetContractContractsResellerRoyalties) GetFraction() *float64 {
	if o == nil {
		return nil
	}
	return o.Fraction
}

func (o *GetContractContractsResellerRoyalties) GetNetsuiteResellerID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteResellerID
}

func (o *GetContractContractsResellerRoyalties) GetStartingAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartingAt
}

func (o *GetContractContractsResellerRoyalties) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *GetContractContractsResellerRoyalties) GetResellerContractValue() *float64 {
	if o == nil {
		return nil
	}
	return o.ResellerContractValue
}

func (o *GetContractContractsResellerRoyalties) GetAwsAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.AwsAccountNumber
}

func (o *GetContractContractsResellerRoyalties) GetAwsPayerReferenceID() *string {
	if o == nil {
		return nil
	}
	return o.AwsPayerReferenceID
}

func (o *GetContractContractsResellerRoyalties) GetAwsOfferID() *string {
	if o == nil {
		return nil
	}
	return o.AwsOfferID
}

func (o *GetContractContractsResellerRoyalties) GetGcpAccountID() *string {
	if o == nil {
		return nil
	}
	return o.GcpAccountID
}

func (o *GetContractContractsResellerRoyalties) GetGcpOfferID() *string {
	if o == nil {
		return nil
	}
	return o.GcpOfferID
}

type Amendments struct {
	ID string `json:"id"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string                         `json:"salesforce_opportunity_id,omitempty"`
	StartingAt              time.Time                       `json:"starting_at"`
	Commits                 []GetContractContractsCommits   `json:"commits"`
	Credits                 []GetContractContractsCredits   `json:"credits,omitempty"`
	Overrides               []GetContractContractsOverrides `json:"overrides"`
	// This field's availability is dependent on your client's configuration.
	Discounts []GetContractContractsDiscounts `json:"discounts,omitempty"`
	// This field's availability is dependent on your client's configuration.
	ProfessionalServices []GetContractContractsProfessionalServices `json:"professional_services,omitempty"`
	ScheduledCharges     []GetContractContractsScheduledCharges     `json:"scheduled_charges"`
	// This field's availability is dependent on your client's configuration.
	ResellerRoyalties []GetContractContractsResellerRoyalties `json:"reseller_royalties,omitempty"`
	CreatedAt         time.Time                               `json:"created_at"`
	CreatedBy         string                                  `json:"created_by"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
}

func (a Amendments) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *Amendments) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Amendments) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Amendments) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *Amendments) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *Amendments) GetCommits() []GetContractContractsCommits {
	if o == nil {
		return []GetContractContractsCommits{}
	}
	return o.Commits
}

func (o *Amendments) GetCredits() []GetContractContractsCredits {
	if o == nil {
		return nil
	}
	return o.Credits
}

func (o *Amendments) GetOverrides() []GetContractContractsOverrides {
	if o == nil {
		return []GetContractContractsOverrides{}
	}
	return o.Overrides
}

func (o *Amendments) GetDiscounts() []GetContractContractsDiscounts {
	if o == nil {
		return nil
	}
	return o.Discounts
}

func (o *Amendments) GetProfessionalServices() []GetContractContractsProfessionalServices {
	if o == nil {
		return nil
	}
	return o.ProfessionalServices
}

func (o *Amendments) GetScheduledCharges() []GetContractContractsScheduledCharges {
	if o == nil {
		return []GetContractContractsScheduledCharges{}
	}
	return o.ScheduledCharges
}

func (o *Amendments) GetResellerRoyalties() []GetContractContractsResellerRoyalties {
	if o == nil {
		return nil
	}
	return o.ResellerRoyalties
}

func (o *Amendments) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *Amendments) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *Amendments) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

type GetContractBillingProvider string

const (
	GetContractBillingProviderAwsMarketplace   GetContractBillingProvider = "aws_marketplace"
	GetContractBillingProviderStripe           GetContractBillingProvider = "stripe"
	GetContractBillingProviderNetsuite         GetContractBillingProvider = "netsuite"
	GetContractBillingProviderCustom           GetContractBillingProvider = "custom"
	GetContractBillingProviderAzureMarketplace GetContractBillingProvider = "azure_marketplace"
	GetContractBillingProviderQuickbooksOnline GetContractBillingProvider = "quickbooks_online"
	GetContractBillingProviderWorkday          GetContractBillingProvider = "workday"
	GetContractBillingProviderGcpMarketplace   GetContractBillingProvider = "gcp_marketplace"
)

func (e GetContractBillingProvider) ToPointer() *GetContractBillingProvider {
	return &e
}
func (e *GetContractBillingProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws_marketplace":
		fallthrough
	case "stripe":
		fallthrough
	case "netsuite":
		fallthrough
	case "custom":
		fallthrough
	case "azure_marketplace":
		fallthrough
	case "quickbooks_online":
		fallthrough
	case "workday":
		fallthrough
	case "gcp_marketplace":
		*e = GetContractBillingProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractBillingProvider: %v", v)
	}
}

type GetContractDeliveryMethod string

const (
	GetContractDeliveryMethodDirectToBillingProvider GetContractDeliveryMethod = "direct_to_billing_provider"
	GetContractDeliveryMethodAwsSqs                  GetContractDeliveryMethod = "aws_sqs"
	GetContractDeliveryMethodTackle                  GetContractDeliveryMethod = "tackle"
	GetContractDeliveryMethodAwsSns                  GetContractDeliveryMethod = "aws_sns"
)

func (e GetContractDeliveryMethod) ToPointer() *GetContractDeliveryMethod {
	return &e
}
func (e *GetContractDeliveryMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "direct_to_billing_provider":
		fallthrough
	case "aws_sqs":
		fallthrough
	case "tackle":
		fallthrough
	case "aws_sns":
		*e = GetContractDeliveryMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractDeliveryMethod: %v", v)
	}
}

// CustomerBillingProviderConfiguration - This field's availability is dependent on your client's configuration.
type CustomerBillingProviderConfiguration struct {
	BillingProvider GetContractBillingProvider `json:"billing_provider"`
	DeliveryMethod  GetContractDeliveryMethod  `json:"delivery_method"`
}

func (o *CustomerBillingProviderConfiguration) GetBillingProvider() GetContractBillingProvider {
	if o == nil {
		return GetContractBillingProvider("")
	}
	return o.BillingProvider
}

func (o *CustomerBillingProviderConfiguration) GetDeliveryMethod() GetContractDeliveryMethod {
	if o == nil {
		return GetContractDeliveryMethod("")
	}
	return o.DeliveryMethod
}

type GetContractData struct {
	ID         string `json:"id"`
	CustomerID string `json:"customer_id"`
	// Prevents the creation of duplicates. If a request to create a record is made with a previously used uniqueness key, a new record will not be created and the request will fail with a 409 error.
	UniquenessKey *string            `json:"uniqueness_key,omitempty"`
	Initial       GetContractInitial `json:"initial"`
	Current       GetContractCurrent `json:"current"`
	Amendments    []Amendments       `json:"amendments"`
	CustomFields  map[string]string  `json:"custom_fields,omitempty"`
	// This field's availability is dependent on your client's configuration.
	CustomerBillingProviderConfiguration *CustomerBillingProviderConfiguration `json:"customer_billing_provider_configuration,omitempty"`
}

func (o *GetContractData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetContractData) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *GetContractData) GetUniquenessKey() *string {
	if o == nil {
		return nil
	}
	return o.UniquenessKey
}

func (o *GetContractData) GetInitial() GetContractInitial {
	if o == nil {
		return GetContractInitial{}
	}
	return o.Initial
}

func (o *GetContractData) GetCurrent() GetContractCurrent {
	if o == nil {
		return GetContractCurrent{}
	}
	return o.Current
}

func (o *GetContractData) GetAmendments() []Amendments {
	if o == nil {
		return []Amendments{}
	}
	return o.Amendments
}

func (o *GetContractData) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *GetContractData) GetCustomerBillingProviderConfiguration() *CustomerBillingProviderConfiguration {
	if o == nil {
		return nil
	}
	return o.CustomerBillingProviderConfiguration
}

// GetContractResponseBody - Success
type GetContractResponseBody struct {
	Data GetContractData `json:"data"`
}

func (o *GetContractResponseBody) GetData() GetContractData {
	if o == nil {
		return GetContractData{}
	}
	return o.Data
}

type GetContractResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *GetContractResponseBody
}

func (o *GetContractResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetContractResponse) GetObject() *GetContractResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
