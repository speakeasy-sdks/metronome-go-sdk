// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/Metronome-Industries/metronome-go-sdk/internal/utils"
	"github.com/Metronome-Industries/metronome-go-sdk/models/components"
	"time"
)

// ListCustomerBalancesRequestBody - List all balances (commits and credits) for a customer
type ListCustomerBalancesRequestBody struct {
	CustomerID string  `json:"customer_id"`
	ID         *string `json:"id,omitempty"`
	// Return only balances that have access schedules that "cover" the provided date
	CoveringDate *time.Time `json:"covering_date,omitempty"`
	// Include only balances that have any access on or after the provided date
	StartingAt *time.Time `json:"starting_at,omitempty"`
	// Include only balances that have any access before the provided date (exclusive)
	EffectiveBefore *time.Time `json:"effective_before,omitempty"`
	// Include balances on the contract level.
	IncludeContractBalances *bool `json:"include_contract_balances,omitempty"`
	// Include credits from archived contracts.
	IncludeArchived *bool `json:"include_archived,omitempty"`
	// Include ledgers in the response. Setting this flag may cause the query to be slower.
	IncludeLedgers *bool `json:"include_ledgers,omitempty"`
	// The next page token from a previous response.
	NextPage *string `json:"next_page,omitempty"`
}

func (l ListCustomerBalancesRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCustomerBalancesRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListCustomerBalancesRequestBody) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *ListCustomerBalancesRequestBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *ListCustomerBalancesRequestBody) GetCoveringDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.CoveringDate
}

func (o *ListCustomerBalancesRequestBody) GetStartingAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartingAt
}

func (o *ListCustomerBalancesRequestBody) GetEffectiveBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EffectiveBefore
}

func (o *ListCustomerBalancesRequestBody) GetIncludeContractBalances() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeContractBalances
}

func (o *ListCustomerBalancesRequestBody) GetIncludeArchived() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeArchived
}

func (o *ListCustomerBalancesRequestBody) GetIncludeLedgers() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeLedgers
}

func (o *ListCustomerBalancesRequestBody) GetNextPage() *string {
	if o == nil {
		return nil
	}
	return o.NextPage
}

type ListCustomerBalancesDataContract struct {
	ID string `json:"id"`
}

func (o *ListCustomerBalancesDataContract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListCustomerBalancesDataType string

const (
	ListCustomerBalancesDataTypeCredit ListCustomerBalancesDataType = "CREDIT"
)

func (e ListCustomerBalancesDataType) ToPointer() *ListCustomerBalancesDataType {
	return &e
}
func (e *ListCustomerBalancesDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT":
		*e = ListCustomerBalancesDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerBalancesDataType: %v", v)
	}
}

type ListCustomerBalancesDataProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *ListCustomerBalancesDataProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListCustomerBalancesDataProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ListCustomerBalancesDataCustomerBalancesCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListCustomerBalancesDataCustomerBalancesCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListCustomerBalancesDataCustomerBalancesCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListCustomerBalancesDataCustomerBalancesScheduleItems struct {
	ID           string    `json:"id"`
	Amount       float64   `json:"amount"`
	StartingAt   time.Time `json:"starting_at"`
	EndingBefore time.Time `json:"ending_before"`
}

func (l ListCustomerBalancesDataCustomerBalancesScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCustomerBalancesDataCustomerBalancesScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListCustomerBalancesDataCustomerBalancesScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListCustomerBalancesDataCustomerBalancesScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListCustomerBalancesDataCustomerBalancesScheduleItems) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *ListCustomerBalancesDataCustomerBalancesScheduleItems) GetEndingBefore() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndingBefore
}

// ListCustomerBalancesDataAccessSchedule - The schedule that the customer will gain access to the credits.
type ListCustomerBalancesDataAccessSchedule struct {
	CreditType    *ListCustomerBalancesDataCustomerBalancesCreditType     `json:"credit_type,omitempty"`
	ScheduleItems []ListCustomerBalancesDataCustomerBalancesScheduleItems `json:"schedule_items"`
}

func (o *ListCustomerBalancesDataAccessSchedule) GetCreditType() *ListCustomerBalancesDataCustomerBalancesCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *ListCustomerBalancesDataAccessSchedule) GetScheduleItems() []ListCustomerBalancesDataCustomerBalancesScheduleItems {
	if o == nil {
		return []ListCustomerBalancesDataCustomerBalancesScheduleItems{}
	}
	return o.ScheduleItems
}

type ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData26Type string

const (
	ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData26TypeCreditManual ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData26Type = "CREDIT_MANUAL"
)

func (e ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData26Type) ToPointer() *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData26Type {
	return &e
}
func (e *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData26Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_MANUAL":
		*e = ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData26Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData26Type: %v", v)
	}
}

type ListCustomerBalancesLedgerCustomerBalances6 struct {
	Type      ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData26Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
	Reason    string                                                                                     `json:"reason"`
}

func (l ListCustomerBalancesLedgerCustomerBalances6) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCustomerBalancesLedgerCustomerBalances6) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListCustomerBalancesLedgerCustomerBalances6) GetType() ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData26Type {
	if o == nil {
		return ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData26Type("")
	}
	return o.Type
}

func (o *ListCustomerBalancesLedgerCustomerBalances6) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListCustomerBalancesLedgerCustomerBalances6) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListCustomerBalancesLedgerCustomerBalances6) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData25Type string

const (
	ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData25TypeCreditCredited ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData25Type = "CREDIT_CREDITED"
)

func (e ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData25Type) ToPointer() *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData25Type {
	return &e
}
func (e *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData25Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_CREDITED":
		*e = ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData25Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData25Type: %v", v)
	}
}

type ListCustomerBalancesLedgerCustomerBalances5 struct {
	Type      ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData25Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
	SegmentID string                                                                                     `json:"segment_id"`
	InvoiceID string                                                                                     `json:"invoice_id"`
}

func (l ListCustomerBalancesLedgerCustomerBalances5) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCustomerBalancesLedgerCustomerBalances5) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListCustomerBalancesLedgerCustomerBalances5) GetType() ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData25Type {
	if o == nil {
		return ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData25Type("")
	}
	return o.Type
}

func (o *ListCustomerBalancesLedgerCustomerBalances5) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListCustomerBalancesLedgerCustomerBalances5) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListCustomerBalancesLedgerCustomerBalances5) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListCustomerBalancesLedgerCustomerBalances5) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData24Type string

const (
	ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData24TypeCreditCanceled ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData24Type = "CREDIT_CANCELED"
)

func (e ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData24Type) ToPointer() *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData24Type {
	return &e
}
func (e *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData24Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_CANCELED":
		*e = ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData24Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData24Type: %v", v)
	}
}

type ListCustomerBalancesLedgerCustomerBalances4 struct {
	Type      ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData24Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
	SegmentID string                                                                                     `json:"segment_id"`
	InvoiceID string                                                                                     `json:"invoice_id"`
}

func (l ListCustomerBalancesLedgerCustomerBalances4) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCustomerBalancesLedgerCustomerBalances4) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListCustomerBalancesLedgerCustomerBalances4) GetType() ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData24Type {
	if o == nil {
		return ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData24Type("")
	}
	return o.Type
}

func (o *ListCustomerBalancesLedgerCustomerBalances4) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListCustomerBalancesLedgerCustomerBalances4) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListCustomerBalancesLedgerCustomerBalances4) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListCustomerBalancesLedgerCustomerBalances4) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData23Type string

const (
	ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData23TypeCreditExpiration ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData23Type = "CREDIT_EXPIRATION"
)

func (e ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData23Type) ToPointer() *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData23Type {
	return &e
}
func (e *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData23Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_EXPIRATION":
		*e = ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData23Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData23Type: %v", v)
	}
}

type ListCustomerBalancesLedgerCustomerBalances3 struct {
	Type      ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData23Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
	SegmentID string                                                                                     `json:"segment_id"`
}

func (l ListCustomerBalancesLedgerCustomerBalances3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCustomerBalancesLedgerCustomerBalances3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListCustomerBalancesLedgerCustomerBalances3) GetType() ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData23Type {
	if o == nil {
		return ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData23Type("")
	}
	return o.Type
}

func (o *ListCustomerBalancesLedgerCustomerBalances3) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListCustomerBalancesLedgerCustomerBalances3) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListCustomerBalancesLedgerCustomerBalances3) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData22Type string

const (
	ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData22TypeCreditAutomatedInvoiceDeduction ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData22Type = "CREDIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData22Type) ToPointer() *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData22Type {
	return &e
}
func (e *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData22Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData22Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData22Type: %v", v)
	}
}

type ListCustomerBalancesLedgerCustomerBalances2 struct {
	Type      ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData22Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
	SegmentID string                                                                                     `json:"segment_id"`
	InvoiceID string                                                                                     `json:"invoice_id"`
}

func (l ListCustomerBalancesLedgerCustomerBalances2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCustomerBalancesLedgerCustomerBalances2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListCustomerBalancesLedgerCustomerBalances2) GetType() ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData22Type {
	if o == nil {
		return ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData22Type("")
	}
	return o.Type
}

func (o *ListCustomerBalancesLedgerCustomerBalances2) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListCustomerBalancesLedgerCustomerBalances2) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListCustomerBalancesLedgerCustomerBalances2) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListCustomerBalancesLedgerCustomerBalances2) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData2Type string

const (
	ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData2TypeCreditSegmentStart ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData2Type = "CREDIT_SEGMENT_START"
)

func (e ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData2Type) ToPointer() *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData2Type {
	return &e
}
func (e *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_SEGMENT_START":
		*e = ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData2Type: %v", v)
	}
}

type ListCustomerBalancesLedgerCustomerBalances1 struct {
	Type      ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData2Type `json:"type"`
	Timestamp time.Time                                                                                 `json:"timestamp"`
	Amount    float64                                                                                   `json:"amount"`
	SegmentID string                                                                                    `json:"segment_id"`
}

func (l ListCustomerBalancesLedgerCustomerBalances1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCustomerBalancesLedgerCustomerBalances1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListCustomerBalancesLedgerCustomerBalances1) GetType() ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData2Type {
	if o == nil {
		return ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData2Type("")
	}
	return o.Type
}

func (o *ListCustomerBalancesLedgerCustomerBalances1) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListCustomerBalancesLedgerCustomerBalances1) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListCustomerBalancesLedgerCustomerBalances1) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type ListCustomerBalancesDataLedgerType string

const (
	ListCustomerBalancesDataLedgerTypeListCustomerBalancesLedgerCustomerBalances1 ListCustomerBalancesDataLedgerType = "listCustomerBalances_ledger_customerBalances_1"
	ListCustomerBalancesDataLedgerTypeListCustomerBalancesLedgerCustomerBalances2 ListCustomerBalancesDataLedgerType = "listCustomerBalances_ledger_customerBalances_2"
	ListCustomerBalancesDataLedgerTypeListCustomerBalancesLedgerCustomerBalances3 ListCustomerBalancesDataLedgerType = "listCustomerBalances_ledger_customerBalances_3"
	ListCustomerBalancesDataLedgerTypeListCustomerBalancesLedgerCustomerBalances4 ListCustomerBalancesDataLedgerType = "listCustomerBalances_ledger_customerBalances_4"
	ListCustomerBalancesDataLedgerTypeListCustomerBalancesLedgerCustomerBalances5 ListCustomerBalancesDataLedgerType = "listCustomerBalances_ledger_customerBalances_5"
	ListCustomerBalancesDataLedgerTypeListCustomerBalancesLedgerCustomerBalances6 ListCustomerBalancesDataLedgerType = "listCustomerBalances_ledger_customerBalances_6"
)

type ListCustomerBalancesDataLedger struct {
	ListCustomerBalancesLedgerCustomerBalances1 *ListCustomerBalancesLedgerCustomerBalances1
	ListCustomerBalancesLedgerCustomerBalances2 *ListCustomerBalancesLedgerCustomerBalances2
	ListCustomerBalancesLedgerCustomerBalances3 *ListCustomerBalancesLedgerCustomerBalances3
	ListCustomerBalancesLedgerCustomerBalances4 *ListCustomerBalancesLedgerCustomerBalances4
	ListCustomerBalancesLedgerCustomerBalances5 *ListCustomerBalancesLedgerCustomerBalances5
	ListCustomerBalancesLedgerCustomerBalances6 *ListCustomerBalancesLedgerCustomerBalances6

	Type ListCustomerBalancesDataLedgerType
}

func CreateListCustomerBalancesDataLedgerListCustomerBalancesLedgerCustomerBalances1(listCustomerBalancesLedgerCustomerBalances1 ListCustomerBalancesLedgerCustomerBalances1) ListCustomerBalancesDataLedger {
	typ := ListCustomerBalancesDataLedgerTypeListCustomerBalancesLedgerCustomerBalances1

	return ListCustomerBalancesDataLedger{
		ListCustomerBalancesLedgerCustomerBalances1: &listCustomerBalancesLedgerCustomerBalances1,
		Type: typ,
	}
}

func CreateListCustomerBalancesDataLedgerListCustomerBalancesLedgerCustomerBalances2(listCustomerBalancesLedgerCustomerBalances2 ListCustomerBalancesLedgerCustomerBalances2) ListCustomerBalancesDataLedger {
	typ := ListCustomerBalancesDataLedgerTypeListCustomerBalancesLedgerCustomerBalances2

	return ListCustomerBalancesDataLedger{
		ListCustomerBalancesLedgerCustomerBalances2: &listCustomerBalancesLedgerCustomerBalances2,
		Type: typ,
	}
}

func CreateListCustomerBalancesDataLedgerListCustomerBalancesLedgerCustomerBalances3(listCustomerBalancesLedgerCustomerBalances3 ListCustomerBalancesLedgerCustomerBalances3) ListCustomerBalancesDataLedger {
	typ := ListCustomerBalancesDataLedgerTypeListCustomerBalancesLedgerCustomerBalances3

	return ListCustomerBalancesDataLedger{
		ListCustomerBalancesLedgerCustomerBalances3: &listCustomerBalancesLedgerCustomerBalances3,
		Type: typ,
	}
}

func CreateListCustomerBalancesDataLedgerListCustomerBalancesLedgerCustomerBalances4(listCustomerBalancesLedgerCustomerBalances4 ListCustomerBalancesLedgerCustomerBalances4) ListCustomerBalancesDataLedger {
	typ := ListCustomerBalancesDataLedgerTypeListCustomerBalancesLedgerCustomerBalances4

	return ListCustomerBalancesDataLedger{
		ListCustomerBalancesLedgerCustomerBalances4: &listCustomerBalancesLedgerCustomerBalances4,
		Type: typ,
	}
}

func CreateListCustomerBalancesDataLedgerListCustomerBalancesLedgerCustomerBalances5(listCustomerBalancesLedgerCustomerBalances5 ListCustomerBalancesLedgerCustomerBalances5) ListCustomerBalancesDataLedger {
	typ := ListCustomerBalancesDataLedgerTypeListCustomerBalancesLedgerCustomerBalances5

	return ListCustomerBalancesDataLedger{
		ListCustomerBalancesLedgerCustomerBalances5: &listCustomerBalancesLedgerCustomerBalances5,
		Type: typ,
	}
}

func CreateListCustomerBalancesDataLedgerListCustomerBalancesLedgerCustomerBalances6(listCustomerBalancesLedgerCustomerBalances6 ListCustomerBalancesLedgerCustomerBalances6) ListCustomerBalancesDataLedger {
	typ := ListCustomerBalancesDataLedgerTypeListCustomerBalancesLedgerCustomerBalances6

	return ListCustomerBalancesDataLedger{
		ListCustomerBalancesLedgerCustomerBalances6: &listCustomerBalancesLedgerCustomerBalances6,
		Type: typ,
	}
}

func (u *ListCustomerBalancesDataLedger) UnmarshalJSON(data []byte) error {

	var listCustomerBalancesLedgerCustomerBalances1 ListCustomerBalancesLedgerCustomerBalances1 = ListCustomerBalancesLedgerCustomerBalances1{}
	if err := utils.UnmarshalJSON(data, &listCustomerBalancesLedgerCustomerBalances1, "", true, true); err == nil {
		u.ListCustomerBalancesLedgerCustomerBalances1 = &listCustomerBalancesLedgerCustomerBalances1
		u.Type = ListCustomerBalancesDataLedgerTypeListCustomerBalancesLedgerCustomerBalances1
		return nil
	}

	var listCustomerBalancesLedgerCustomerBalances3 ListCustomerBalancesLedgerCustomerBalances3 = ListCustomerBalancesLedgerCustomerBalances3{}
	if err := utils.UnmarshalJSON(data, &listCustomerBalancesLedgerCustomerBalances3, "", true, true); err == nil {
		u.ListCustomerBalancesLedgerCustomerBalances3 = &listCustomerBalancesLedgerCustomerBalances3
		u.Type = ListCustomerBalancesDataLedgerTypeListCustomerBalancesLedgerCustomerBalances3
		return nil
	}

	var listCustomerBalancesLedgerCustomerBalances6 ListCustomerBalancesLedgerCustomerBalances6 = ListCustomerBalancesLedgerCustomerBalances6{}
	if err := utils.UnmarshalJSON(data, &listCustomerBalancesLedgerCustomerBalances6, "", true, true); err == nil {
		u.ListCustomerBalancesLedgerCustomerBalances6 = &listCustomerBalancesLedgerCustomerBalances6
		u.Type = ListCustomerBalancesDataLedgerTypeListCustomerBalancesLedgerCustomerBalances6
		return nil
	}

	var listCustomerBalancesLedgerCustomerBalances2 ListCustomerBalancesLedgerCustomerBalances2 = ListCustomerBalancesLedgerCustomerBalances2{}
	if err := utils.UnmarshalJSON(data, &listCustomerBalancesLedgerCustomerBalances2, "", true, true); err == nil {
		u.ListCustomerBalancesLedgerCustomerBalances2 = &listCustomerBalancesLedgerCustomerBalances2
		u.Type = ListCustomerBalancesDataLedgerTypeListCustomerBalancesLedgerCustomerBalances2
		return nil
	}

	var listCustomerBalancesLedgerCustomerBalances4 ListCustomerBalancesLedgerCustomerBalances4 = ListCustomerBalancesLedgerCustomerBalances4{}
	if err := utils.UnmarshalJSON(data, &listCustomerBalancesLedgerCustomerBalances4, "", true, true); err == nil {
		u.ListCustomerBalancesLedgerCustomerBalances4 = &listCustomerBalancesLedgerCustomerBalances4
		u.Type = ListCustomerBalancesDataLedgerTypeListCustomerBalancesLedgerCustomerBalances4
		return nil
	}

	var listCustomerBalancesLedgerCustomerBalances5 ListCustomerBalancesLedgerCustomerBalances5 = ListCustomerBalancesLedgerCustomerBalances5{}
	if err := utils.UnmarshalJSON(data, &listCustomerBalancesLedgerCustomerBalances5, "", true, true); err == nil {
		u.ListCustomerBalancesLedgerCustomerBalances5 = &listCustomerBalancesLedgerCustomerBalances5
		u.Type = ListCustomerBalancesDataLedgerTypeListCustomerBalancesLedgerCustomerBalances5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListCustomerBalancesDataLedger", string(data))
}

func (u ListCustomerBalancesDataLedger) MarshalJSON() ([]byte, error) {
	if u.ListCustomerBalancesLedgerCustomerBalances1 != nil {
		return utils.MarshalJSON(u.ListCustomerBalancesLedgerCustomerBalances1, "", true)
	}

	if u.ListCustomerBalancesLedgerCustomerBalances2 != nil {
		return utils.MarshalJSON(u.ListCustomerBalancesLedgerCustomerBalances2, "", true)
	}

	if u.ListCustomerBalancesLedgerCustomerBalances3 != nil {
		return utils.MarshalJSON(u.ListCustomerBalancesLedgerCustomerBalances3, "", true)
	}

	if u.ListCustomerBalancesLedgerCustomerBalances4 != nil {
		return utils.MarshalJSON(u.ListCustomerBalancesLedgerCustomerBalances4, "", true)
	}

	if u.ListCustomerBalancesLedgerCustomerBalances5 != nil {
		return utils.MarshalJSON(u.ListCustomerBalancesLedgerCustomerBalances5, "", true)
	}

	if u.ListCustomerBalancesLedgerCustomerBalances6 != nil {
		return utils.MarshalJSON(u.ListCustomerBalancesLedgerCustomerBalances6, "", true)
	}

	return nil, errors.New("could not marshal union type ListCustomerBalancesDataLedger: all fields are null")
}

type Two struct {
	ID       string                            `json:"id"`
	Contract *ListCustomerBalancesDataContract `json:"contract,omitempty"`
	Type     ListCustomerBalancesDataType      `json:"type"`
	Name     *string                           `json:"name,omitempty"`
	// If multiple credits or commits are applicable, the one with the lower priority will apply first.
	Priority *float64                        `json:"priority,omitempty"`
	Product  ListCustomerBalancesDataProduct `json:"product"`
	// The schedule that the customer will gain access to the credits.
	AccessSchedule        *ListCustomerBalancesDataAccessSchedule `json:"access_schedule,omitempty"`
	Description           *string                                 `json:"description,omitempty"`
	ApplicableProductIds  []string                                `json:"applicable_product_ids,omitempty"`
	ApplicableProductTags []string                                `json:"applicable_product_tags,omitempty"`
	ApplicableContractIds []string                                `json:"applicable_contract_ids,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string `json:"salesforce_opportunity_id,omitempty"`
	// A list of ordered events that impact the balance of a credit. For example, an invoice deduction or an expiration.
	Ledger       []ListCustomerBalancesDataLedger `json:"ledger,omitempty"`
	CustomFields map[string]string                `json:"custom_fields,omitempty"`
}

func (o *Two) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Two) GetContract() *ListCustomerBalancesDataContract {
	if o == nil {
		return nil
	}
	return o.Contract
}

func (o *Two) GetType() ListCustomerBalancesDataType {
	if o == nil {
		return ListCustomerBalancesDataType("")
	}
	return o.Type
}

func (o *Two) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Two) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *Two) GetProduct() ListCustomerBalancesDataProduct {
	if o == nil {
		return ListCustomerBalancesDataProduct{}
	}
	return o.Product
}

func (o *Two) GetAccessSchedule() *ListCustomerBalancesDataAccessSchedule {
	if o == nil {
		return nil
	}
	return o.AccessSchedule
}

func (o *Two) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Two) GetApplicableProductIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductIds
}

func (o *Two) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *Two) GetApplicableContractIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableContractIds
}

func (o *Two) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *Two) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *Two) GetLedger() []ListCustomerBalancesDataLedger {
	if o == nil {
		return nil
	}
	return o.Ledger
}

func (o *Two) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type DataContract struct {
	ID string `json:"id"`
}

func (o *DataContract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type DataType string

const (
	DataTypePrepaid  DataType = "PREPAID"
	DataTypePostpaid DataType = "POSTPAID"
)

func (e DataType) ToPointer() *DataType {
	return &e
}
func (e *DataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID":
		fallthrough
	case "POSTPAID":
		*e = DataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataType: %v", v)
	}
}

type DataProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *DataProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DataProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type DataCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *DataCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DataCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type DataScheduleItems struct {
	ID           string    `json:"id"`
	Amount       float64   `json:"amount"`
	StartingAt   time.Time `json:"starting_at"`
	EndingBefore time.Time `json:"ending_before"`
}

func (d DataScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DataScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *DataScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DataScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *DataScheduleItems) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *DataScheduleItems) GetEndingBefore() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndingBefore
}

// DataAccessSchedule - The schedule that the customer will gain access to the credits purposed with this commit.
type DataAccessSchedule struct {
	CreditType    *DataCreditType     `json:"credit_type,omitempty"`
	ScheduleItems []DataScheduleItems `json:"schedule_items"`
}

func (o *DataAccessSchedule) GetCreditType() *DataCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *DataAccessSchedule) GetScheduleItems() []DataScheduleItems {
	if o == nil {
		return []DataScheduleItems{}
	}
	return o.ScheduleItems
}

type ListCustomerBalancesDataCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListCustomerBalancesDataCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListCustomerBalancesDataCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListCustomerBalancesDataScheduleItems struct {
	ID        string    `json:"id"`
	InvoiceID string    `json:"invoice_id"`
	Amount    float64   `json:"amount"`
	UnitPrice float64   `json:"unit_price"`
	Quantity  float64   `json:"quantity"`
	Timestamp time.Time `json:"timestamp"`
}

func (l ListCustomerBalancesDataScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCustomerBalancesDataScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListCustomerBalancesDataScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListCustomerBalancesDataScheduleItems) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *ListCustomerBalancesDataScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListCustomerBalancesDataScheduleItems) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *ListCustomerBalancesDataScheduleItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *ListCustomerBalancesDataScheduleItems) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

// DataInvoiceSchedule - The schedule that the customer will be invoiced for this commit.
type DataInvoiceSchedule struct {
	CreditType    *ListCustomerBalancesDataCreditType     `json:"credit_type,omitempty"`
	ScheduleItems []ListCustomerBalancesDataScheduleItems `json:"schedule_items,omitempty"`
}

func (o *DataInvoiceSchedule) GetCreditType() *ListCustomerBalancesDataCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *DataInvoiceSchedule) GetScheduleItems() []ListCustomerBalancesDataScheduleItems {
	if o == nil {
		return nil
	}
	return o.ScheduleItems
}

// DataInvoiceContract - The contract that this commit will be billed on.
type DataInvoiceContract struct {
	ID string `json:"id"`
}

func (o *DataInvoiceContract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type DataRolledOverFrom struct {
	CommitID   string `json:"commit_id"`
	ContractID string `json:"contract_id"`
}

func (o *DataRolledOverFrom) GetCommitID() string {
	if o == nil {
		return ""
	}
	return o.CommitID
}

func (o *DataRolledOverFrom) GetContractID() string {
	if o == nil {
		return ""
	}
	return o.ContractID
}

type ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData113Type string

const (
	ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData113TypePostpaidCommitExpiration ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData113Type = "POSTPAID_COMMIT_EXPIRATION"
)

func (e ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData113Type) ToPointer() *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData113Type {
	return &e
}
func (e *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData113Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_EXPIRATION":
		*e = ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData113Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData113Type: %v", v)
	}
}

type Ledger13 struct {
	Type      ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData113Type `json:"type"`
	Timestamp time.Time                                                                                   `json:"timestamp"`
	Amount    float64                                                                                     `json:"amount"`
}

func (l Ledger13) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *Ledger13) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Ledger13) GetType() ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData113Type {
	if o == nil {
		return ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData113Type("")
	}
	return o.Type
}

func (o *Ledger13) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *Ledger13) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

type ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData112Type string

const (
	ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData112TypePostpaidCommitManual ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData112Type = "POSTPAID_COMMIT_MANUAL"
)

func (e ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData112Type) ToPointer() *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData112Type {
	return &e
}
func (e *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData112Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_MANUAL":
		*e = ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData112Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData112Type: %v", v)
	}
}

type Ledger12 struct {
	Type      ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData112Type `json:"type"`
	Timestamp time.Time                                                                                   `json:"timestamp"`
	Amount    float64                                                                                     `json:"amount"`
	Reason    string                                                                                      `json:"reason"`
}

func (l Ledger12) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *Ledger12) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Ledger12) GetType() ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData112Type {
	if o == nil {
		return ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData112Type("")
	}
	return o.Type
}

func (o *Ledger12) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *Ledger12) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *Ledger12) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData111Type string

const (
	ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData111TypePrepaidCommitManual ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData111Type = "PREPAID_COMMIT_MANUAL"
)

func (e ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData111Type) ToPointer() *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData111Type {
	return &e
}
func (e *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData111Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_MANUAL":
		*e = ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData111Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData111Type: %v", v)
	}
}

type Ledger11 struct {
	Type      ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData111Type `json:"type"`
	Timestamp time.Time                                                                                   `json:"timestamp"`
	Amount    float64                                                                                     `json:"amount"`
	Reason    string                                                                                      `json:"reason"`
}

func (l Ledger11) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *Ledger11) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Ledger11) GetType() ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData111Type {
	if o == nil {
		return ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData111Type("")
	}
	return o.Type
}

func (o *Ledger11) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *Ledger11) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *Ledger11) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData110Type string

const (
	ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData110TypePostpaidCommitTrueup ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData110Type = "POSTPAID_COMMIT_TRUEUP"
)

func (e ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData110Type) ToPointer() *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData110Type {
	return &e
}
func (e *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData110Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_TRUEUP":
		*e = ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData110Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData110Type: %v", v)
	}
}

type Ledger10 struct {
	Type      ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData110Type `json:"type"`
	Timestamp time.Time                                                                                   `json:"timestamp"`
	Amount    float64                                                                                     `json:"amount"`
	InvoiceID string                                                                                      `json:"invoice_id"`
}

func (l Ledger10) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *Ledger10) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Ledger10) GetType() ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData110Type {
	if o == nil {
		return ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData110Type("")
	}
	return o.Type
}

func (o *Ledger10) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *Ledger10) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *Ledger10) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData19Type string

const (
	ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData19TypePostpaidCommitRollover ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData19Type = "POSTPAID_COMMIT_ROLLOVER"
)

func (e ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData19Type) ToPointer() *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData19Type {
	return &e
}
func (e *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData19Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_ROLLOVER":
		*e = ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData19Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData19Type: %v", v)
	}
}

type Ledger9 struct {
	Type          ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData19Type `json:"type"`
	Timestamp     time.Time                                                                                  `json:"timestamp"`
	Amount        float64                                                                                    `json:"amount"`
	SegmentID     string                                                                                     `json:"segment_id"`
	NewContractID string                                                                                     `json:"new_contract_id"`
}

func (l Ledger9) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *Ledger9) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Ledger9) GetType() ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData19Type {
	if o == nil {
		return ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData19Type("")
	}
	return o.Type
}

func (o *Ledger9) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *Ledger9) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *Ledger9) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *Ledger9) GetNewContractID() string {
	if o == nil {
		return ""
	}
	return o.NewContractID
}

type ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData1Type string

const (
	ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData1TypePostpaidCommitAutomatedInvoiceDeduction ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData1Type = "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData1Type) ToPointer() *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData1Type {
	return &e
}
func (e *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData1Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData1Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData1Type: %v", v)
	}
}

type Ledger8 struct {
	Type      ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData1Type `json:"type"`
	Timestamp time.Time                                                                                 `json:"timestamp"`
	Amount    float64                                                                                   `json:"amount"`
	SegmentID string                                                                                    `json:"segment_id"`
	InvoiceID string                                                                                    `json:"invoice_id"`
}

func (l Ledger8) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *Ledger8) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Ledger8) GetType() ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData1Type {
	if o == nil {
		return ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyData1Type("")
	}
	return o.Type
}

func (o *Ledger8) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *Ledger8) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *Ledger8) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *Ledger8) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyDataType string

const (
	ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyDataTypePostpaidCommitInitialBalance ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyDataType = "POSTPAID_COMMIT_INITIAL_BALANCE"
)

func (e ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyDataType) ToPointer() *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyDataType {
	return &e
}
func (e *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_INITIAL_BALANCE":
		*e = ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyDataType: %v", v)
	}
}

type Ledger7 struct {
	Type      ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyDataType `json:"type"`
	Timestamp time.Time                                                                                `json:"timestamp"`
	Amount    float64                                                                                  `json:"amount"`
}

func (l Ledger7) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *Ledger7) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Ledger7) GetType() ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyDataType {
	if o == nil {
		return ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyDataType("")
	}
	return o.Type
}

func (o *Ledger7) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *Ledger7) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

type ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyType string

const (
	ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyTypePrepaidCommitCredited ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyType = "PREPAID_COMMIT_CREDITED"
)

func (e ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyType) ToPointer() *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_CREDITED":
		*e = ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type ListCustomerBalancesLedger6 struct {
	Type      ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyType `json:"type"`
	Timestamp time.Time                                                                            `json:"timestamp"`
	Amount    float64                                                                              `json:"amount"`
	SegmentID string                                                                               `json:"segment_id"`
	InvoiceID string                                                                               `json:"invoice_id"`
}

func (l ListCustomerBalancesLedger6) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCustomerBalancesLedger6) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListCustomerBalancesLedger6) GetType() ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *ListCustomerBalancesLedger6) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListCustomerBalancesLedger6) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListCustomerBalancesLedger6) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListCustomerBalancesLedger6) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONType string

const (
	ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONTypePrepaidCommitCanceled ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONType = "PREPAID_COMMIT_CANCELED"
)

func (e ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONType) ToPointer() *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONType {
	return &e
}
func (e *ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_CANCELED":
		*e = ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONType: %v", v)
	}
}

type ListCustomerBalancesLedger5 struct {
	Type      ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONType `json:"type"`
	Timestamp time.Time                                                                `json:"timestamp"`
	Amount    float64                                                                  `json:"amount"`
	SegmentID string                                                                   `json:"segment_id"`
	InvoiceID string                                                                   `json:"invoice_id"`
}

func (l ListCustomerBalancesLedger5) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCustomerBalancesLedger5) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListCustomerBalancesLedger5) GetType() ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONType {
	if o == nil {
		return ListCustomerBalancesLedgerCustomerBalancesResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *ListCustomerBalancesLedger5) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListCustomerBalancesLedger5) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListCustomerBalancesLedger5) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListCustomerBalancesLedger5) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListCustomerBalancesLedgerCustomerBalancesResponse200Type string

const (
	ListCustomerBalancesLedgerCustomerBalancesResponse200TypePrepaidCommitExpiration ListCustomerBalancesLedgerCustomerBalancesResponse200Type = "PREPAID_COMMIT_EXPIRATION"
)

func (e ListCustomerBalancesLedgerCustomerBalancesResponse200Type) ToPointer() *ListCustomerBalancesLedgerCustomerBalancesResponse200Type {
	return &e
}
func (e *ListCustomerBalancesLedgerCustomerBalancesResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_EXPIRATION":
		*e = ListCustomerBalancesLedgerCustomerBalancesResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerBalancesLedgerCustomerBalancesResponse200Type: %v", v)
	}
}

type ListCustomerBalancesLedger4 struct {
	Type      ListCustomerBalancesLedgerCustomerBalancesResponse200Type `json:"type"`
	Timestamp time.Time                                                 `json:"timestamp"`
	Amount    float64                                                   `json:"amount"`
	SegmentID string                                                    `json:"segment_id"`
}

func (l ListCustomerBalancesLedger4) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCustomerBalancesLedger4) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListCustomerBalancesLedger4) GetType() ListCustomerBalancesLedgerCustomerBalancesResponse200Type {
	if o == nil {
		return ListCustomerBalancesLedgerCustomerBalancesResponse200Type("")
	}
	return o.Type
}

func (o *ListCustomerBalancesLedger4) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListCustomerBalancesLedger4) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListCustomerBalancesLedger4) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type ListCustomerBalancesLedgerCustomerBalancesResponseType string

const (
	ListCustomerBalancesLedgerCustomerBalancesResponseTypePrepaidCommitRollover ListCustomerBalancesLedgerCustomerBalancesResponseType = "PREPAID_COMMIT_ROLLOVER"
)

func (e ListCustomerBalancesLedgerCustomerBalancesResponseType) ToPointer() *ListCustomerBalancesLedgerCustomerBalancesResponseType {
	return &e
}
func (e *ListCustomerBalancesLedgerCustomerBalancesResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_ROLLOVER":
		*e = ListCustomerBalancesLedgerCustomerBalancesResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerBalancesLedgerCustomerBalancesResponseType: %v", v)
	}
}

type ListCustomerBalancesLedger3 struct {
	Type          ListCustomerBalancesLedgerCustomerBalancesResponseType `json:"type"`
	Timestamp     time.Time                                              `json:"timestamp"`
	Amount        float64                                                `json:"amount"`
	SegmentID     string                                                 `json:"segment_id"`
	NewContractID string                                                 `json:"new_contract_id"`
}

func (l ListCustomerBalancesLedger3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCustomerBalancesLedger3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListCustomerBalancesLedger3) GetType() ListCustomerBalancesLedgerCustomerBalancesResponseType {
	if o == nil {
		return ListCustomerBalancesLedgerCustomerBalancesResponseType("")
	}
	return o.Type
}

func (o *ListCustomerBalancesLedger3) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListCustomerBalancesLedger3) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListCustomerBalancesLedger3) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListCustomerBalancesLedger3) GetNewContractID() string {
	if o == nil {
		return ""
	}
	return o.NewContractID
}

type ListCustomerBalancesLedgerCustomerBalancesType string

const (
	ListCustomerBalancesLedgerCustomerBalancesTypePrepaidCommitAutomatedInvoiceDeduction ListCustomerBalancesLedgerCustomerBalancesType = "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e ListCustomerBalancesLedgerCustomerBalancesType) ToPointer() *ListCustomerBalancesLedgerCustomerBalancesType {
	return &e
}
func (e *ListCustomerBalancesLedgerCustomerBalancesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = ListCustomerBalancesLedgerCustomerBalancesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerBalancesLedgerCustomerBalancesType: %v", v)
	}
}

type ListCustomerBalancesLedger2 struct {
	Type      ListCustomerBalancesLedgerCustomerBalancesType `json:"type"`
	Timestamp time.Time                                      `json:"timestamp"`
	Amount    float64                                        `json:"amount"`
	SegmentID string                                         `json:"segment_id"`
	InvoiceID string                                         `json:"invoice_id"`
}

func (l ListCustomerBalancesLedger2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCustomerBalancesLedger2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListCustomerBalancesLedger2) GetType() ListCustomerBalancesLedgerCustomerBalancesType {
	if o == nil {
		return ListCustomerBalancesLedgerCustomerBalancesType("")
	}
	return o.Type
}

func (o *ListCustomerBalancesLedger2) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListCustomerBalancesLedger2) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListCustomerBalancesLedger2) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListCustomerBalancesLedger2) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListCustomerBalancesLedgerType string

const (
	ListCustomerBalancesLedgerTypePrepaidCommitSegmentStart ListCustomerBalancesLedgerType = "PREPAID_COMMIT_SEGMENT_START"
)

func (e ListCustomerBalancesLedgerType) ToPointer() *ListCustomerBalancesLedgerType {
	return &e
}
func (e *ListCustomerBalancesLedgerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_SEGMENT_START":
		*e = ListCustomerBalancesLedgerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerBalancesLedgerType: %v", v)
	}
}

type ListCustomerBalancesLedger1 struct {
	Type      ListCustomerBalancesLedgerType `json:"type"`
	Timestamp time.Time                      `json:"timestamp"`
	Amount    float64                        `json:"amount"`
	SegmentID string                         `json:"segment_id"`
}

func (l ListCustomerBalancesLedger1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCustomerBalancesLedger1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListCustomerBalancesLedger1) GetType() ListCustomerBalancesLedgerType {
	if o == nil {
		return ListCustomerBalancesLedgerType("")
	}
	return o.Type
}

func (o *ListCustomerBalancesLedger1) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListCustomerBalancesLedger1) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListCustomerBalancesLedger1) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type DataLedgerType string

const (
	DataLedgerTypeListCustomerBalancesLedger1 DataLedgerType = "listCustomerBalances_ledger_1"
	DataLedgerTypeListCustomerBalancesLedger2 DataLedgerType = "listCustomerBalances_ledger_2"
	DataLedgerTypeListCustomerBalancesLedger3 DataLedgerType = "listCustomerBalances_ledger_3"
	DataLedgerTypeListCustomerBalancesLedger4 DataLedgerType = "listCustomerBalances_ledger_4"
	DataLedgerTypeListCustomerBalancesLedger5 DataLedgerType = "listCustomerBalances_ledger_5"
	DataLedgerTypeListCustomerBalancesLedger6 DataLedgerType = "listCustomerBalances_ledger_6"
	DataLedgerTypeLedger7                     DataLedgerType = "ledger_7"
	DataLedgerTypeLedger8                     DataLedgerType = "ledger_8"
	DataLedgerTypeLedger9                     DataLedgerType = "ledger_9"
	DataLedgerTypeLedger10                    DataLedgerType = "ledger_10"
	DataLedgerTypeLedger11                    DataLedgerType = "ledger_11"
	DataLedgerTypeLedger12                    DataLedgerType = "ledger_12"
	DataLedgerTypeLedger13                    DataLedgerType = "ledger_13"
)

type DataLedger struct {
	ListCustomerBalancesLedger1 *ListCustomerBalancesLedger1
	ListCustomerBalancesLedger2 *ListCustomerBalancesLedger2
	ListCustomerBalancesLedger3 *ListCustomerBalancesLedger3
	ListCustomerBalancesLedger4 *ListCustomerBalancesLedger4
	ListCustomerBalancesLedger5 *ListCustomerBalancesLedger5
	ListCustomerBalancesLedger6 *ListCustomerBalancesLedger6
	Ledger7                     *Ledger7
	Ledger8                     *Ledger8
	Ledger9                     *Ledger9
	Ledger10                    *Ledger10
	Ledger11                    *Ledger11
	Ledger12                    *Ledger12
	Ledger13                    *Ledger13

	Type DataLedgerType
}

func CreateDataLedgerListCustomerBalancesLedger1(listCustomerBalancesLedger1 ListCustomerBalancesLedger1) DataLedger {
	typ := DataLedgerTypeListCustomerBalancesLedger1

	return DataLedger{
		ListCustomerBalancesLedger1: &listCustomerBalancesLedger1,
		Type:                        typ,
	}
}

func CreateDataLedgerListCustomerBalancesLedger2(listCustomerBalancesLedger2 ListCustomerBalancesLedger2) DataLedger {
	typ := DataLedgerTypeListCustomerBalancesLedger2

	return DataLedger{
		ListCustomerBalancesLedger2: &listCustomerBalancesLedger2,
		Type:                        typ,
	}
}

func CreateDataLedgerListCustomerBalancesLedger3(listCustomerBalancesLedger3 ListCustomerBalancesLedger3) DataLedger {
	typ := DataLedgerTypeListCustomerBalancesLedger3

	return DataLedger{
		ListCustomerBalancesLedger3: &listCustomerBalancesLedger3,
		Type:                        typ,
	}
}

func CreateDataLedgerListCustomerBalancesLedger4(listCustomerBalancesLedger4 ListCustomerBalancesLedger4) DataLedger {
	typ := DataLedgerTypeListCustomerBalancesLedger4

	return DataLedger{
		ListCustomerBalancesLedger4: &listCustomerBalancesLedger4,
		Type:                        typ,
	}
}

func CreateDataLedgerListCustomerBalancesLedger5(listCustomerBalancesLedger5 ListCustomerBalancesLedger5) DataLedger {
	typ := DataLedgerTypeListCustomerBalancesLedger5

	return DataLedger{
		ListCustomerBalancesLedger5: &listCustomerBalancesLedger5,
		Type:                        typ,
	}
}

func CreateDataLedgerListCustomerBalancesLedger6(listCustomerBalancesLedger6 ListCustomerBalancesLedger6) DataLedger {
	typ := DataLedgerTypeListCustomerBalancesLedger6

	return DataLedger{
		ListCustomerBalancesLedger6: &listCustomerBalancesLedger6,
		Type:                        typ,
	}
}

func CreateDataLedgerLedger7(ledger7 Ledger7) DataLedger {
	typ := DataLedgerTypeLedger7

	return DataLedger{
		Ledger7: &ledger7,
		Type:    typ,
	}
}

func CreateDataLedgerLedger8(ledger8 Ledger8) DataLedger {
	typ := DataLedgerTypeLedger8

	return DataLedger{
		Ledger8: &ledger8,
		Type:    typ,
	}
}

func CreateDataLedgerLedger9(ledger9 Ledger9) DataLedger {
	typ := DataLedgerTypeLedger9

	return DataLedger{
		Ledger9: &ledger9,
		Type:    typ,
	}
}

func CreateDataLedgerLedger10(ledger10 Ledger10) DataLedger {
	typ := DataLedgerTypeLedger10

	return DataLedger{
		Ledger10: &ledger10,
		Type:     typ,
	}
}

func CreateDataLedgerLedger11(ledger11 Ledger11) DataLedger {
	typ := DataLedgerTypeLedger11

	return DataLedger{
		Ledger11: &ledger11,
		Type:     typ,
	}
}

func CreateDataLedgerLedger12(ledger12 Ledger12) DataLedger {
	typ := DataLedgerTypeLedger12

	return DataLedger{
		Ledger12: &ledger12,
		Type:     typ,
	}
}

func CreateDataLedgerLedger13(ledger13 Ledger13) DataLedger {
	typ := DataLedgerTypeLedger13

	return DataLedger{
		Ledger13: &ledger13,
		Type:     typ,
	}
}

func (u *DataLedger) UnmarshalJSON(data []byte) error {

	var ledger7 Ledger7 = Ledger7{}
	if err := utils.UnmarshalJSON(data, &ledger7, "", true, true); err == nil {
		u.Ledger7 = &ledger7
		u.Type = DataLedgerTypeLedger7
		return nil
	}

	var ledger13 Ledger13 = Ledger13{}
	if err := utils.UnmarshalJSON(data, &ledger13, "", true, true); err == nil {
		u.Ledger13 = &ledger13
		u.Type = DataLedgerTypeLedger13
		return nil
	}

	var listCustomerBalancesLedger4 ListCustomerBalancesLedger4 = ListCustomerBalancesLedger4{}
	if err := utils.UnmarshalJSON(data, &listCustomerBalancesLedger4, "", true, true); err == nil {
		u.ListCustomerBalancesLedger4 = &listCustomerBalancesLedger4
		u.Type = DataLedgerTypeListCustomerBalancesLedger4
		return nil
	}

	var listCustomerBalancesLedger1 ListCustomerBalancesLedger1 = ListCustomerBalancesLedger1{}
	if err := utils.UnmarshalJSON(data, &listCustomerBalancesLedger1, "", true, true); err == nil {
		u.ListCustomerBalancesLedger1 = &listCustomerBalancesLedger1
		u.Type = DataLedgerTypeListCustomerBalancesLedger1
		return nil
	}

	var ledger10 Ledger10 = Ledger10{}
	if err := utils.UnmarshalJSON(data, &ledger10, "", true, true); err == nil {
		u.Ledger10 = &ledger10
		u.Type = DataLedgerTypeLedger10
		return nil
	}

	var ledger11 Ledger11 = Ledger11{}
	if err := utils.UnmarshalJSON(data, &ledger11, "", true, true); err == nil {
		u.Ledger11 = &ledger11
		u.Type = DataLedgerTypeLedger11
		return nil
	}

	var ledger12 Ledger12 = Ledger12{}
	if err := utils.UnmarshalJSON(data, &ledger12, "", true, true); err == nil {
		u.Ledger12 = &ledger12
		u.Type = DataLedgerTypeLedger12
		return nil
	}

	var listCustomerBalancesLedger5 ListCustomerBalancesLedger5 = ListCustomerBalancesLedger5{}
	if err := utils.UnmarshalJSON(data, &listCustomerBalancesLedger5, "", true, true); err == nil {
		u.ListCustomerBalancesLedger5 = &listCustomerBalancesLedger5
		u.Type = DataLedgerTypeListCustomerBalancesLedger5
		return nil
	}

	var listCustomerBalancesLedger6 ListCustomerBalancesLedger6 = ListCustomerBalancesLedger6{}
	if err := utils.UnmarshalJSON(data, &listCustomerBalancesLedger6, "", true, true); err == nil {
		u.ListCustomerBalancesLedger6 = &listCustomerBalancesLedger6
		u.Type = DataLedgerTypeListCustomerBalancesLedger6
		return nil
	}

	var listCustomerBalancesLedger3 ListCustomerBalancesLedger3 = ListCustomerBalancesLedger3{}
	if err := utils.UnmarshalJSON(data, &listCustomerBalancesLedger3, "", true, true); err == nil {
		u.ListCustomerBalancesLedger3 = &listCustomerBalancesLedger3
		u.Type = DataLedgerTypeListCustomerBalancesLedger3
		return nil
	}

	var ledger8 Ledger8 = Ledger8{}
	if err := utils.UnmarshalJSON(data, &ledger8, "", true, true); err == nil {
		u.Ledger8 = &ledger8
		u.Type = DataLedgerTypeLedger8
		return nil
	}

	var ledger9 Ledger9 = Ledger9{}
	if err := utils.UnmarshalJSON(data, &ledger9, "", true, true); err == nil {
		u.Ledger9 = &ledger9
		u.Type = DataLedgerTypeLedger9
		return nil
	}

	var listCustomerBalancesLedger2 ListCustomerBalancesLedger2 = ListCustomerBalancesLedger2{}
	if err := utils.UnmarshalJSON(data, &listCustomerBalancesLedger2, "", true, true); err == nil {
		u.ListCustomerBalancesLedger2 = &listCustomerBalancesLedger2
		u.Type = DataLedgerTypeListCustomerBalancesLedger2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DataLedger", string(data))
}

func (u DataLedger) MarshalJSON() ([]byte, error) {
	if u.ListCustomerBalancesLedger1 != nil {
		return utils.MarshalJSON(u.ListCustomerBalancesLedger1, "", true)
	}

	if u.ListCustomerBalancesLedger2 != nil {
		return utils.MarshalJSON(u.ListCustomerBalancesLedger2, "", true)
	}

	if u.ListCustomerBalancesLedger3 != nil {
		return utils.MarshalJSON(u.ListCustomerBalancesLedger3, "", true)
	}

	if u.ListCustomerBalancesLedger4 != nil {
		return utils.MarshalJSON(u.ListCustomerBalancesLedger4, "", true)
	}

	if u.ListCustomerBalancesLedger5 != nil {
		return utils.MarshalJSON(u.ListCustomerBalancesLedger5, "", true)
	}

	if u.ListCustomerBalancesLedger6 != nil {
		return utils.MarshalJSON(u.ListCustomerBalancesLedger6, "", true)
	}

	if u.Ledger7 != nil {
		return utils.MarshalJSON(u.Ledger7, "", true)
	}

	if u.Ledger8 != nil {
		return utils.MarshalJSON(u.Ledger8, "", true)
	}

	if u.Ledger9 != nil {
		return utils.MarshalJSON(u.Ledger9, "", true)
	}

	if u.Ledger10 != nil {
		return utils.MarshalJSON(u.Ledger10, "", true)
	}

	if u.Ledger11 != nil {
		return utils.MarshalJSON(u.Ledger11, "", true)
	}

	if u.Ledger12 != nil {
		return utils.MarshalJSON(u.Ledger12, "", true)
	}

	if u.Ledger13 != nil {
		return utils.MarshalJSON(u.Ledger13, "", true)
	}

	return nil, errors.New("could not marshal union type DataLedger: all fields are null")
}

type One struct {
	ID       string        `json:"id"`
	Contract *DataContract `json:"contract,omitempty"`
	Type     DataType      `json:"type"`
	Name     *string       `json:"name,omitempty"`
	// If multiple credits or commits are applicable, the one with the lower priority will apply first.
	Priority *float64    `json:"priority,omitempty"`
	Product  DataProduct `json:"product"`
	// The schedule that the customer will gain access to the credits purposed with this commit.
	AccessSchedule *DataAccessSchedule `json:"access_schedule,omitempty"`
	// The schedule that the customer will be invoiced for this commit.
	InvoiceSchedule *DataInvoiceSchedule `json:"invoice_schedule,omitempty"`
	// The contract that this commit will be billed on.
	InvoiceContract       *DataInvoiceContract `json:"invoice_contract,omitempty"`
	RolledOverFrom        *DataRolledOverFrom  `json:"rolled_over_from,omitempty"`
	Description           *string              `json:"description,omitempty"`
	RolloverFraction      *float64             `json:"rollover_fraction,omitempty"`
	ApplicableProductIds  []string             `json:"applicable_product_ids,omitempty"`
	ApplicableProductTags []string             `json:"applicable_product_tags,omitempty"`
	ApplicableContractIds []string             `json:"applicable_contract_ids,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// (DEPRECATED) Use access_schedule + invoice_schedule instead.
	Amount *float64 `json:"amount,omitempty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string `json:"salesforce_opportunity_id,omitempty"`
	// A list of ordered events that impact the balance of a commit. For example, an invoice deduction or a rollover.
	Ledger       []DataLedger      `json:"ledger,omitempty"`
	CustomFields map[string]string `json:"custom_fields,omitempty"`
}

func (o *One) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *One) GetContract() *DataContract {
	if o == nil {
		return nil
	}
	return o.Contract
}

func (o *One) GetType() DataType {
	if o == nil {
		return DataType("")
	}
	return o.Type
}

func (o *One) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *One) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *One) GetProduct() DataProduct {
	if o == nil {
		return DataProduct{}
	}
	return o.Product
}

func (o *One) GetAccessSchedule() *DataAccessSchedule {
	if o == nil {
		return nil
	}
	return o.AccessSchedule
}

func (o *One) GetInvoiceSchedule() *DataInvoiceSchedule {
	if o == nil {
		return nil
	}
	return o.InvoiceSchedule
}

func (o *One) GetInvoiceContract() *DataInvoiceContract {
	if o == nil {
		return nil
	}
	return o.InvoiceContract
}

func (o *One) GetRolledOverFrom() *DataRolledOverFrom {
	if o == nil {
		return nil
	}
	return o.RolledOverFrom
}

func (o *One) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *One) GetRolloverFraction() *float64 {
	if o == nil {
		return nil
	}
	return o.RolloverFraction
}

func (o *One) GetApplicableProductIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductIds
}

func (o *One) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *One) GetApplicableContractIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableContractIds
}

func (o *One) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *One) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *One) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *One) GetLedger() []DataLedger {
	if o == nil {
		return nil
	}
	return o.Ledger
}

func (o *One) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type ListCustomerBalancesDataUnionType string

const (
	ListCustomerBalancesDataUnionTypeOne ListCustomerBalancesDataUnionType = "1"
	ListCustomerBalancesDataUnionTypeTwo ListCustomerBalancesDataUnionType = "2"
)

type ListCustomerBalancesData struct {
	One *One
	Two *Two

	Type ListCustomerBalancesDataUnionType
}

func CreateListCustomerBalancesDataOne(one One) ListCustomerBalancesData {
	typ := ListCustomerBalancesDataUnionTypeOne

	return ListCustomerBalancesData{
		One:  &one,
		Type: typ,
	}
}

func CreateListCustomerBalancesDataTwo(two Two) ListCustomerBalancesData {
	typ := ListCustomerBalancesDataUnionTypeTwo

	return ListCustomerBalancesData{
		Two:  &two,
		Type: typ,
	}
}

func (u *ListCustomerBalancesData) UnmarshalJSON(data []byte) error {

	var two Two = Two{}
	if err := utils.UnmarshalJSON(data, &two, "", true, true); err == nil {
		u.Two = &two
		u.Type = ListCustomerBalancesDataUnionTypeTwo
		return nil
	}

	var one One = One{}
	if err := utils.UnmarshalJSON(data, &one, "", true, true); err == nil {
		u.One = &one
		u.Type = ListCustomerBalancesDataUnionTypeOne
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListCustomerBalancesData", string(data))
}

func (u ListCustomerBalancesData) MarshalJSON() ([]byte, error) {
	if u.One != nil {
		return utils.MarshalJSON(u.One, "", true)
	}

	if u.Two != nil {
		return utils.MarshalJSON(u.Two, "", true)
	}

	return nil, errors.New("could not marshal union type ListCustomerBalancesData: all fields are null")
}

// ListCustomerBalancesResponseBody - Success
type ListCustomerBalancesResponseBody struct {
	Data     []ListCustomerBalancesData `json:"data"`
	NextPage *string                    `json:"next_page"`
}

func (o *ListCustomerBalancesResponseBody) GetData() []ListCustomerBalancesData {
	if o == nil {
		return []ListCustomerBalancesData{}
	}
	return o.Data
}

func (o *ListCustomerBalancesResponseBody) GetNextPage() *string {
	if o == nil {
		return nil
	}
	return o.NextPage
}

type ListCustomerBalancesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *ListCustomerBalancesResponseBody

	Next func() (*ListCustomerBalancesResponse, error)
}

func (o *ListCustomerBalancesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListCustomerBalancesResponse) GetObject() *ListCustomerBalancesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
