// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/speakeasy-sdks/metronome-go-sdk/internal/utils"
	"github.com/speakeasy-sdks/metronome-go-sdk/models/components"
	"time"
)

// ListCustomerCommitsRequestBody - List all commits for a customer
type ListCustomerCommitsRequestBody struct {
	CustomerID string  `json:"customer_id"`
	CommitID   *string `json:"commit_id,omitempty"`
	// Include only commits that have access schedules that "cover" the provided date
	CoveringDate *time.Time `json:"covering_date,omitempty"`
	// Include only commits that have any access on or after the provided date
	StartingAt *time.Time `json:"starting_at,omitempty"`
	// Include only commits that have any access before the provided date (exclusive)
	EffectiveBefore *time.Time `json:"effective_before,omitempty"`
	// Include commits on the contract level.
	IncludeContractCommits *bool `json:"include_contract_commits,omitempty"`
	// Include commits from archived contracts.
	IncludeArchived *bool `json:"include_archived,omitempty"`
	// Include commit ledgers in the response. Setting this flag may cause the query to be slower.
	IncludeLedgers *bool `json:"include_ledgers,omitempty"`
	// The next page token from a previous response.
	NextPage *string `json:"next_page,omitempty"`
}

func (l ListCustomerCommitsRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCustomerCommitsRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListCustomerCommitsRequestBody) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *ListCustomerCommitsRequestBody) GetCommitID() *string {
	if o == nil {
		return nil
	}
	return o.CommitID
}

func (o *ListCustomerCommitsRequestBody) GetCoveringDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.CoveringDate
}

func (o *ListCustomerCommitsRequestBody) GetStartingAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartingAt
}

func (o *ListCustomerCommitsRequestBody) GetEffectiveBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EffectiveBefore
}

func (o *ListCustomerCommitsRequestBody) GetIncludeContractCommits() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeContractCommits
}

func (o *ListCustomerCommitsRequestBody) GetIncludeArchived() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeArchived
}

func (o *ListCustomerCommitsRequestBody) GetIncludeLedgers() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeLedgers
}

func (o *ListCustomerCommitsRequestBody) GetNextPage() *string {
	if o == nil {
		return nil
	}
	return o.NextPage
}

type Contract struct {
	ID string `json:"id"`
}

func (o *Contract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListCustomerCommitsType string

const (
	ListCustomerCommitsTypePrepaid  ListCustomerCommitsType = "PREPAID"
	ListCustomerCommitsTypePostpaid ListCustomerCommitsType = "POSTPAID"
)

func (e ListCustomerCommitsType) ToPointer() *ListCustomerCommitsType {
	return &e
}
func (e *ListCustomerCommitsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID":
		fallthrough
	case "POSTPAID":
		*e = ListCustomerCommitsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerCommitsType: %v", v)
	}
}

type Product struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *Product) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Product) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ListCustomerCommitsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListCustomerCommitsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListCustomerCommitsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListCustomerCommitsScheduleItems struct {
	ID           string    `json:"id"`
	Amount       float64   `json:"amount"`
	StartingAt   time.Time `json:"starting_at"`
	EndingBefore time.Time `json:"ending_before"`
}

func (l ListCustomerCommitsScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCustomerCommitsScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListCustomerCommitsScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListCustomerCommitsScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListCustomerCommitsScheduleItems) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *ListCustomerCommitsScheduleItems) GetEndingBefore() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndingBefore
}

// ListCustomerCommitsAccessSchedule - The schedule that the customer will gain access to the credits purposed with this commit.
type ListCustomerCommitsAccessSchedule struct {
	CreditType    *ListCustomerCommitsCreditType     `json:"credit_type,omitempty"`
	ScheduleItems []ListCustomerCommitsScheduleItems `json:"schedule_items"`
}

func (o *ListCustomerCommitsAccessSchedule) GetCreditType() *ListCustomerCommitsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *ListCustomerCommitsAccessSchedule) GetScheduleItems() []ListCustomerCommitsScheduleItems {
	if o == nil {
		return []ListCustomerCommitsScheduleItems{}
	}
	return o.ScheduleItems
}

type ListCustomerCommitsCustomerCommitsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListCustomerCommitsCustomerCommitsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListCustomerCommitsCustomerCommitsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListCustomerCommitsCustomerCommitsScheduleItems struct {
	ID        string    `json:"id"`
	InvoiceID string    `json:"invoice_id"`
	Amount    float64   `json:"amount"`
	UnitPrice float64   `json:"unit_price"`
	Quantity  float64   `json:"quantity"`
	Timestamp time.Time `json:"timestamp"`
}

func (l ListCustomerCommitsCustomerCommitsScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCustomerCommitsCustomerCommitsScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListCustomerCommitsCustomerCommitsScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListCustomerCommitsCustomerCommitsScheduleItems) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *ListCustomerCommitsCustomerCommitsScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListCustomerCommitsCustomerCommitsScheduleItems) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *ListCustomerCommitsCustomerCommitsScheduleItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *ListCustomerCommitsCustomerCommitsScheduleItems) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

// ListCustomerCommitsInvoiceSchedule - The schedule that the customer will be invoiced for this commit.
type ListCustomerCommitsInvoiceSchedule struct {
	CreditType    *ListCustomerCommitsCustomerCommitsCreditType     `json:"credit_type,omitempty"`
	ScheduleItems []ListCustomerCommitsCustomerCommitsScheduleItems `json:"schedule_items,omitempty"`
}

func (o *ListCustomerCommitsInvoiceSchedule) GetCreditType() *ListCustomerCommitsCustomerCommitsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *ListCustomerCommitsInvoiceSchedule) GetScheduleItems() []ListCustomerCommitsCustomerCommitsScheduleItems {
	if o == nil {
		return nil
	}
	return o.ScheduleItems
}

// InvoiceContract - The contract that this commit will be billed on.
type InvoiceContract struct {
	ID string `json:"id"`
}

func (o *InvoiceContract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type RolledOverFrom struct {
	CommitID   string `json:"commit_id"`
	ContractID string `json:"contract_id"`
}

func (o *RolledOverFrom) GetCommitID() string {
	if o == nil {
		return ""
	}
	return o.CommitID
}

func (o *RolledOverFrom) GetContractID() string {
	if o == nil {
		return ""
	}
	return o.ContractID
}

type ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData13Type string

const (
	ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData13TypePostpaidCommitExpiration ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData13Type = "POSTPAID_COMMIT_EXPIRATION"
)

func (e ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData13Type) ToPointer() *ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData13Type {
	return &e
}
func (e *ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData13Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_EXPIRATION":
		*e = ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData13Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData13Type: %v", v)
	}
}

type Thirteen struct {
	Type      ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData13Type `json:"type"`
	Timestamp time.Time                                                                                `json:"timestamp"`
	Amount    float64                                                                                  `json:"amount"`
}

func (t Thirteen) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Thirteen) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Thirteen) GetType() ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData13Type {
	if o == nil {
		return ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData13Type("")
	}
	return o.Type
}

func (o *Thirteen) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *Thirteen) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

type ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData12Type string

const (
	ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData12TypePostpaidCommitManual ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData12Type = "POSTPAID_COMMIT_MANUAL"
)

func (e ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData12Type) ToPointer() *ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData12Type {
	return &e
}
func (e *ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_MANUAL":
		*e = ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData12Type: %v", v)
	}
}

type Twelve struct {
	Type      ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData12Type `json:"type"`
	Timestamp time.Time                                                                                `json:"timestamp"`
	Amount    float64                                                                                  `json:"amount"`
	Reason    string                                                                                   `json:"reason"`
}

func (t Twelve) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Twelve) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Twelve) GetType() ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData12Type {
	if o == nil {
		return ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData12Type("")
	}
	return o.Type
}

func (o *Twelve) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *Twelve) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *Twelve) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData11Type string

const (
	ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData11TypePrepaidCommitManual ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData11Type = "PREPAID_COMMIT_MANUAL"
)

func (e ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData11Type) ToPointer() *ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData11Type {
	return &e
}
func (e *ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_MANUAL":
		*e = ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData11Type: %v", v)
	}
}

type Eleven struct {
	Type      ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData11Type `json:"type"`
	Timestamp time.Time                                                                                `json:"timestamp"`
	Amount    float64                                                                                  `json:"amount"`
	Reason    string                                                                                   `json:"reason"`
}

func (e Eleven) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *Eleven) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Eleven) GetType() ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData11Type {
	if o == nil {
		return ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData11Type("")
	}
	return o.Type
}

func (o *Eleven) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *Eleven) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *Eleven) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData10Type string

const (
	ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData10TypePostpaidCommitTrueup ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData10Type = "POSTPAID_COMMIT_TRUEUP"
)

func (e ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData10Type) ToPointer() *ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData10Type {
	return &e
}
func (e *ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_TRUEUP":
		*e = ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData10Type: %v", v)
	}
}

type Ten struct {
	Type      ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData10Type `json:"type"`
	Timestamp time.Time                                                                                `json:"timestamp"`
	Amount    float64                                                                                  `json:"amount"`
	InvoiceID string                                                                                   `json:"invoice_id"`
}

func (t Ten) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Ten) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Ten) GetType() ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData10Type {
	if o == nil {
		return ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData10Type("")
	}
	return o.Type
}

func (o *Ten) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *Ten) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *Ten) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData9Type string

const (
	ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData9TypePostpaidCommitRollover ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData9Type = "POSTPAID_COMMIT_ROLLOVER"
)

func (e ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData9Type) ToPointer() *ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData9Type {
	return &e
}
func (e *ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_ROLLOVER":
		*e = ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData9Type: %v", v)
	}
}

type Nine struct {
	Type          ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData9Type `json:"type"`
	Timestamp     time.Time                                                                               `json:"timestamp"`
	Amount        float64                                                                                 `json:"amount"`
	SegmentID     string                                                                                  `json:"segment_id"`
	NewContractID string                                                                                  `json:"new_contract_id"`
}

func (n Nine) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *Nine) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Nine) GetType() ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData9Type {
	if o == nil {
		return ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyData9Type("")
	}
	return o.Type
}

func (o *Nine) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *Nine) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *Nine) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *Nine) GetNewContractID() string {
	if o == nil {
		return ""
	}
	return o.NewContractID
}

type ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyDataType string

const (
	ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyDataTypePostpaidCommitAutomatedInvoiceDeduction ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyDataType = "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyDataType) ToPointer() *ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyDataType {
	return &e
}
func (e *ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyDataType: %v", v)
	}
}

type Eight struct {
	Type      ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyDataType `json:"type"`
	Timestamp time.Time                                                                              `json:"timestamp"`
	Amount    float64                                                                                `json:"amount"`
	SegmentID string                                                                                 `json:"segment_id"`
	InvoiceID string                                                                                 `json:"invoice_id"`
}

func (e Eight) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *Eight) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Eight) GetType() ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyDataType {
	if o == nil {
		return ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyDataType("")
	}
	return o.Type
}

func (o *Eight) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *Eight) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *Eight) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *Eight) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyType string

const (
	ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyTypePostpaidCommitInitialBalance ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyType = "POSTPAID_COMMIT_INITIAL_BALANCE"
)

func (e ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyType) ToPointer() *ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_INITIAL_BALANCE":
		*e = ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type Seven struct {
	Type      ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyType `json:"type"`
	Timestamp time.Time                                                                          `json:"timestamp"`
	Amount    float64                                                                            `json:"amount"`
}

func (s Seven) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Seven) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Seven) GetType() ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *Seven) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *Seven) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

type ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONType string

const (
	ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONTypePrepaidCommitCredited ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONType = "PREPAID_COMMIT_CREDITED"
)

func (e ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONType) ToPointer() *ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONType {
	return &e
}
func (e *ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_CREDITED":
		*e = ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONType: %v", v)
	}
}

type Six struct {
	Type      ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONType `json:"type"`
	Timestamp time.Time                                                              `json:"timestamp"`
	Amount    float64                                                                `json:"amount"`
	SegmentID string                                                                 `json:"segment_id"`
	InvoiceID string                                                                 `json:"invoice_id"`
}

func (s Six) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *Six) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Six) GetType() ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONType {
	if o == nil {
		return ListCustomerCommitsLedgerCustomerCommitsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *Six) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *Six) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *Six) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *Six) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListCustomerCommitsLedgerCustomerCommitsResponse200Type string

const (
	ListCustomerCommitsLedgerCustomerCommitsResponse200TypePrepaidCommitCanceled ListCustomerCommitsLedgerCustomerCommitsResponse200Type = "PREPAID_COMMIT_CANCELED"
)

func (e ListCustomerCommitsLedgerCustomerCommitsResponse200Type) ToPointer() *ListCustomerCommitsLedgerCustomerCommitsResponse200Type {
	return &e
}
func (e *ListCustomerCommitsLedgerCustomerCommitsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_CANCELED":
		*e = ListCustomerCommitsLedgerCustomerCommitsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerCommitsLedgerCustomerCommitsResponse200Type: %v", v)
	}
}

type Five struct {
	Type      ListCustomerCommitsLedgerCustomerCommitsResponse200Type `json:"type"`
	Timestamp time.Time                                               `json:"timestamp"`
	Amount    float64                                                 `json:"amount"`
	SegmentID string                                                  `json:"segment_id"`
	InvoiceID string                                                  `json:"invoice_id"`
}

func (f Five) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *Five) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Five) GetType() ListCustomerCommitsLedgerCustomerCommitsResponse200Type {
	if o == nil {
		return ListCustomerCommitsLedgerCustomerCommitsResponse200Type("")
	}
	return o.Type
}

func (o *Five) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *Five) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *Five) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *Five) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListCustomerCommitsLedgerCustomerCommitsResponseType string

const (
	ListCustomerCommitsLedgerCustomerCommitsResponseTypePrepaidCommitExpiration ListCustomerCommitsLedgerCustomerCommitsResponseType = "PREPAID_COMMIT_EXPIRATION"
)

func (e ListCustomerCommitsLedgerCustomerCommitsResponseType) ToPointer() *ListCustomerCommitsLedgerCustomerCommitsResponseType {
	return &e
}
func (e *ListCustomerCommitsLedgerCustomerCommitsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_EXPIRATION":
		*e = ListCustomerCommitsLedgerCustomerCommitsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerCommitsLedgerCustomerCommitsResponseType: %v", v)
	}
}

type Four struct {
	Type      ListCustomerCommitsLedgerCustomerCommitsResponseType `json:"type"`
	Timestamp time.Time                                            `json:"timestamp"`
	Amount    float64                                              `json:"amount"`
	SegmentID string                                               `json:"segment_id"`
}

func (f Four) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(f, "", false)
}

func (f *Four) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &f, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Four) GetType() ListCustomerCommitsLedgerCustomerCommitsResponseType {
	if o == nil {
		return ListCustomerCommitsLedgerCustomerCommitsResponseType("")
	}
	return o.Type
}

func (o *Four) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *Four) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *Four) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type ListCustomerCommitsLedgerCustomerCommitsType string

const (
	ListCustomerCommitsLedgerCustomerCommitsTypePrepaidCommitRollover ListCustomerCommitsLedgerCustomerCommitsType = "PREPAID_COMMIT_ROLLOVER"
)

func (e ListCustomerCommitsLedgerCustomerCommitsType) ToPointer() *ListCustomerCommitsLedgerCustomerCommitsType {
	return &e
}
func (e *ListCustomerCommitsLedgerCustomerCommitsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_ROLLOVER":
		*e = ListCustomerCommitsLedgerCustomerCommitsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerCommitsLedgerCustomerCommitsType: %v", v)
	}
}

type Three struct {
	Type          ListCustomerCommitsLedgerCustomerCommitsType `json:"type"`
	Timestamp     time.Time                                    `json:"timestamp"`
	Amount        float64                                      `json:"amount"`
	SegmentID     string                                       `json:"segment_id"`
	NewContractID string                                       `json:"new_contract_id"`
}

func (t Three) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Three) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Three) GetType() ListCustomerCommitsLedgerCustomerCommitsType {
	if o == nil {
		return ListCustomerCommitsLedgerCustomerCommitsType("")
	}
	return o.Type
}

func (o *Three) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *Three) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *Three) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *Three) GetNewContractID() string {
	if o == nil {
		return ""
	}
	return o.NewContractID
}

type ListCustomerCommitsLedgerType string

const (
	ListCustomerCommitsLedgerTypePrepaidCommitAutomatedInvoiceDeduction ListCustomerCommitsLedgerType = "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e ListCustomerCommitsLedgerType) ToPointer() *ListCustomerCommitsLedgerType {
	return &e
}
func (e *ListCustomerCommitsLedgerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = ListCustomerCommitsLedgerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListCustomerCommitsLedgerType: %v", v)
	}
}

type ListCustomerCommitsLedger2 struct {
	Type      ListCustomerCommitsLedgerType `json:"type"`
	Timestamp time.Time                     `json:"timestamp"`
	Amount    float64                       `json:"amount"`
	SegmentID string                        `json:"segment_id"`
	InvoiceID string                        `json:"invoice_id"`
}

func (l ListCustomerCommitsLedger2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCustomerCommitsLedger2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListCustomerCommitsLedger2) GetType() ListCustomerCommitsLedgerType {
	if o == nil {
		return ListCustomerCommitsLedgerType("")
	}
	return o.Type
}

func (o *ListCustomerCommitsLedger2) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListCustomerCommitsLedger2) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListCustomerCommitsLedger2) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListCustomerCommitsLedger2) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type LedgerType string

const (
	LedgerTypePrepaidCommitSegmentStart LedgerType = "PREPAID_COMMIT_SEGMENT_START"
)

func (e LedgerType) ToPointer() *LedgerType {
	return &e
}
func (e *LedgerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_SEGMENT_START":
		*e = LedgerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LedgerType: %v", v)
	}
}

type ListCustomerCommitsLedger1 struct {
	Type      LedgerType `json:"type"`
	Timestamp time.Time  `json:"timestamp"`
	Amount    float64    `json:"amount"`
	SegmentID string     `json:"segment_id"`
}

func (l ListCustomerCommitsLedger1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListCustomerCommitsLedger1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListCustomerCommitsLedger1) GetType() LedgerType {
	if o == nil {
		return LedgerType("")
	}
	return o.Type
}

func (o *ListCustomerCommitsLedger1) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListCustomerCommitsLedger1) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListCustomerCommitsLedger1) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type LedgerUnionType string

const (
	LedgerUnionTypeListCustomerCommitsLedger1 LedgerUnionType = "listCustomerCommits_ledger_1"
	LedgerUnionTypeListCustomerCommitsLedger2 LedgerUnionType = "listCustomerCommits_ledger_2"
	LedgerUnionTypeThree                      LedgerUnionType = "3"
	LedgerUnionTypeFour                       LedgerUnionType = "4"
	LedgerUnionTypeFive                       LedgerUnionType = "5"
	LedgerUnionTypeSix                        LedgerUnionType = "6"
	LedgerUnionTypeSeven                      LedgerUnionType = "7"
	LedgerUnionTypeEight                      LedgerUnionType = "8"
	LedgerUnionTypeNine                       LedgerUnionType = "9"
	LedgerUnionTypeTen                        LedgerUnionType = "10"
	LedgerUnionTypeEleven                     LedgerUnionType = "11"
	LedgerUnionTypeTwelve                     LedgerUnionType = "12"
	LedgerUnionTypeThirteen                   LedgerUnionType = "13"
)

type Ledger struct {
	ListCustomerCommitsLedger1 *ListCustomerCommitsLedger1
	ListCustomerCommitsLedger2 *ListCustomerCommitsLedger2
	Three                      *Three
	Four                       *Four
	Five                       *Five
	Six                        *Six
	Seven                      *Seven
	Eight                      *Eight
	Nine                       *Nine
	Ten                        *Ten
	Eleven                     *Eleven
	Twelve                     *Twelve
	Thirteen                   *Thirteen

	Type LedgerUnionType
}

func CreateLedgerListCustomerCommitsLedger1(listCustomerCommitsLedger1 ListCustomerCommitsLedger1) Ledger {
	typ := LedgerUnionTypeListCustomerCommitsLedger1

	return Ledger{
		ListCustomerCommitsLedger1: &listCustomerCommitsLedger1,
		Type:                       typ,
	}
}

func CreateLedgerListCustomerCommitsLedger2(listCustomerCommitsLedger2 ListCustomerCommitsLedger2) Ledger {
	typ := LedgerUnionTypeListCustomerCommitsLedger2

	return Ledger{
		ListCustomerCommitsLedger2: &listCustomerCommitsLedger2,
		Type:                       typ,
	}
}

func CreateLedgerThree(three Three) Ledger {
	typ := LedgerUnionTypeThree

	return Ledger{
		Three: &three,
		Type:  typ,
	}
}

func CreateLedgerFour(four Four) Ledger {
	typ := LedgerUnionTypeFour

	return Ledger{
		Four: &four,
		Type: typ,
	}
}

func CreateLedgerFive(five Five) Ledger {
	typ := LedgerUnionTypeFive

	return Ledger{
		Five: &five,
		Type: typ,
	}
}

func CreateLedgerSix(six Six) Ledger {
	typ := LedgerUnionTypeSix

	return Ledger{
		Six:  &six,
		Type: typ,
	}
}

func CreateLedgerSeven(seven Seven) Ledger {
	typ := LedgerUnionTypeSeven

	return Ledger{
		Seven: &seven,
		Type:  typ,
	}
}

func CreateLedgerEight(eight Eight) Ledger {
	typ := LedgerUnionTypeEight

	return Ledger{
		Eight: &eight,
		Type:  typ,
	}
}

func CreateLedgerNine(nine Nine) Ledger {
	typ := LedgerUnionTypeNine

	return Ledger{
		Nine: &nine,
		Type: typ,
	}
}

func CreateLedgerTen(ten Ten) Ledger {
	typ := LedgerUnionTypeTen

	return Ledger{
		Ten:  &ten,
		Type: typ,
	}
}

func CreateLedgerEleven(eleven Eleven) Ledger {
	typ := LedgerUnionTypeEleven

	return Ledger{
		Eleven: &eleven,
		Type:   typ,
	}
}

func CreateLedgerTwelve(twelve Twelve) Ledger {
	typ := LedgerUnionTypeTwelve

	return Ledger{
		Twelve: &twelve,
		Type:   typ,
	}
}

func CreateLedgerThirteen(thirteen Thirteen) Ledger {
	typ := LedgerUnionTypeThirteen

	return Ledger{
		Thirteen: &thirteen,
		Type:     typ,
	}
}

func (u *Ledger) UnmarshalJSON(data []byte) error {

	var seven Seven = Seven{}
	if err := utils.UnmarshalJSON(data, &seven, "", true, true); err == nil {
		u.Seven = &seven
		u.Type = LedgerUnionTypeSeven
		return nil
	}

	var thirteen Thirteen = Thirteen{}
	if err := utils.UnmarshalJSON(data, &thirteen, "", true, true); err == nil {
		u.Thirteen = &thirteen
		u.Type = LedgerUnionTypeThirteen
		return nil
	}

	var four Four = Four{}
	if err := utils.UnmarshalJSON(data, &four, "", true, true); err == nil {
		u.Four = &four
		u.Type = LedgerUnionTypeFour
		return nil
	}

	var listCustomerCommitsLedger1 ListCustomerCommitsLedger1 = ListCustomerCommitsLedger1{}
	if err := utils.UnmarshalJSON(data, &listCustomerCommitsLedger1, "", true, true); err == nil {
		u.ListCustomerCommitsLedger1 = &listCustomerCommitsLedger1
		u.Type = LedgerUnionTypeListCustomerCommitsLedger1
		return nil
	}

	var ten Ten = Ten{}
	if err := utils.UnmarshalJSON(data, &ten, "", true, true); err == nil {
		u.Ten = &ten
		u.Type = LedgerUnionTypeTen
		return nil
	}

	var eleven Eleven = Eleven{}
	if err := utils.UnmarshalJSON(data, &eleven, "", true, true); err == nil {
		u.Eleven = &eleven
		u.Type = LedgerUnionTypeEleven
		return nil
	}

	var twelve Twelve = Twelve{}
	if err := utils.UnmarshalJSON(data, &twelve, "", true, true); err == nil {
		u.Twelve = &twelve
		u.Type = LedgerUnionTypeTwelve
		return nil
	}

	var five Five = Five{}
	if err := utils.UnmarshalJSON(data, &five, "", true, true); err == nil {
		u.Five = &five
		u.Type = LedgerUnionTypeFive
		return nil
	}

	var six Six = Six{}
	if err := utils.UnmarshalJSON(data, &six, "", true, true); err == nil {
		u.Six = &six
		u.Type = LedgerUnionTypeSix
		return nil
	}

	var three Three = Three{}
	if err := utils.UnmarshalJSON(data, &three, "", true, true); err == nil {
		u.Three = &three
		u.Type = LedgerUnionTypeThree
		return nil
	}

	var eight Eight = Eight{}
	if err := utils.UnmarshalJSON(data, &eight, "", true, true); err == nil {
		u.Eight = &eight
		u.Type = LedgerUnionTypeEight
		return nil
	}

	var nine Nine = Nine{}
	if err := utils.UnmarshalJSON(data, &nine, "", true, true); err == nil {
		u.Nine = &nine
		u.Type = LedgerUnionTypeNine
		return nil
	}

	var listCustomerCommitsLedger2 ListCustomerCommitsLedger2 = ListCustomerCommitsLedger2{}
	if err := utils.UnmarshalJSON(data, &listCustomerCommitsLedger2, "", true, true); err == nil {
		u.ListCustomerCommitsLedger2 = &listCustomerCommitsLedger2
		u.Type = LedgerUnionTypeListCustomerCommitsLedger2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Ledger", string(data))
}

func (u Ledger) MarshalJSON() ([]byte, error) {
	if u.ListCustomerCommitsLedger1 != nil {
		return utils.MarshalJSON(u.ListCustomerCommitsLedger1, "", true)
	}

	if u.ListCustomerCommitsLedger2 != nil {
		return utils.MarshalJSON(u.ListCustomerCommitsLedger2, "", true)
	}

	if u.Three != nil {
		return utils.MarshalJSON(u.Three, "", true)
	}

	if u.Four != nil {
		return utils.MarshalJSON(u.Four, "", true)
	}

	if u.Five != nil {
		return utils.MarshalJSON(u.Five, "", true)
	}

	if u.Six != nil {
		return utils.MarshalJSON(u.Six, "", true)
	}

	if u.Seven != nil {
		return utils.MarshalJSON(u.Seven, "", true)
	}

	if u.Eight != nil {
		return utils.MarshalJSON(u.Eight, "", true)
	}

	if u.Nine != nil {
		return utils.MarshalJSON(u.Nine, "", true)
	}

	if u.Ten != nil {
		return utils.MarshalJSON(u.Ten, "", true)
	}

	if u.Eleven != nil {
		return utils.MarshalJSON(u.Eleven, "", true)
	}

	if u.Twelve != nil {
		return utils.MarshalJSON(u.Twelve, "", true)
	}

	if u.Thirteen != nil {
		return utils.MarshalJSON(u.Thirteen, "", true)
	}

	return nil, errors.New("could not marshal union type Ledger: all fields are null")
}

type ListCustomerCommitsData struct {
	ID       string                  `json:"id"`
	Contract *Contract               `json:"contract,omitempty"`
	Type     ListCustomerCommitsType `json:"type"`
	Name     *string                 `json:"name,omitempty"`
	// If multiple credits or commits are applicable, the one with the lower priority will apply first.
	Priority *float64 `json:"priority,omitempty"`
	Product  Product  `json:"product"`
	// The schedule that the customer will gain access to the credits purposed with this commit.
	AccessSchedule *ListCustomerCommitsAccessSchedule `json:"access_schedule,omitempty"`
	// The schedule that the customer will be invoiced for this commit.
	InvoiceSchedule *ListCustomerCommitsInvoiceSchedule `json:"invoice_schedule,omitempty"`
	// The contract that this commit will be billed on.
	InvoiceContract       *InvoiceContract `json:"invoice_contract,omitempty"`
	RolledOverFrom        *RolledOverFrom  `json:"rolled_over_from,omitempty"`
	Description           *string          `json:"description,omitempty"`
	RolloverFraction      *float64         `json:"rollover_fraction,omitempty"`
	ApplicableProductIds  []string         `json:"applicable_product_ids,omitempty"`
	ApplicableProductTags []string         `json:"applicable_product_tags,omitempty"`
	ApplicableContractIds []string         `json:"applicable_contract_ids,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// (DEPRECATED) Use access_schedule + invoice_schedule instead.
	Amount *float64 `json:"amount,omitempty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string `json:"salesforce_opportunity_id,omitempty"`
	// A list of ordered events that impact the balance of a commit. For example, an invoice deduction or a rollover.
	Ledger       []Ledger          `json:"ledger,omitempty"`
	CustomFields map[string]string `json:"custom_fields,omitempty"`
}

func (o *ListCustomerCommitsData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListCustomerCommitsData) GetContract() *Contract {
	if o == nil {
		return nil
	}
	return o.Contract
}

func (o *ListCustomerCommitsData) GetType() ListCustomerCommitsType {
	if o == nil {
		return ListCustomerCommitsType("")
	}
	return o.Type
}

func (o *ListCustomerCommitsData) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListCustomerCommitsData) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *ListCustomerCommitsData) GetProduct() Product {
	if o == nil {
		return Product{}
	}
	return o.Product
}

func (o *ListCustomerCommitsData) GetAccessSchedule() *ListCustomerCommitsAccessSchedule {
	if o == nil {
		return nil
	}
	return o.AccessSchedule
}

func (o *ListCustomerCommitsData) GetInvoiceSchedule() *ListCustomerCommitsInvoiceSchedule {
	if o == nil {
		return nil
	}
	return o.InvoiceSchedule
}

func (o *ListCustomerCommitsData) GetInvoiceContract() *InvoiceContract {
	if o == nil {
		return nil
	}
	return o.InvoiceContract
}

func (o *ListCustomerCommitsData) GetRolledOverFrom() *RolledOverFrom {
	if o == nil {
		return nil
	}
	return o.RolledOverFrom
}

func (o *ListCustomerCommitsData) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListCustomerCommitsData) GetRolloverFraction() *float64 {
	if o == nil {
		return nil
	}
	return o.RolloverFraction
}

func (o *ListCustomerCommitsData) GetApplicableProductIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductIds
}

func (o *ListCustomerCommitsData) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *ListCustomerCommitsData) GetApplicableContractIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableContractIds
}

func (o *ListCustomerCommitsData) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *ListCustomerCommitsData) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ListCustomerCommitsData) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *ListCustomerCommitsData) GetLedger() []Ledger {
	if o == nil {
		return nil
	}
	return o.Ledger
}

func (o *ListCustomerCommitsData) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

// ListCustomerCommitsResponseBody - Success
type ListCustomerCommitsResponseBody struct {
	Data     []ListCustomerCommitsData `json:"data"`
	NextPage *string                   `json:"next_page"`
}

func (o *ListCustomerCommitsResponseBody) GetData() []ListCustomerCommitsData {
	if o == nil {
		return []ListCustomerCommitsData{}
	}
	return o.Data
}

func (o *ListCustomerCommitsResponseBody) GetNextPage() *string {
	if o == nil {
		return nil
	}
	return o.NextPage
}

type ListCustomerCommitsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *ListCustomerCommitsResponseBody

	Next func() (*ListCustomerCommitsResponse, error)
}

func (o *ListCustomerCommitsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListCustomerCommitsResponse) GetObject() *ListCustomerCommitsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
