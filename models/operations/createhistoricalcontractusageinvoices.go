// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/metronome-go-sdk/internal/utils"
	"github.com/speakeasy-sdks/metronome-go-sdk/models/components"
	"time"
)

type BreakdownGranularity string

const (
	BreakdownGranularityHourLower BreakdownGranularity = "hour"
	BreakdownGranularityDayLower  BreakdownGranularity = "day"
	BreakdownGranularityHourUpper BreakdownGranularity = "HOUR"
	BreakdownGranularityDayUpper  BreakdownGranularity = "DAY"
	BreakdownGranularityHourMixed BreakdownGranularity = "Hour"
	BreakdownGranularityDayMixed  BreakdownGranularity = "Day"
)

func (e BreakdownGranularity) ToPointer() *BreakdownGranularity {
	return &e
}
func (e *BreakdownGranularity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hour":
		fallthrough
	case "day":
		fallthrough
	case "HOUR":
		fallthrough
	case "DAY":
		fallthrough
	case "Hour":
		fallthrough
	case "Day":
		*e = BreakdownGranularity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BreakdownGranularity: %v", v)
	}
}

type SubtotalsWithQuantity struct {
	InclusiveStartDate time.Time `json:"inclusive_start_date"`
	ExclusiveEndDate   time.Time `json:"exclusive_end_date"`
	Quantity           float64   `json:"quantity"`
}

func (s SubtotalsWithQuantity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SubtotalsWithQuantity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SubtotalsWithQuantity) GetInclusiveStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.InclusiveStartDate
}

func (o *SubtotalsWithQuantity) GetExclusiveEndDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ExclusiveEndDate
}

func (o *SubtotalsWithQuantity) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

type UsageLineItems struct {
	ProductID               string                  `json:"product_id"`
	InclusiveStartDate      time.Time               `json:"inclusive_start_date"`
	ExclusiveEndDate        time.Time               `json:"exclusive_end_date"`
	Quantity                *float64                `json:"quantity,omitempty"`
	PricingGroupValues      map[string]string       `json:"pricing_group_values,omitempty"`
	PresentationGroupValues map[string]string       `json:"presentation_group_values,omitempty"`
	SubtotalsWithQuantity   []SubtotalsWithQuantity `json:"subtotals_with_quantity,omitempty"`
}

func (u UsageLineItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UsageLineItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UsageLineItems) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *UsageLineItems) GetInclusiveStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.InclusiveStartDate
}

func (o *UsageLineItems) GetExclusiveEndDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ExclusiveEndDate
}

func (o *UsageLineItems) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *UsageLineItems) GetPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PricingGroupValues
}

func (o *UsageLineItems) GetPresentationGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PresentationGroupValues
}

func (o *UsageLineItems) GetSubtotalsWithQuantity() []SubtotalsWithQuantity {
	if o == nil {
		return nil
	}
	return o.SubtotalsWithQuantity
}

// CreateHistoricalContractUsageInvoicesBillableStatus - This field's availability is dependent on your client's configuration.
type CreateHistoricalContractUsageInvoicesBillableStatus string

const (
	CreateHistoricalContractUsageInvoicesBillableStatusBillable   CreateHistoricalContractUsageInvoicesBillableStatus = "billable"
	CreateHistoricalContractUsageInvoicesBillableStatusUnbillable CreateHistoricalContractUsageInvoicesBillableStatus = "unbillable"
)

func (e CreateHistoricalContractUsageInvoicesBillableStatus) ToPointer() *CreateHistoricalContractUsageInvoicesBillableStatus {
	return &e
}
func (e *CreateHistoricalContractUsageInvoicesBillableStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "billable":
		fallthrough
	case "unbillable":
		*e = CreateHistoricalContractUsageInvoicesBillableStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHistoricalContractUsageInvoicesBillableStatus: %v", v)
	}
}

type Invoices struct {
	CustomerID           string                `json:"customer_id"`
	ContractID           string                `json:"contract_id"`
	CreditTypeID         string                `json:"credit_type_id"`
	InclusiveStartDate   time.Time             `json:"inclusive_start_date"`
	ExclusiveEndDate     time.Time             `json:"exclusive_end_date"`
	IssueDate            time.Time             `json:"issue_date"`
	BreakdownGranularity *BreakdownGranularity `json:"breakdown_granularity,omitempty"`
	UsageLineItems       []UsageLineItems      `json:"usage_line_items"`
	// This field's availability is dependent on your client's configuration.
	BillableStatus *CreateHistoricalContractUsageInvoicesBillableStatus `json:"billable_status,omitempty"`
	CustomFields   map[string]string                                    `json:"custom_fields,omitempty"`
}

func (i Invoices) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *Invoices) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Invoices) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *Invoices) GetContractID() string {
	if o == nil {
		return ""
	}
	return o.ContractID
}

func (o *Invoices) GetCreditTypeID() string {
	if o == nil {
		return ""
	}
	return o.CreditTypeID
}

func (o *Invoices) GetInclusiveStartDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.InclusiveStartDate
}

func (o *Invoices) GetExclusiveEndDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.ExclusiveEndDate
}

func (o *Invoices) GetIssueDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.IssueDate
}

func (o *Invoices) GetBreakdownGranularity() *BreakdownGranularity {
	if o == nil {
		return nil
	}
	return o.BreakdownGranularity
}

func (o *Invoices) GetUsageLineItems() []UsageLineItems {
	if o == nil {
		return []UsageLineItems{}
	}
	return o.UsageLineItems
}

func (o *Invoices) GetBillableStatus() *CreateHistoricalContractUsageInvoicesBillableStatus {
	if o == nil {
		return nil
	}
	return o.BillableStatus
}

func (o *Invoices) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

// CreateHistoricalContractUsageInvoicesRequestBody - Create a historical usage invoice for a contract
type CreateHistoricalContractUsageInvoicesRequestBody struct {
	Invoices []Invoices `json:"invoices"`
	Preview  bool       `json:"preview"`
}

func (o *CreateHistoricalContractUsageInvoicesRequestBody) GetInvoices() []Invoices {
	if o == nil {
		return []Invoices{}
	}
	return o.Invoices
}

func (o *CreateHistoricalContractUsageInvoicesRequestBody) GetPreview() bool {
	if o == nil {
		return false
	}
	return o.Preview
}

type CreateHistoricalContractUsageInvoicesCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *CreateHistoricalContractUsageInvoicesCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateHistoricalContractUsageInvoicesCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type CreateHistoricalContractUsageInvoicesContractsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *CreateHistoricalContractUsageInvoicesContractsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateHistoricalContractUsageInvoicesContractsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type CreateHistoricalContractUsageInvoicesInvoiceAdjustments struct {
	Name                    string                                                   `json:"name"`
	Total                   float64                                                  `json:"total"`
	CreditType              CreateHistoricalContractUsageInvoicesContractsCreditType `json:"credit_type"`
	CreditGrantID           *string                                                  `json:"credit_grant_id,omitempty"`
	CreditGrantCustomFields map[string]string                                        `json:"credit_grant_custom_fields,omitempty"`
}

func (o *CreateHistoricalContractUsageInvoicesInvoiceAdjustments) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateHistoricalContractUsageInvoicesInvoiceAdjustments) GetTotal() float64 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

func (o *CreateHistoricalContractUsageInvoicesInvoiceAdjustments) GetCreditType() CreateHistoricalContractUsageInvoicesContractsCreditType {
	if o == nil {
		return CreateHistoricalContractUsageInvoicesContractsCreditType{}
	}
	return o.CreditType
}

func (o *CreateHistoricalContractUsageInvoicesInvoiceAdjustments) GetCreditGrantID() *string {
	if o == nil {
		return nil
	}
	return o.CreditGrantID
}

func (o *CreateHistoricalContractUsageInvoicesInvoiceAdjustments) GetCreditGrantCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CreditGrantCustomFields
}

type CreateHistoricalContractUsageInvoicesRateType string

const (
	CreateHistoricalContractUsageInvoicesRateTypeFlatUpper         CreateHistoricalContractUsageInvoicesRateType = "FLAT"
	CreateHistoricalContractUsageInvoicesRateTypeFlatLower         CreateHistoricalContractUsageInvoicesRateType = "flat"
	CreateHistoricalContractUsageInvoicesRateTypePercentageUpper   CreateHistoricalContractUsageInvoicesRateType = "PERCENTAGE"
	CreateHistoricalContractUsageInvoicesRateTypePercentageLower   CreateHistoricalContractUsageInvoicesRateType = "percentage"
	CreateHistoricalContractUsageInvoicesRateTypeSubscriptionUpper CreateHistoricalContractUsageInvoicesRateType = "SUBSCRIPTION"
	CreateHistoricalContractUsageInvoicesRateTypeSubscriptionLower CreateHistoricalContractUsageInvoicesRateType = "subscription"
	CreateHistoricalContractUsageInvoicesRateTypeCustomUpper       CreateHistoricalContractUsageInvoicesRateType = "CUSTOM"
	CreateHistoricalContractUsageInvoicesRateTypeCustomLower       CreateHistoricalContractUsageInvoicesRateType = "custom"
	CreateHistoricalContractUsageInvoicesRateTypeTieredUpper       CreateHistoricalContractUsageInvoicesRateType = "TIERED"
	CreateHistoricalContractUsageInvoicesRateTypeTieredLower       CreateHistoricalContractUsageInvoicesRateType = "tiered"
)

func (e CreateHistoricalContractUsageInvoicesRateType) ToPointer() *CreateHistoricalContractUsageInvoicesRateType {
	return &e
}
func (e *CreateHistoricalContractUsageInvoicesRateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FLAT":
		fallthrough
	case "flat":
		fallthrough
	case "PERCENTAGE":
		fallthrough
	case "percentage":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "subscription":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "custom":
		fallthrough
	case "TIERED":
		fallthrough
	case "tiered":
		*e = CreateHistoricalContractUsageInvoicesRateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHistoricalContractUsageInvoicesRateType: %v", v)
	}
}

type CreateHistoricalContractUsageInvoicesTiers struct {
	Size  *float64 `json:"size,omitempty"`
	Price float64  `json:"price"`
}

func (o *CreateHistoricalContractUsageInvoicesTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *CreateHistoricalContractUsageInvoicesTiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type CreateHistoricalContractUsageInvoicesContractsResponse200CreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *CreateHistoricalContractUsageInvoicesContractsResponse200CreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateHistoricalContractUsageInvoicesContractsResponse200CreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// CreateHistoricalContractUsageInvoicesListPrice - only present for contract invoices and when the include_list_prices query parameter is set to true. This will include the list rate for the charge if applicable.  Only present for usage and subscription line items.
type CreateHistoricalContractUsageInvoicesListPrice struct {
	RateType CreateHistoricalContractUsageInvoicesRateType `json:"rate_type"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price *float64 `json:"price,omitempty"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate processors.
	CustomRate map[string]any `json:"custom_rate,omitempty"`
	// Only set for PERCENTAGE rate_type. Defaults to false. If true, rate is computed using list prices rather than the standard rates for this product on the contract.
	UseListPrices *bool `json:"use_list_prices,omitempty"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity *float64 `json:"quantity,omitempty"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type.
	IsProrated *bool `json:"is_prorated,omitempty"`
	// Only set for TIERED rate_type.
	Tiers []CreateHistoricalContractUsageInvoicesTiers `json:"tiers,omitempty"`
	// if pricing groups are used, this will contain the values used to calculate the price
	PricingGroupValues map[string]string                                                    `json:"pricing_group_values,omitempty"`
	CreditType         *CreateHistoricalContractUsageInvoicesContractsResponse200CreditType `json:"credit_type,omitempty"`
}

func (o *CreateHistoricalContractUsageInvoicesListPrice) GetRateType() CreateHistoricalContractUsageInvoicesRateType {
	if o == nil {
		return CreateHistoricalContractUsageInvoicesRateType("")
	}
	return o.RateType
}

func (o *CreateHistoricalContractUsageInvoicesListPrice) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *CreateHistoricalContractUsageInvoicesListPrice) GetCustomRate() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomRate
}

func (o *CreateHistoricalContractUsageInvoicesListPrice) GetUseListPrices() *bool {
	if o == nil {
		return nil
	}
	return o.UseListPrices
}

func (o *CreateHistoricalContractUsageInvoicesListPrice) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *CreateHistoricalContractUsageInvoicesListPrice) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *CreateHistoricalContractUsageInvoicesListPrice) GetTiers() []CreateHistoricalContractUsageInvoicesTiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *CreateHistoricalContractUsageInvoicesListPrice) GetPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PricingGroupValues
}

func (o *CreateHistoricalContractUsageInvoicesListPrice) GetCreditType() *CreateHistoricalContractUsageInvoicesContractsResponse200CreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

type CreateHistoricalContractUsageInvoicesContractsResponseCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *CreateHistoricalContractUsageInvoicesContractsResponseCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateHistoricalContractUsageInvoicesContractsResponseCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// CreateHistoricalContractUsageInvoicesPostpaidCommit - only present for beta contract invoices
type CreateHistoricalContractUsageInvoicesPostpaidCommit struct {
	ID string `json:"id"`
}

func (o *CreateHistoricalContractUsageInvoicesPostpaidCommit) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type CreateHistoricalContractUsageInvoicesResellerType string

const (
	CreateHistoricalContractUsageInvoicesResellerTypeAws           CreateHistoricalContractUsageInvoicesResellerType = "AWS"
	CreateHistoricalContractUsageInvoicesResellerTypeAwsProService CreateHistoricalContractUsageInvoicesResellerType = "AWS_PRO_SERVICE"
	CreateHistoricalContractUsageInvoicesResellerTypeGcp           CreateHistoricalContractUsageInvoicesResellerType = "GCP"
	CreateHistoricalContractUsageInvoicesResellerTypeGcpProService CreateHistoricalContractUsageInvoicesResellerType = "GCP_PRO_SERVICE"
)

func (e CreateHistoricalContractUsageInvoicesResellerType) ToPointer() *CreateHistoricalContractUsageInvoicesResellerType {
	return &e
}
func (e *CreateHistoricalContractUsageInvoicesResellerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWS":
		fallthrough
	case "AWS_PRO_SERVICE":
		fallthrough
	case "GCP":
		fallthrough
	case "GCP_PRO_SERVICE":
		*e = CreateHistoricalContractUsageInvoicesResellerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHistoricalContractUsageInvoicesResellerType: %v", v)
	}
}

// CreateHistoricalContractUsageInvoicesTierPeriod - when the current tier started and ends (for tiered charges only)
type CreateHistoricalContractUsageInvoicesTierPeriod struct {
	StartingAt   time.Time  `json:"starting_at"`
	EndingBefore *time.Time `json:"ending_before,omitempty"`
}

func (c CreateHistoricalContractUsageInvoicesTierPeriod) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateHistoricalContractUsageInvoicesTierPeriod) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateHistoricalContractUsageInvoicesTierPeriod) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *CreateHistoricalContractUsageInvoicesTierPeriod) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

type CreateHistoricalContractUsageInvoicesContractsTiers struct {
	// at what metric amount this tier begins
	StartingAt float64 `json:"starting_at"`
	Quantity   float64 `json:"quantity"`
	Price      float64 `json:"price"`
	Subtotal   float64 `json:"subtotal"`
}

func (o *CreateHistoricalContractUsageInvoicesContractsTiers) GetStartingAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.StartingAt
}

func (o *CreateHistoricalContractUsageInvoicesContractsTiers) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *CreateHistoricalContractUsageInvoicesContractsTiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

func (o *CreateHistoricalContractUsageInvoicesContractsTiers) GetSubtotal() float64 {
	if o == nil {
		return 0.0
	}
	return o.Subtotal
}

type CreateHistoricalContractUsageInvoicesSubLineItems struct {
	Name string `json:"name"`
	// the unit price for this charge, present only if the charge is not tiered and the quantity is nonzero
	Price         *float64 `json:"price,omitempty"`
	Quantity      float64  `json:"quantity"`
	Subtotal      float64  `json:"subtotal"`
	ChargeID      *string  `json:"charge_id,omitempty"`
	CreditGrantID *string  `json:"credit_grant_id,omitempty"`
	// when the current tier started and ends (for tiered charges only)
	TierPeriod   *CreateHistoricalContractUsageInvoicesTierPeriod      `json:"tier_period,omitempty"`
	Tiers        []CreateHistoricalContractUsageInvoicesContractsTiers `json:"tiers,omitempty"`
	CustomFields map[string]string                                     `json:"custom_fields"`
	// The start date for the charge (for seats charges only).
	StartDate *time.Time `json:"start_date,omitempty"`
	// The end date for the charge (for seats charges only).
	EndDate *time.Time `json:"end_date,omitempty"`
}

func (c CreateHistoricalContractUsageInvoicesSubLineItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateHistoricalContractUsageInvoicesSubLineItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateHistoricalContractUsageInvoicesSubLineItems) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateHistoricalContractUsageInvoicesSubLineItems) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *CreateHistoricalContractUsageInvoicesSubLineItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *CreateHistoricalContractUsageInvoicesSubLineItems) GetSubtotal() float64 {
	if o == nil {
		return 0.0
	}
	return o.Subtotal
}

func (o *CreateHistoricalContractUsageInvoicesSubLineItems) GetChargeID() *string {
	if o == nil {
		return nil
	}
	return o.ChargeID
}

func (o *CreateHistoricalContractUsageInvoicesSubLineItems) GetCreditGrantID() *string {
	if o == nil {
		return nil
	}
	return o.CreditGrantID
}

func (o *CreateHistoricalContractUsageInvoicesSubLineItems) GetTierPeriod() *CreateHistoricalContractUsageInvoicesTierPeriod {
	if o == nil {
		return nil
	}
	return o.TierPeriod
}

func (o *CreateHistoricalContractUsageInvoicesSubLineItems) GetTiers() []CreateHistoricalContractUsageInvoicesContractsTiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *CreateHistoricalContractUsageInvoicesSubLineItems) GetCustomFields() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.CustomFields
}

func (o *CreateHistoricalContractUsageInvoicesSubLineItems) GetStartDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartDate
}

func (o *CreateHistoricalContractUsageInvoicesSubLineItems) GetEndDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndDate
}

type CreateHistoricalContractUsageInvoicesLineItems struct {
	Name       string   `json:"name"`
	GroupKey   *string  `json:"group_key,omitempty"`
	GroupValue *string  `json:"group_value,omitempty"`
	Quantity   *float64 `json:"quantity,omitempty"`
	Total      float64  `json:"total"`
	// only present for beta contract invoices
	UnitPrice *float64 `json:"unit_price,omitempty"`
	// only present for contract invoices and when the include_list_prices query parameter is set to true. This will include the list rate for the charge if applicable.  Only present for usage and subscription line items.
	//
	ListPrice           *CreateHistoricalContractUsageInvoicesListPrice `json:"list_price,omitempty"`
	ProductID           *string                                         `json:"product_id,omitempty"`
	ProductCustomFields map[string]string                               `json:"product_custom_fields,omitempty"`
	ProductType         *string                                         `json:"product_type,omitempty"`
	// only present for beta contract invoices. This field's availability is dependent on your client's configuration.
	NetsuiteItemID *string `json:"netsuite_item_id,omitempty"`
	// only present for beta contract invoices
	IsProrated *bool                                                            `json:"is_prorated,omitempty"`
	CreditType CreateHistoricalContractUsageInvoicesContractsResponseCreditType `json:"credit_type"`
	// only present for beta contract invoices
	StartingAt *time.Time `json:"starting_at,omitempty"`
	// only present for beta contract invoices
	EndingBefore *time.Time `json:"ending_before,omitempty"`
	// only present for beta contract invoices
	CommitID           *string           `json:"commit_id,omitempty"`
	CommitCustomFields map[string]string `json:"commit_custom_fields,omitempty"`
	// only present for beta contract invoices
	CommitSegmentID *string `json:"commit_segment_id,omitempty"`
	// only present for beta contract invoices
	CommitType *string `json:"commit_type,omitempty"`
	// only present for beta contract invoices. This field's availability is dependent on your client's configuration.
	CommitNetsuiteSalesOrderID *string `json:"commit_netsuite_sales_order_id,omitempty"`
	// only present for beta contract invoices. This field's availability is dependent on your client's configuration.
	CommitNetsuiteItemID *string `json:"commit_netsuite_item_id,omitempty"`
	// only present for beta contract invoices
	PostpaidCommit *CreateHistoricalContractUsageInvoicesPostpaidCommit `json:"postpaid_commit,omitempty"`
	ResellerType   *CreateHistoricalContractUsageInvoicesResellerType   `json:"reseller_type,omitempty"`
	SubLineItems   []CreateHistoricalContractUsageInvoicesSubLineItems  `json:"sub_line_items,omitempty"`
	CustomFields   map[string]string                                    `json:"custom_fields,omitempty"`
	// if pricing groups are used, this will contain the values used to calculate the price
	PricingGroupValues map[string]string `json:"pricing_group_values,omitempty"`
	// if presentation groups are used, this will contain the values used to break down the line item
	PresentationGroupValues map[string]string `json:"presentation_group_values,omitempty"`
	Metadata                *string           `json:"metadata,omitempty"`
	// The start date for the billing period on the invoice.
	NetsuiteInvoiceBillingStart *time.Time `json:"netsuite_invoice_billing_start,omitempty"`
	// The end date for the billing period on the invoice.
	NetsuiteInvoiceBillingEnd *time.Time `json:"netsuite_invoice_billing_end,omitempty"`
	// only present for beta contract invoices
	ProfessionalServiceID           *string           `json:"professional_service_id,omitempty"`
	ProfessionalServiceCustomFields map[string]string `json:"professional_service_custom_fields,omitempty"`
	// only present for beta contract invoices
	ScheduledChargeID           *string           `json:"scheduled_charge_id,omitempty"`
	ScheduledChargeCustomFields map[string]string `json:"scheduled_charge_custom_fields,omitempty"`
}

func (c CreateHistoricalContractUsageInvoicesLineItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateHistoricalContractUsageInvoicesLineItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetGroupKey() *string {
	if o == nil {
		return nil
	}
	return o.GroupKey
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetGroupValue() *string {
	if o == nil {
		return nil
	}
	return o.GroupValue
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetTotal() float64 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetUnitPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.UnitPrice
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetListPrice() *CreateHistoricalContractUsageInvoicesListPrice {
	if o == nil {
		return nil
	}
	return o.ListPrice
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetProductID() *string {
	if o == nil {
		return nil
	}
	return o.ProductID
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetProductCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.ProductCustomFields
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetProductType() *string {
	if o == nil {
		return nil
	}
	return o.ProductType
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetNetsuiteItemID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteItemID
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetCreditType() CreateHistoricalContractUsageInvoicesContractsResponseCreditType {
	if o == nil {
		return CreateHistoricalContractUsageInvoicesContractsResponseCreditType{}
	}
	return o.CreditType
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetStartingAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartingAt
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetCommitID() *string {
	if o == nil {
		return nil
	}
	return o.CommitID
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetCommitCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CommitCustomFields
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetCommitSegmentID() *string {
	if o == nil {
		return nil
	}
	return o.CommitSegmentID
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetCommitType() *string {
	if o == nil {
		return nil
	}
	return o.CommitType
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetCommitNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.CommitNetsuiteSalesOrderID
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetCommitNetsuiteItemID() *string {
	if o == nil {
		return nil
	}
	return o.CommitNetsuiteItemID
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetPostpaidCommit() *CreateHistoricalContractUsageInvoicesPostpaidCommit {
	if o == nil {
		return nil
	}
	return o.PostpaidCommit
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetResellerType() *CreateHistoricalContractUsageInvoicesResellerType {
	if o == nil {
		return nil
	}
	return o.ResellerType
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetSubLineItems() []CreateHistoricalContractUsageInvoicesSubLineItems {
	if o == nil {
		return nil
	}
	return o.SubLineItems
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PricingGroupValues
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetPresentationGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PresentationGroupValues
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetMetadata() *string {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetNetsuiteInvoiceBillingStart() *time.Time {
	if o == nil {
		return nil
	}
	return o.NetsuiteInvoiceBillingStart
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetNetsuiteInvoiceBillingEnd() *time.Time {
	if o == nil {
		return nil
	}
	return o.NetsuiteInvoiceBillingEnd
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetProfessionalServiceID() *string {
	if o == nil {
		return nil
	}
	return o.ProfessionalServiceID
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetProfessionalServiceCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.ProfessionalServiceCustomFields
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetScheduledChargeID() *string {
	if o == nil {
		return nil
	}
	return o.ScheduledChargeID
}

func (o *CreateHistoricalContractUsageInvoicesLineItems) GetScheduledChargeCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.ScheduledChargeCustomFields
}

type CreateHistoricalContractUsageInvoicesBillingProviderType string

const (
	CreateHistoricalContractUsageInvoicesBillingProviderTypeAwsMarketplace   CreateHistoricalContractUsageInvoicesBillingProviderType = "aws_marketplace"
	CreateHistoricalContractUsageInvoicesBillingProviderTypeStripe           CreateHistoricalContractUsageInvoicesBillingProviderType = "stripe"
	CreateHistoricalContractUsageInvoicesBillingProviderTypeNetsuite         CreateHistoricalContractUsageInvoicesBillingProviderType = "netsuite"
	CreateHistoricalContractUsageInvoicesBillingProviderTypeCustom           CreateHistoricalContractUsageInvoicesBillingProviderType = "custom"
	CreateHistoricalContractUsageInvoicesBillingProviderTypeAzureMarketplace CreateHistoricalContractUsageInvoicesBillingProviderType = "azure_marketplace"
	CreateHistoricalContractUsageInvoicesBillingProviderTypeQuickbooksOnline CreateHistoricalContractUsageInvoicesBillingProviderType = "quickbooks_online"
	CreateHistoricalContractUsageInvoicesBillingProviderTypeWorkday          CreateHistoricalContractUsageInvoicesBillingProviderType = "workday"
	CreateHistoricalContractUsageInvoicesBillingProviderTypeGcpMarketplace   CreateHistoricalContractUsageInvoicesBillingProviderType = "gcp_marketplace"
)

func (e CreateHistoricalContractUsageInvoicesBillingProviderType) ToPointer() *CreateHistoricalContractUsageInvoicesBillingProviderType {
	return &e
}
func (e *CreateHistoricalContractUsageInvoicesBillingProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws_marketplace":
		fallthrough
	case "stripe":
		fallthrough
	case "netsuite":
		fallthrough
	case "custom":
		fallthrough
	case "azure_marketplace":
		fallthrough
	case "quickbooks_online":
		fallthrough
	case "workday":
		fallthrough
	case "gcp_marketplace":
		*e = CreateHistoricalContractUsageInvoicesBillingProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHistoricalContractUsageInvoicesBillingProviderType: %v", v)
	}
}

type CreateHistoricalContractUsageInvoicesExternalStatus string

const (
	CreateHistoricalContractUsageInvoicesExternalStatusDraft               CreateHistoricalContractUsageInvoicesExternalStatus = "DRAFT"
	CreateHistoricalContractUsageInvoicesExternalStatusFinalized           CreateHistoricalContractUsageInvoicesExternalStatus = "FINALIZED"
	CreateHistoricalContractUsageInvoicesExternalStatusPaid                CreateHistoricalContractUsageInvoicesExternalStatus = "PAID"
	CreateHistoricalContractUsageInvoicesExternalStatusUncollectible       CreateHistoricalContractUsageInvoicesExternalStatus = "UNCOLLECTIBLE"
	CreateHistoricalContractUsageInvoicesExternalStatusVoid                CreateHistoricalContractUsageInvoicesExternalStatus = "VOID"
	CreateHistoricalContractUsageInvoicesExternalStatusDeleted             CreateHistoricalContractUsageInvoicesExternalStatus = "DELETED"
	CreateHistoricalContractUsageInvoicesExternalStatusPaymentFailed       CreateHistoricalContractUsageInvoicesExternalStatus = "PAYMENT_FAILED"
	CreateHistoricalContractUsageInvoicesExternalStatusInvalidRequestError CreateHistoricalContractUsageInvoicesExternalStatus = "INVALID_REQUEST_ERROR"
	CreateHistoricalContractUsageInvoicesExternalStatusSkipped             CreateHistoricalContractUsageInvoicesExternalStatus = "SKIPPED"
	CreateHistoricalContractUsageInvoicesExternalStatusSent                CreateHistoricalContractUsageInvoicesExternalStatus = "SENT"
	CreateHistoricalContractUsageInvoicesExternalStatusQueued              CreateHistoricalContractUsageInvoicesExternalStatus = "QUEUED"
)

func (e CreateHistoricalContractUsageInvoicesExternalStatus) ToPointer() *CreateHistoricalContractUsageInvoicesExternalStatus {
	return &e
}
func (e *CreateHistoricalContractUsageInvoicesExternalStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "FINALIZED":
		fallthrough
	case "PAID":
		fallthrough
	case "UNCOLLECTIBLE":
		fallthrough
	case "VOID":
		fallthrough
	case "DELETED":
		fallthrough
	case "PAYMENT_FAILED":
		fallthrough
	case "INVALID_REQUEST_ERROR":
		fallthrough
	case "SKIPPED":
		fallthrough
	case "SENT":
		fallthrough
	case "QUEUED":
		*e = CreateHistoricalContractUsageInvoicesExternalStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHistoricalContractUsageInvoicesExternalStatus: %v", v)
	}
}

type CreateHistoricalContractUsageInvoicesExternalInvoice struct {
	BillingProviderType CreateHistoricalContractUsageInvoicesBillingProviderType `json:"billing_provider_type"`
	InvoiceID           *string                                                  `json:"invoice_id,omitempty"`
	IssuedAtTimestamp   *time.Time                                               `json:"issued_at_timestamp,omitempty"`
	ExternalStatus      *CreateHistoricalContractUsageInvoicesExternalStatus     `json:"external_status,omitempty"`
}

func (c CreateHistoricalContractUsageInvoicesExternalInvoice) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateHistoricalContractUsageInvoicesExternalInvoice) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateHistoricalContractUsageInvoicesExternalInvoice) GetBillingProviderType() CreateHistoricalContractUsageInvoicesBillingProviderType {
	if o == nil {
		return CreateHistoricalContractUsageInvoicesBillingProviderType("")
	}
	return o.BillingProviderType
}

func (o *CreateHistoricalContractUsageInvoicesExternalInvoice) GetInvoiceID() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceID
}

func (o *CreateHistoricalContractUsageInvoicesExternalInvoice) GetIssuedAtTimestamp() *time.Time {
	if o == nil {
		return nil
	}
	return o.IssuedAtTimestamp
}

func (o *CreateHistoricalContractUsageInvoicesExternalInvoice) GetExternalStatus() *CreateHistoricalContractUsageInvoicesExternalStatus {
	if o == nil {
		return nil
	}
	return o.ExternalStatus
}

type CreateHistoricalContractUsageInvoicesContractsBillingProviderType string

const (
	CreateHistoricalContractUsageInvoicesContractsBillingProviderTypeAwsMarketplace   CreateHistoricalContractUsageInvoicesContractsBillingProviderType = "aws_marketplace"
	CreateHistoricalContractUsageInvoicesContractsBillingProviderTypeStripe           CreateHistoricalContractUsageInvoicesContractsBillingProviderType = "stripe"
	CreateHistoricalContractUsageInvoicesContractsBillingProviderTypeNetsuite         CreateHistoricalContractUsageInvoicesContractsBillingProviderType = "netsuite"
	CreateHistoricalContractUsageInvoicesContractsBillingProviderTypeCustom           CreateHistoricalContractUsageInvoicesContractsBillingProviderType = "custom"
	CreateHistoricalContractUsageInvoicesContractsBillingProviderTypeAzureMarketplace CreateHistoricalContractUsageInvoicesContractsBillingProviderType = "azure_marketplace"
	CreateHistoricalContractUsageInvoicesContractsBillingProviderTypeQuickbooksOnline CreateHistoricalContractUsageInvoicesContractsBillingProviderType = "quickbooks_online"
	CreateHistoricalContractUsageInvoicesContractsBillingProviderTypeWorkday          CreateHistoricalContractUsageInvoicesContractsBillingProviderType = "workday"
	CreateHistoricalContractUsageInvoicesContractsBillingProviderTypeGcpMarketplace   CreateHistoricalContractUsageInvoicesContractsBillingProviderType = "gcp_marketplace"
)

func (e CreateHistoricalContractUsageInvoicesContractsBillingProviderType) ToPointer() *CreateHistoricalContractUsageInvoicesContractsBillingProviderType {
	return &e
}
func (e *CreateHistoricalContractUsageInvoicesContractsBillingProviderType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws_marketplace":
		fallthrough
	case "stripe":
		fallthrough
	case "netsuite":
		fallthrough
	case "custom":
		fallthrough
	case "azure_marketplace":
		fallthrough
	case "quickbooks_online":
		fallthrough
	case "workday":
		fallthrough
	case "gcp_marketplace":
		*e = CreateHistoricalContractUsageInvoicesContractsBillingProviderType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHistoricalContractUsageInvoicesContractsBillingProviderType: %v", v)
	}
}

type CreateHistoricalContractUsageInvoicesContractsExternalStatus string

const (
	CreateHistoricalContractUsageInvoicesContractsExternalStatusDraft               CreateHistoricalContractUsageInvoicesContractsExternalStatus = "DRAFT"
	CreateHistoricalContractUsageInvoicesContractsExternalStatusFinalized           CreateHistoricalContractUsageInvoicesContractsExternalStatus = "FINALIZED"
	CreateHistoricalContractUsageInvoicesContractsExternalStatusPaid                CreateHistoricalContractUsageInvoicesContractsExternalStatus = "PAID"
	CreateHistoricalContractUsageInvoicesContractsExternalStatusUncollectible       CreateHistoricalContractUsageInvoicesContractsExternalStatus = "UNCOLLECTIBLE"
	CreateHistoricalContractUsageInvoicesContractsExternalStatusVoid                CreateHistoricalContractUsageInvoicesContractsExternalStatus = "VOID"
	CreateHistoricalContractUsageInvoicesContractsExternalStatusDeleted             CreateHistoricalContractUsageInvoicesContractsExternalStatus = "DELETED"
	CreateHistoricalContractUsageInvoicesContractsExternalStatusPaymentFailed       CreateHistoricalContractUsageInvoicesContractsExternalStatus = "PAYMENT_FAILED"
	CreateHistoricalContractUsageInvoicesContractsExternalStatusInvalidRequestError CreateHistoricalContractUsageInvoicesContractsExternalStatus = "INVALID_REQUEST_ERROR"
	CreateHistoricalContractUsageInvoicesContractsExternalStatusSkipped             CreateHistoricalContractUsageInvoicesContractsExternalStatus = "SKIPPED"
	CreateHistoricalContractUsageInvoicesContractsExternalStatusSent                CreateHistoricalContractUsageInvoicesContractsExternalStatus = "SENT"
	CreateHistoricalContractUsageInvoicesContractsExternalStatusQueued              CreateHistoricalContractUsageInvoicesContractsExternalStatus = "QUEUED"
)

func (e CreateHistoricalContractUsageInvoicesContractsExternalStatus) ToPointer() *CreateHistoricalContractUsageInvoicesContractsExternalStatus {
	return &e
}
func (e *CreateHistoricalContractUsageInvoicesContractsExternalStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "DRAFT":
		fallthrough
	case "FINALIZED":
		fallthrough
	case "PAID":
		fallthrough
	case "UNCOLLECTIBLE":
		fallthrough
	case "VOID":
		fallthrough
	case "DELETED":
		fallthrough
	case "PAYMENT_FAILED":
		fallthrough
	case "INVALID_REQUEST_ERROR":
		fallthrough
	case "SKIPPED":
		fallthrough
	case "SENT":
		fallthrough
	case "QUEUED":
		*e = CreateHistoricalContractUsageInvoicesContractsExternalStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHistoricalContractUsageInvoicesContractsExternalStatus: %v", v)
	}
}

type CreateHistoricalContractUsageInvoicesCorrectedExternalInvoice struct {
	BillingProviderType CreateHistoricalContractUsageInvoicesContractsBillingProviderType `json:"billing_provider_type"`
	InvoiceID           *string                                                           `json:"invoice_id,omitempty"`
	IssuedAtTimestamp   *time.Time                                                        `json:"issued_at_timestamp,omitempty"`
	ExternalStatus      *CreateHistoricalContractUsageInvoicesContractsExternalStatus     `json:"external_status,omitempty"`
}

func (c CreateHistoricalContractUsageInvoicesCorrectedExternalInvoice) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateHistoricalContractUsageInvoicesCorrectedExternalInvoice) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateHistoricalContractUsageInvoicesCorrectedExternalInvoice) GetBillingProviderType() CreateHistoricalContractUsageInvoicesContractsBillingProviderType {
	if o == nil {
		return CreateHistoricalContractUsageInvoicesContractsBillingProviderType("")
	}
	return o.BillingProviderType
}

func (o *CreateHistoricalContractUsageInvoicesCorrectedExternalInvoice) GetInvoiceID() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceID
}

func (o *CreateHistoricalContractUsageInvoicesCorrectedExternalInvoice) GetIssuedAtTimestamp() *time.Time {
	if o == nil {
		return nil
	}
	return o.IssuedAtTimestamp
}

func (o *CreateHistoricalContractUsageInvoicesCorrectedExternalInvoice) GetExternalStatus() *CreateHistoricalContractUsageInvoicesContractsExternalStatus {
	if o == nil {
		return nil
	}
	return o.ExternalStatus
}

type CreateHistoricalContractUsageInvoicesCorrectionRecord struct {
	Reason                   string                                                         `json:"reason"`
	Memo                     string                                                         `json:"memo"`
	CorrectedInvoiceID       string                                                         `json:"corrected_invoice_id"`
	CorrectedExternalInvoice *CreateHistoricalContractUsageInvoicesCorrectedExternalInvoice `json:"corrected_external_invoice,omitempty"`
}

func (o *CreateHistoricalContractUsageInvoicesCorrectionRecord) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

func (o *CreateHistoricalContractUsageInvoicesCorrectionRecord) GetMemo() string {
	if o == nil {
		return ""
	}
	return o.Memo
}

func (o *CreateHistoricalContractUsageInvoicesCorrectionRecord) GetCorrectedInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.CorrectedInvoiceID
}

func (o *CreateHistoricalContractUsageInvoicesCorrectionRecord) GetCorrectedExternalInvoice() *CreateHistoricalContractUsageInvoicesCorrectedExternalInvoice {
	if o == nil {
		return nil
	}
	return o.CorrectedExternalInvoice
}

type CreateHistoricalContractUsageInvoicesContractsResellerType string

const (
	CreateHistoricalContractUsageInvoicesContractsResellerTypeAws           CreateHistoricalContractUsageInvoicesContractsResellerType = "AWS"
	CreateHistoricalContractUsageInvoicesContractsResellerTypeAwsProService CreateHistoricalContractUsageInvoicesContractsResellerType = "AWS_PRO_SERVICE"
	CreateHistoricalContractUsageInvoicesContractsResellerTypeGcp           CreateHistoricalContractUsageInvoicesContractsResellerType = "GCP"
	CreateHistoricalContractUsageInvoicesContractsResellerTypeGcpProService CreateHistoricalContractUsageInvoicesContractsResellerType = "GCP_PRO_SERVICE"
)

func (e CreateHistoricalContractUsageInvoicesContractsResellerType) ToPointer() *CreateHistoricalContractUsageInvoicesContractsResellerType {
	return &e
}
func (e *CreateHistoricalContractUsageInvoicesContractsResellerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWS":
		fallthrough
	case "AWS_PRO_SERVICE":
		fallthrough
	case "GCP":
		fallthrough
	case "GCP_PRO_SERVICE":
		*e = CreateHistoricalContractUsageInvoicesContractsResellerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHistoricalContractUsageInvoicesContractsResellerType: %v", v)
	}
}

type CreateHistoricalContractUsageInvoicesAwsOptions struct {
	AwsAccountNumber    *string `json:"aws_account_number,omitempty"`
	AwsPayerReferenceID *string `json:"aws_payer_reference_id,omitempty"`
	AwsOfferID          *string `json:"aws_offer_id,omitempty"`
}

func (o *CreateHistoricalContractUsageInvoicesAwsOptions) GetAwsAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.AwsAccountNumber
}

func (o *CreateHistoricalContractUsageInvoicesAwsOptions) GetAwsPayerReferenceID() *string {
	if o == nil {
		return nil
	}
	return o.AwsPayerReferenceID
}

func (o *CreateHistoricalContractUsageInvoicesAwsOptions) GetAwsOfferID() *string {
	if o == nil {
		return nil
	}
	return o.AwsOfferID
}

type CreateHistoricalContractUsageInvoicesGcpOptions struct {
	GcpAccountID *string `json:"gcp_account_id,omitempty"`
	GcpOfferID   *string `json:"gcp_offer_id,omitempty"`
}

func (o *CreateHistoricalContractUsageInvoicesGcpOptions) GetGcpAccountID() *string {
	if o == nil {
		return nil
	}
	return o.GcpAccountID
}

func (o *CreateHistoricalContractUsageInvoicesGcpOptions) GetGcpOfferID() *string {
	if o == nil {
		return nil
	}
	return o.GcpOfferID
}

// CreateHistoricalContractUsageInvoicesResellerRoyalty - only present for beta contract invoices with reseller royalties
type CreateHistoricalContractUsageInvoicesResellerRoyalty struct {
	ResellerType       CreateHistoricalContractUsageInvoicesContractsResellerType `json:"reseller_type"`
	NetsuiteResellerID string                                                     `json:"netsuite_reseller_id"`
	Fraction           string                                                     `json:"fraction"`
	AwsOptions         *CreateHistoricalContractUsageInvoicesAwsOptions           `json:"aws_options,omitempty"`
	GcpOptions         *CreateHistoricalContractUsageInvoicesGcpOptions           `json:"gcp_options,omitempty"`
}

func (o *CreateHistoricalContractUsageInvoicesResellerRoyalty) GetResellerType() CreateHistoricalContractUsageInvoicesContractsResellerType {
	if o == nil {
		return CreateHistoricalContractUsageInvoicesContractsResellerType("")
	}
	return o.ResellerType
}

func (o *CreateHistoricalContractUsageInvoicesResellerRoyalty) GetNetsuiteResellerID() string {
	if o == nil {
		return ""
	}
	return o.NetsuiteResellerID
}

func (o *CreateHistoricalContractUsageInvoicesResellerRoyalty) GetFraction() string {
	if o == nil {
		return ""
	}
	return o.Fraction
}

func (o *CreateHistoricalContractUsageInvoicesResellerRoyalty) GetAwsOptions() *CreateHistoricalContractUsageInvoicesAwsOptions {
	if o == nil {
		return nil
	}
	return o.AwsOptions
}

func (o *CreateHistoricalContractUsageInvoicesResellerRoyalty) GetGcpOptions() *CreateHistoricalContractUsageInvoicesGcpOptions {
	if o == nil {
		return nil
	}
	return o.GcpOptions
}

// CreateHistoricalContractUsageInvoicesContractsBillableStatus - This field's availability is dependent on your client's configuration.
type CreateHistoricalContractUsageInvoicesContractsBillableStatus string

const (
	CreateHistoricalContractUsageInvoicesContractsBillableStatusBillable   CreateHistoricalContractUsageInvoicesContractsBillableStatus = "billable"
	CreateHistoricalContractUsageInvoicesContractsBillableStatusUnbillable CreateHistoricalContractUsageInvoicesContractsBillableStatus = "unbillable"
)

func (e CreateHistoricalContractUsageInvoicesContractsBillableStatus) ToPointer() *CreateHistoricalContractUsageInvoicesContractsBillableStatus {
	return &e
}
func (e *CreateHistoricalContractUsageInvoicesContractsBillableStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "billable":
		fallthrough
	case "unbillable":
		*e = CreateHistoricalContractUsageInvoicesContractsBillableStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateHistoricalContractUsageInvoicesContractsBillableStatus: %v", v)
	}
}

type CreateHistoricalContractUsageInvoicesData struct {
	ID                   string            `json:"id"`
	CustomerID           string            `json:"customer_id"`
	CustomerCustomFields map[string]string `json:"customer_custom_fields,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string                                                   `json:"salesforce_opportunity_id,omitempty"`
	NetPaymentTermsDays     *float64                                                  `json:"net_payment_terms_days,omitempty"`
	CreditType              CreateHistoricalContractUsageInvoicesCreditType           `json:"credit_type"`
	InvoiceAdjustments      []CreateHistoricalContractUsageInvoicesInvoiceAdjustments `json:"invoice_adjustments,omitempty"`
	LineItems               []CreateHistoricalContractUsageInvoicesLineItems          `json:"line_items"`
	// Beginning of the usage period this invoice covers (UTC)
	StartTimestamp *time.Time `json:"start_timestamp,omitempty"`
	// End of the usage period this invoice covers (UTC)
	EndTimestamp *time.Time `json:"end_timestamp,omitempty"`
	// When the invoice was issued (UTC)
	IssuedAt *time.Time `json:"issued_at,omitempty"`
	// When the invoice was created (UTC). This field is present for correction invoices only.
	CreatedAt            *time.Time                                             `json:"created_at,omitempty"`
	Status               string                                                 `json:"status"`
	Subtotal             *float64                                               `json:"subtotal,omitempty"`
	Total                float64                                                `json:"total"`
	Type                 string                                                 `json:"type"`
	ExternalInvoice      *CreateHistoricalContractUsageInvoicesExternalInvoice  `json:"external_invoice,omitempty"`
	PlanID               *string                                                `json:"plan_id,omitempty"`
	PlanName             *string                                                `json:"plan_name,omitempty"`
	PlanCustomFields     map[string]string                                      `json:"plan_custom_fields,omitempty"`
	ContractID           *string                                                `json:"contract_id,omitempty"`
	ContractCustomFields map[string]string                                      `json:"contract_custom_fields,omitempty"`
	AmendmentID          *string                                                `json:"amendment_id,omitempty"`
	CorrectionRecord     *CreateHistoricalContractUsageInvoicesCorrectionRecord `json:"correction_record,omitempty"`
	// only present for beta contract invoices with reseller royalties
	ResellerRoyalty *CreateHistoricalContractUsageInvoicesResellerRoyalty `json:"reseller_royalty,omitempty"`
	CustomFields    map[string]any                                        `json:"custom_fields,omitempty"`
	// This field's availability is dependent on your client's configuration.
	BillableStatus *CreateHistoricalContractUsageInvoicesContractsBillableStatus `json:"billable_status,omitempty"`
}

func (c CreateHistoricalContractUsageInvoicesData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateHistoricalContractUsageInvoicesData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateHistoricalContractUsageInvoicesData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateHistoricalContractUsageInvoicesData) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *CreateHistoricalContractUsageInvoicesData) GetCustomerCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomerCustomFields
}

func (o *CreateHistoricalContractUsageInvoicesData) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *CreateHistoricalContractUsageInvoicesData) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *CreateHistoricalContractUsageInvoicesData) GetNetPaymentTermsDays() *float64 {
	if o == nil {
		return nil
	}
	return o.NetPaymentTermsDays
}

func (o *CreateHistoricalContractUsageInvoicesData) GetCreditType() CreateHistoricalContractUsageInvoicesCreditType {
	if o == nil {
		return CreateHistoricalContractUsageInvoicesCreditType{}
	}
	return o.CreditType
}

func (o *CreateHistoricalContractUsageInvoicesData) GetInvoiceAdjustments() []CreateHistoricalContractUsageInvoicesInvoiceAdjustments {
	if o == nil {
		return nil
	}
	return o.InvoiceAdjustments
}

func (o *CreateHistoricalContractUsageInvoicesData) GetLineItems() []CreateHistoricalContractUsageInvoicesLineItems {
	if o == nil {
		return []CreateHistoricalContractUsageInvoicesLineItems{}
	}
	return o.LineItems
}

func (o *CreateHistoricalContractUsageInvoicesData) GetStartTimestamp() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartTimestamp
}

func (o *CreateHistoricalContractUsageInvoicesData) GetEndTimestamp() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndTimestamp
}

func (o *CreateHistoricalContractUsageInvoicesData) GetIssuedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.IssuedAt
}

func (o *CreateHistoricalContractUsageInvoicesData) GetCreatedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateHistoricalContractUsageInvoicesData) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *CreateHistoricalContractUsageInvoicesData) GetSubtotal() *float64 {
	if o == nil {
		return nil
	}
	return o.Subtotal
}

func (o *CreateHistoricalContractUsageInvoicesData) GetTotal() float64 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

func (o *CreateHistoricalContractUsageInvoicesData) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateHistoricalContractUsageInvoicesData) GetExternalInvoice() *CreateHistoricalContractUsageInvoicesExternalInvoice {
	if o == nil {
		return nil
	}
	return o.ExternalInvoice
}

func (o *CreateHistoricalContractUsageInvoicesData) GetPlanID() *string {
	if o == nil {
		return nil
	}
	return o.PlanID
}

func (o *CreateHistoricalContractUsageInvoicesData) GetPlanName() *string {
	if o == nil {
		return nil
	}
	return o.PlanName
}

func (o *CreateHistoricalContractUsageInvoicesData) GetPlanCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.PlanCustomFields
}

func (o *CreateHistoricalContractUsageInvoicesData) GetContractID() *string {
	if o == nil {
		return nil
	}
	return o.ContractID
}

func (o *CreateHistoricalContractUsageInvoicesData) GetContractCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.ContractCustomFields
}

func (o *CreateHistoricalContractUsageInvoicesData) GetAmendmentID() *string {
	if o == nil {
		return nil
	}
	return o.AmendmentID
}

func (o *CreateHistoricalContractUsageInvoicesData) GetCorrectionRecord() *CreateHistoricalContractUsageInvoicesCorrectionRecord {
	if o == nil {
		return nil
	}
	return o.CorrectionRecord
}

func (o *CreateHistoricalContractUsageInvoicesData) GetResellerRoyalty() *CreateHistoricalContractUsageInvoicesResellerRoyalty {
	if o == nil {
		return nil
	}
	return o.ResellerRoyalty
}

func (o *CreateHistoricalContractUsageInvoicesData) GetCustomFields() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *CreateHistoricalContractUsageInvoicesData) GetBillableStatus() *CreateHistoricalContractUsageInvoicesContractsBillableStatus {
	if o == nil {
		return nil
	}
	return o.BillableStatus
}

// CreateHistoricalContractUsageInvoicesResponseBody - Success
type CreateHistoricalContractUsageInvoicesResponseBody struct {
	Data []CreateHistoricalContractUsageInvoicesData `json:"data"`
}

func (o *CreateHistoricalContractUsageInvoicesResponseBody) GetData() []CreateHistoricalContractUsageInvoicesData {
	if o == nil {
		return []CreateHistoricalContractUsageInvoicesData{}
	}
	return o.Data
}

type CreateHistoricalContractUsageInvoicesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *CreateHistoricalContractUsageInvoicesResponseBody
}

func (o *CreateHistoricalContractUsageInvoicesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateHistoricalContractUsageInvoicesResponse) GetObject() *CreateHistoricalContractUsageInvoicesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
