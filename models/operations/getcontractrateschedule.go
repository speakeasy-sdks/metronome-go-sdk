// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/metronome-go-sdk/internal/utils"
	"github.com/speakeasy-sdks/metronome-go-sdk/models/components"
	"time"
)

type GetContractRateScheduleSelectors struct {
	// Rates matching the product id will be included in the response.
	ProductID *string `json:"product_id,omitempty"`
	// List of product tags, rates matching any of the tags will be included in the response.
	ProductTags []string `json:"product_tags,omitempty"`
	// List of pricing group key value pairs, rates matching all of the key / value pairs will be included in the response.
	PricingGroupValues map[string]string `json:"pricing_group_values,omitempty"`
	// List of pricing group key value pairs, rates containing the matching key / value pairs will be included in the response.
	PartialPricingGroupValues map[string]string `json:"partial_pricing_group_values,omitempty"`
}

func (o *GetContractRateScheduleSelectors) GetProductID() *string {
	if o == nil {
		return nil
	}
	return o.ProductID
}

func (o *GetContractRateScheduleSelectors) GetProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ProductTags
}

func (o *GetContractRateScheduleSelectors) GetPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PricingGroupValues
}

func (o *GetContractRateScheduleSelectors) GetPartialPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PartialPricingGroupValues
}

// GetContractRateScheduleRequestBody - Contract rate schedule filter options.
type GetContractRateScheduleRequestBody struct {
	// ID of the customer for whose contract to get the rate schedule for.
	CustomerID string `json:"customer_id"`
	// ID of the contract to get the rate schedule for.
	ContractID string `json:"contract_id"`
	// optional timestamp which overlaps with the returned rate schedule segments. When not specified, the current timestamp will be used.
	At *time.Time `json:"at,omitempty"`
	// List of rate selectors, rates matching ANY of the selectors will be included in the response. Passing no selectors will result in all rates being returned.
	Selectors []GetContractRateScheduleSelectors `json:"selectors,omitempty"`
}

func (g GetContractRateScheduleRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractRateScheduleRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractRateScheduleRequestBody) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *GetContractRateScheduleRequestBody) GetContractID() string {
	if o == nil {
		return ""
	}
	return o.ContractID
}

func (o *GetContractRateScheduleRequestBody) GetAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.At
}

func (o *GetContractRateScheduleRequestBody) GetSelectors() []GetContractRateScheduleSelectors {
	if o == nil {
		return nil
	}
	return o.Selectors
}

type GetContractRateScheduleRequest struct {
	// Max number of results that should be returned
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Cursor that indicates where the next page of results should start.
	NextPage *string `queryParam:"style=form,explode=true,name=next_page"`
	// Contract rate schedule filter options.
	RequestBody *GetContractRateScheduleRequestBody `request:"mediaType=application/json"`
}

func (o *GetContractRateScheduleRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetContractRateScheduleRequest) GetNextPage() *string {
	if o == nil {
		return nil
	}
	return o.NextPage
}

func (o *GetContractRateScheduleRequest) GetRequestBody() *GetContractRateScheduleRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type GetContractRateScheduleRateType string

const (
	GetContractRateScheduleRateTypeFlatUpper         GetContractRateScheduleRateType = "FLAT"
	GetContractRateScheduleRateTypeFlatLower         GetContractRateScheduleRateType = "flat"
	GetContractRateScheduleRateTypePercentageUpper   GetContractRateScheduleRateType = "PERCENTAGE"
	GetContractRateScheduleRateTypePercentageLower   GetContractRateScheduleRateType = "percentage"
	GetContractRateScheduleRateTypeSubscriptionUpper GetContractRateScheduleRateType = "SUBSCRIPTION"
	GetContractRateScheduleRateTypeSubscriptionLower GetContractRateScheduleRateType = "subscription"
	GetContractRateScheduleRateTypeCustomUpper       GetContractRateScheduleRateType = "CUSTOM"
	GetContractRateScheduleRateTypeCustomLower       GetContractRateScheduleRateType = "custom"
	GetContractRateScheduleRateTypeTieredUpper       GetContractRateScheduleRateType = "TIERED"
	GetContractRateScheduleRateTypeTieredLower       GetContractRateScheduleRateType = "tiered"
)

func (e GetContractRateScheduleRateType) ToPointer() *GetContractRateScheduleRateType {
	return &e
}
func (e *GetContractRateScheduleRateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FLAT":
		fallthrough
	case "flat":
		fallthrough
	case "PERCENTAGE":
		fallthrough
	case "percentage":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "subscription":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "custom":
		fallthrough
	case "TIERED":
		fallthrough
	case "tiered":
		*e = GetContractRateScheduleRateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractRateScheduleRateType: %v", v)
	}
}

type GetContractRateScheduleTiers struct {
	Size  *float64 `json:"size,omitempty"`
	Price float64  `json:"price"`
}

func (o *GetContractRateScheduleTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *GetContractRateScheduleTiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type GetContractRateScheduleCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractRateScheduleCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractRateScheduleCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListRate struct {
	RateType GetContractRateScheduleRateType `json:"rate_type"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price *float64 `json:"price,omitempty"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate processors.
	CustomRate map[string]any `json:"custom_rate,omitempty"`
	// Only set for PERCENTAGE rate_type. Defaults to false. If true, rate is computed using list prices rather than the standard rates for this product on the contract.
	UseListPrices *bool `json:"use_list_prices,omitempty"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity *float64 `json:"quantity,omitempty"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type.
	IsProrated *bool `json:"is_prorated,omitempty"`
	// Only set for TIERED rate_type.
	Tiers []GetContractRateScheduleTiers `json:"tiers,omitempty"`
	// if pricing groups are used, this will contain the values used to calculate the price
	PricingGroupValues map[string]string                  `json:"pricing_group_values,omitempty"`
	CreditType         *GetContractRateScheduleCreditType `json:"credit_type,omitempty"`
}

func (o *ListRate) GetRateType() GetContractRateScheduleRateType {
	if o == nil {
		return GetContractRateScheduleRateType("")
	}
	return o.RateType
}

func (o *ListRate) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *ListRate) GetCustomRate() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomRate
}

func (o *ListRate) GetUseListPrices() *bool {
	if o == nil {
		return nil
	}
	return o.UseListPrices
}

func (o *ListRate) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *ListRate) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *ListRate) GetTiers() []GetContractRateScheduleTiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *ListRate) GetPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PricingGroupValues
}

func (o *ListRate) GetCreditType() *GetContractRateScheduleCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

type GetContractRateScheduleContractsRateType string

const (
	GetContractRateScheduleContractsRateTypeFlatUpper         GetContractRateScheduleContractsRateType = "FLAT"
	GetContractRateScheduleContractsRateTypeFlatLower         GetContractRateScheduleContractsRateType = "flat"
	GetContractRateScheduleContractsRateTypePercentageUpper   GetContractRateScheduleContractsRateType = "PERCENTAGE"
	GetContractRateScheduleContractsRateTypePercentageLower   GetContractRateScheduleContractsRateType = "percentage"
	GetContractRateScheduleContractsRateTypeSubscriptionUpper GetContractRateScheduleContractsRateType = "SUBSCRIPTION"
	GetContractRateScheduleContractsRateTypeSubscriptionLower GetContractRateScheduleContractsRateType = "subscription"
	GetContractRateScheduleContractsRateTypeCustomUpper       GetContractRateScheduleContractsRateType = "CUSTOM"
	GetContractRateScheduleContractsRateTypeCustomLower       GetContractRateScheduleContractsRateType = "custom"
	GetContractRateScheduleContractsRateTypeTieredUpper       GetContractRateScheduleContractsRateType = "TIERED"
	GetContractRateScheduleContractsRateTypeTieredLower       GetContractRateScheduleContractsRateType = "tiered"
)

func (e GetContractRateScheduleContractsRateType) ToPointer() *GetContractRateScheduleContractsRateType {
	return &e
}
func (e *GetContractRateScheduleContractsRateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FLAT":
		fallthrough
	case "flat":
		fallthrough
	case "PERCENTAGE":
		fallthrough
	case "percentage":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "subscription":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "custom":
		fallthrough
	case "TIERED":
		fallthrough
	case "tiered":
		*e = GetContractRateScheduleContractsRateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetContractRateScheduleContractsRateType: %v", v)
	}
}

type GetContractRateScheduleContractsTiers struct {
	Size  *float64 `json:"size,omitempty"`
	Price float64  `json:"price"`
}

func (o *GetContractRateScheduleContractsTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *GetContractRateScheduleContractsTiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type GetContractRateScheduleContractsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetContractRateScheduleContractsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetContractRateScheduleContractsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type OverrideRate struct {
	RateType GetContractRateScheduleContractsRateType `json:"rate_type"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price *float64 `json:"price,omitempty"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate processors.
	CustomRate map[string]any `json:"custom_rate,omitempty"`
	// Only set for PERCENTAGE rate_type. Defaults to false. If true, rate is computed using list prices rather than the standard rates for this product on the contract.
	UseListPrices *bool `json:"use_list_prices,omitempty"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity *float64 `json:"quantity,omitempty"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type.
	IsProrated *bool `json:"is_prorated,omitempty"`
	// Only set for TIERED rate_type.
	Tiers []GetContractRateScheduleContractsTiers `json:"tiers,omitempty"`
	// if pricing groups are used, this will contain the values used to calculate the price
	PricingGroupValues map[string]string                           `json:"pricing_group_values,omitempty"`
	CreditType         *GetContractRateScheduleContractsCreditType `json:"credit_type,omitempty"`
}

func (o *OverrideRate) GetRateType() GetContractRateScheduleContractsRateType {
	if o == nil {
		return GetContractRateScheduleContractsRateType("")
	}
	return o.RateType
}

func (o *OverrideRate) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *OverrideRate) GetCustomRate() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomRate
}

func (o *OverrideRate) GetUseListPrices() *bool {
	if o == nil {
		return nil
	}
	return o.UseListPrices
}

func (o *OverrideRate) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *OverrideRate) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *OverrideRate) GetTiers() []GetContractRateScheduleContractsTiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *OverrideRate) GetPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PricingGroupValues
}

func (o *OverrideRate) GetCreditType() *GetContractRateScheduleContractsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

type GetContractRateScheduleData struct {
	RateCardID          string            `json:"rate_card_id"`
	ProductID           string            `json:"product_id"`
	ProductName         string            `json:"product_name"`
	ProductTags         []string          `json:"product_tags"`
	ProductCustomFields map[string]string `json:"product_custom_fields"`
	StartingAt          time.Time         `json:"starting_at"`
	EndingBefore        *time.Time        `json:"ending_before,omitempty"`
	Entitled            bool              `json:"entitled"`
	PricingGroupValues  map[string]string `json:"pricing_group_values,omitempty"`
	ListRate            ListRate          `json:"list_rate"`
	OverrideRate        *OverrideRate     `json:"override_rate,omitempty"`
}

func (g GetContractRateScheduleData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetContractRateScheduleData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetContractRateScheduleData) GetRateCardID() string {
	if o == nil {
		return ""
	}
	return o.RateCardID
}

func (o *GetContractRateScheduleData) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *GetContractRateScheduleData) GetProductName() string {
	if o == nil {
		return ""
	}
	return o.ProductName
}

func (o *GetContractRateScheduleData) GetProductTags() []string {
	if o == nil {
		return []string{}
	}
	return o.ProductTags
}

func (o *GetContractRateScheduleData) GetProductCustomFields() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.ProductCustomFields
}

func (o *GetContractRateScheduleData) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *GetContractRateScheduleData) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *GetContractRateScheduleData) GetEntitled() bool {
	if o == nil {
		return false
	}
	return o.Entitled
}

func (o *GetContractRateScheduleData) GetPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PricingGroupValues
}

func (o *GetContractRateScheduleData) GetListRate() ListRate {
	if o == nil {
		return ListRate{}
	}
	return o.ListRate
}

func (o *GetContractRateScheduleData) GetOverrideRate() *OverrideRate {
	if o == nil {
		return nil
	}
	return o.OverrideRate
}

// GetContractRateScheduleResponseBody - Success
type GetContractRateScheduleResponseBody struct {
	NextPage *string                       `json:"next_page,omitempty"`
	Data     []GetContractRateScheduleData `json:"data"`
}

func (o *GetContractRateScheduleResponseBody) GetNextPage() *string {
	if o == nil {
		return nil
	}
	return o.NextPage
}

func (o *GetContractRateScheduleResponseBody) GetData() []GetContractRateScheduleData {
	if o == nil {
		return []GetContractRateScheduleData{}
	}
	return o.Data
}

type GetContractRateScheduleResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *GetContractRateScheduleResponseBody
}

func (o *GetContractRateScheduleResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetContractRateScheduleResponse) GetObject() *GetContractRateScheduleResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
