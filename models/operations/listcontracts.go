// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"github.com/Metronome-Industries/metronome-go-sdk/internal/utils"
	"github.com/Metronome-Industries/metronome-go-sdk/models/components"
	"time"
)

// ListContractsRequestBody - List all contracts for a customer
type ListContractsRequestBody struct {
	CustomerID string `json:"customer_id"`
	// Include commit ledgers in the response. Setting this flag may cause the query to be slower.
	IncludeLedgers *bool `json:"include_ledgers,omitempty"`
	// Include archived contracts in the response
	IncludeArchived *bool `json:"include_archived,omitempty"`
	// Optional RFC 3339 timestamp. If provided, the response will include only contracts where effective_at is on or after the provided date.  This cannot be provided if the covering_date filter is provided.
	StartingAt *time.Time `json:"starting_at,omitempty"`
	// Optional RFC 3339 timestamp. If provided, the response will include only contracts effective on the provided date.  This cannot be provided if the starting_at filter is provided.
	CoveringDate *time.Time `json:"covering_date,omitempty"`
}

func (l ListContractsRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsRequestBody) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *ListContractsRequestBody) GetIncludeLedgers() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeLedgers
}

func (o *ListContractsRequestBody) GetIncludeArchived() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeArchived
}

func (o *ListContractsRequestBody) GetStartingAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartingAt
}

func (o *ListContractsRequestBody) GetCoveringDate() *time.Time {
	if o == nil {
		return nil
	}
	return o.CoveringDate
}

type ListContractsContract struct {
	ID string `json:"id"`
}

func (o *ListContractsContract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsType string

const (
	ListContractsTypePrepaid  ListContractsType = "PREPAID"
	ListContractsTypePostpaid ListContractsType = "POSTPAID"
)

func (e ListContractsType) ToPointer() *ListContractsType {
	return &e
}
func (e *ListContractsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID":
		fallthrough
	case "POSTPAID":
		*e = ListContractsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsType: %v", v)
	}
}

type ListContractsProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *ListContractsProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ListContractsContractsResponse200ApplicationJSONCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListContractsContractsResponse200ApplicationJSONCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListContractsContractsResponse200ApplicationJSONCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsScheduleItems struct {
	ID           string    `json:"id"`
	Amount       float64   `json:"amount"`
	StartingAt   time.Time `json:"starting_at"`
	EndingBefore time.Time `json:"ending_before"`
}

func (l ListContractsScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsScheduleItems) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *ListContractsScheduleItems) GetEndingBefore() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndingBefore
}

// ListContractsAccessSchedule - The schedule that the customer will gain access to the credits purposed with this commit.
type ListContractsAccessSchedule struct {
	CreditType    *ListContractsContractsResponse200ApplicationJSONCreditType `json:"credit_type,omitempty"`
	ScheduleItems []ListContractsScheduleItems                                `json:"schedule_items"`
}

func (o *ListContractsAccessSchedule) GetCreditType() *ListContractsContractsResponse200ApplicationJSONCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *ListContractsAccessSchedule) GetScheduleItems() []ListContractsScheduleItems {
	if o == nil {
		return []ListContractsScheduleItems{}
	}
	return o.ScheduleItems
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataInitialCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataInitialCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataInitialCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsScheduleItems struct {
	ID        string    `json:"id"`
	InvoiceID string    `json:"invoice_id"`
	Amount    float64   `json:"amount"`
	UnitPrice float64   `json:"unit_price"`
	Quantity  float64   `json:"quantity"`
	Timestamp time.Time `json:"timestamp"`
}

func (l ListContractsContractsScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsScheduleItems) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *ListContractsContractsScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsContractsScheduleItems) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *ListContractsContractsScheduleItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *ListContractsContractsScheduleItems) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

// ListContractsInvoiceSchedule - The schedule that the customer will be invoiced for this commit.
type ListContractsInvoiceSchedule struct {
	CreditType    *ListContractsContractsResponse200ApplicationJSONResponseBodyDataInitialCreditType `json:"credit_type,omitempty"`
	ScheduleItems []ListContractsContractsScheduleItems                                              `json:"schedule_items,omitempty"`
}

func (o *ListContractsInvoiceSchedule) GetCreditType() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataInitialCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *ListContractsInvoiceSchedule) GetScheduleItems() []ListContractsContractsScheduleItems {
	if o == nil {
		return nil
	}
	return o.ScheduleItems
}

// ListContractsInvoiceContract - The contract that this commit will be billed on.
type ListContractsInvoiceContract struct {
	ID string `json:"id"`
}

func (o *ListContractsInvoiceContract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsRolledOverFrom struct {
	CommitID   string `json:"commit_id"`
	ContractID string `json:"contract_id"`
}

func (o *ListContractsRolledOverFrom) GetCommitID() string {
	if o == nil {
		return ""
	}
	return o.CommitID
}

func (o *ListContractsRolledOverFrom) GetContractID() string {
	if o == nil {
		return ""
	}
	return o.ContractID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits13Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits13TypePostpaidCommitExpiration ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits13Type = "POSTPAID_COMMIT_EXPIRATION"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits13Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits13Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits13Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_EXPIRATION":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits13Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits13Type: %v", v)
	}
}

type ListContractsLedger13 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits13Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
}

func (l ListContractsLedger13) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedger13) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedger13) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits13Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits13Type("")
	}
	return o.Type
}

func (o *ListContractsLedger13) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedger13) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits12Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits12TypePostpaidCommitManual ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits12Type = "POSTPAID_COMMIT_MANUAL"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits12Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits12Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_MANUAL":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits12Type: %v", v)
	}
}

type ListContractsLedger12 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits12Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
	Reason    string                                                                                     `json:"reason"`
}

func (l ListContractsLedger12) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedger12) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedger12) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits12Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits12Type("")
	}
	return o.Type
}

func (o *ListContractsLedger12) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedger12) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedger12) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits11Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits11TypePrepaidCommitManual ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits11Type = "PREPAID_COMMIT_MANUAL"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits11Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits11Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_MANUAL":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits11Type: %v", v)
	}
}

type ListContractsLedger11 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits11Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
	Reason    string                                                                                     `json:"reason"`
}

func (l ListContractsLedger11) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedger11) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedger11) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits11Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits11Type("")
	}
	return o.Type
}

func (o *ListContractsLedger11) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedger11) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedger11) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits10Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits10TypePostpaidCommitTrueup ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits10Type = "POSTPAID_COMMIT_TRUEUP"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits10Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits10Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_TRUEUP":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits10Type: %v", v)
	}
}

type ListContractsLedger10 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits10Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
	InvoiceID string                                                                                     `json:"invoice_id"`
}

func (l ListContractsLedger10) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedger10) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedger10) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits10Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommits10Type("")
	}
	return o.Type
}

func (o *ListContractsLedger10) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedger10) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedger10) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommitsType string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommitsTypePostpaidCommitRollover ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommitsType = "POSTPAID_COMMIT_ROLLOVER"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommitsType) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommitsType {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommitsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_ROLLOVER":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommitsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommitsType: %v", v)
	}
}

type ListContractsLedger9 struct {
	Type          ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommitsType `json:"type"`
	Timestamp     time.Time                                                                                `json:"timestamp"`
	Amount        float64                                                                                  `json:"amount"`
	SegmentID     string                                                                                   `json:"segment_id"`
	NewContractID string                                                                                   `json:"new_contract_id"`
}

func (l ListContractsLedger9) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedger9) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedger9) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommitsType {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCommitsType("")
	}
	return o.Type
}

func (o *ListContractsLedger9) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedger9) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedger9) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedger9) GetNewContractID() string {
	if o == nil {
		return ""
	}
	return o.NewContractID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialType string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialTypePostpaidCommitAutomatedInvoiceDeduction ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialType = "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialType) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialType {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialType: %v", v)
	}
}

type ListContractsLedger8 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialType `json:"type"`
	Timestamp time.Time                                                                         `json:"timestamp"`
	Amount    float64                                                                           `json:"amount"`
	SegmentID string                                                                            `json:"segment_id"`
	InvoiceID string                                                                            `json:"invoice_id"`
}

func (l ListContractsLedger8) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedger8) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedger8) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialType {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialType("")
	}
	return o.Type
}

func (o *ListContractsLedger8) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedger8) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedger8) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedger8) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataType string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataTypePostpaidCommitInitialBalance ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataType = "POSTPAID_COMMIT_INITIAL_BALANCE"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataType) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataType {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_INITIAL_BALANCE":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataType: %v", v)
	}
}

type ListContractsLedger7 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataType `json:"type"`
	Timestamp time.Time                                                                  `json:"timestamp"`
	Amount    float64                                                                    `json:"amount"`
}

func (l ListContractsLedger7) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedger7) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedger7) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataType {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataType("")
	}
	return o.Type
}

func (o *ListContractsLedger7) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedger7) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyType string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyTypePrepaidCommitCredited ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyType = "PREPAID_COMMIT_CREDITED"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyType) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_CREDITED":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type ListContractsLedger6 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyType `json:"type"`
	Timestamp time.Time                                                              `json:"timestamp"`
	Amount    float64                                                                `json:"amount"`
	SegmentID string                                                                 `json:"segment_id"`
	InvoiceID string                                                                 `json:"invoice_id"`
}

func (l ListContractsLedger6) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedger6) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedger6) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *ListContractsLedger6) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedger6) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedger6) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedger6) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200ApplicationJSONType string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONTypePrepaidCommitCanceled ListContractsLedgerContractsResponse200ApplicationJSONType = "PREPAID_COMMIT_CANCELED"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONType) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONType {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_CANCELED":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONType: %v", v)
	}
}

type ListContractsLedger5 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONType `json:"type"`
	Timestamp time.Time                                                  `json:"timestamp"`
	Amount    float64                                                    `json:"amount"`
	SegmentID string                                                     `json:"segment_id"`
	InvoiceID string                                                     `json:"invoice_id"`
}

func (l ListContractsLedger5) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedger5) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedger5) GetType() ListContractsLedgerContractsResponse200ApplicationJSONType {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *ListContractsLedger5) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedger5) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedger5) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedger5) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200Type string

const (
	ListContractsLedgerContractsResponse200TypePrepaidCommitExpiration ListContractsLedgerContractsResponse200Type = "PREPAID_COMMIT_EXPIRATION"
)

func (e ListContractsLedgerContractsResponse200Type) ToPointer() *ListContractsLedgerContractsResponse200Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_EXPIRATION":
		*e = ListContractsLedgerContractsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200Type: %v", v)
	}
}

type ListContractsLedger4 struct {
	Type      ListContractsLedgerContractsResponse200Type `json:"type"`
	Timestamp time.Time                                   `json:"timestamp"`
	Amount    float64                                     `json:"amount"`
	SegmentID string                                      `json:"segment_id"`
}

func (l ListContractsLedger4) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedger4) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedger4) GetType() ListContractsLedgerContractsResponse200Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200Type("")
	}
	return o.Type
}

func (o *ListContractsLedger4) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedger4) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedger4) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type ListContractsLedgerContractsResponseType string

const (
	ListContractsLedgerContractsResponseTypePrepaidCommitRollover ListContractsLedgerContractsResponseType = "PREPAID_COMMIT_ROLLOVER"
)

func (e ListContractsLedgerContractsResponseType) ToPointer() *ListContractsLedgerContractsResponseType {
	return &e
}
func (e *ListContractsLedgerContractsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_ROLLOVER":
		*e = ListContractsLedgerContractsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponseType: %v", v)
	}
}

type ListContractsLedger3 struct {
	Type          ListContractsLedgerContractsResponseType `json:"type"`
	Timestamp     time.Time                                `json:"timestamp"`
	Amount        float64                                  `json:"amount"`
	SegmentID     string                                   `json:"segment_id"`
	NewContractID string                                   `json:"new_contract_id"`
}

func (l ListContractsLedger3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedger3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedger3) GetType() ListContractsLedgerContractsResponseType {
	if o == nil {
		return ListContractsLedgerContractsResponseType("")
	}
	return o.Type
}

func (o *ListContractsLedger3) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedger3) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedger3) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedger3) GetNewContractID() string {
	if o == nil {
		return ""
	}
	return o.NewContractID
}

type ListContractsLedgerContractsType string

const (
	ListContractsLedgerContractsTypePrepaidCommitAutomatedInvoiceDeduction ListContractsLedgerContractsType = "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e ListContractsLedgerContractsType) ToPointer() *ListContractsLedgerContractsType {
	return &e
}
func (e *ListContractsLedgerContractsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = ListContractsLedgerContractsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsType: %v", v)
	}
}

type ListContractsLedger2 struct {
	Type      ListContractsLedgerContractsType `json:"type"`
	Timestamp time.Time                        `json:"timestamp"`
	Amount    float64                          `json:"amount"`
	SegmentID string                           `json:"segment_id"`
	InvoiceID string                           `json:"invoice_id"`
}

func (l ListContractsLedger2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedger2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedger2) GetType() ListContractsLedgerContractsType {
	if o == nil {
		return ListContractsLedgerContractsType("")
	}
	return o.Type
}

func (o *ListContractsLedger2) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedger2) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedger2) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedger2) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerType string

const (
	ListContractsLedgerTypePrepaidCommitSegmentStart ListContractsLedgerType = "PREPAID_COMMIT_SEGMENT_START"
)

func (e ListContractsLedgerType) ToPointer() *ListContractsLedgerType {
	return &e
}
func (e *ListContractsLedgerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_SEGMENT_START":
		*e = ListContractsLedgerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerType: %v", v)
	}
}

type ListContractsLedger1 struct {
	Type      ListContractsLedgerType `json:"type"`
	Timestamp time.Time               `json:"timestamp"`
	Amount    float64                 `json:"amount"`
	SegmentID string                  `json:"segment_id"`
}

func (l ListContractsLedger1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedger1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedger1) GetType() ListContractsLedgerType {
	if o == nil {
		return ListContractsLedgerType("")
	}
	return o.Type
}

func (o *ListContractsLedger1) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedger1) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedger1) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type ListContractsLedgerUnionType string

const (
	ListContractsLedgerUnionTypeListContractsLedger1  ListContractsLedgerUnionType = "listContracts_ledger_1"
	ListContractsLedgerUnionTypeListContractsLedger2  ListContractsLedgerUnionType = "listContracts_ledger_2"
	ListContractsLedgerUnionTypeListContractsLedger3  ListContractsLedgerUnionType = "listContracts_ledger_3"
	ListContractsLedgerUnionTypeListContractsLedger4  ListContractsLedgerUnionType = "listContracts_ledger_4"
	ListContractsLedgerUnionTypeListContractsLedger5  ListContractsLedgerUnionType = "listContracts_ledger_5"
	ListContractsLedgerUnionTypeListContractsLedger6  ListContractsLedgerUnionType = "listContracts_ledger_6"
	ListContractsLedgerUnionTypeListContractsLedger7  ListContractsLedgerUnionType = "listContracts_ledger_7"
	ListContractsLedgerUnionTypeListContractsLedger8  ListContractsLedgerUnionType = "listContracts_ledger_8"
	ListContractsLedgerUnionTypeListContractsLedger9  ListContractsLedgerUnionType = "listContracts_ledger_9"
	ListContractsLedgerUnionTypeListContractsLedger10 ListContractsLedgerUnionType = "listContracts_ledger_10"
	ListContractsLedgerUnionTypeListContractsLedger11 ListContractsLedgerUnionType = "listContracts_ledger_11"
	ListContractsLedgerUnionTypeListContractsLedger12 ListContractsLedgerUnionType = "listContracts_ledger_12"
	ListContractsLedgerUnionTypeListContractsLedger13 ListContractsLedgerUnionType = "listContracts_ledger_13"
)

type ListContractsLedger struct {
	ListContractsLedger1  *ListContractsLedger1
	ListContractsLedger2  *ListContractsLedger2
	ListContractsLedger3  *ListContractsLedger3
	ListContractsLedger4  *ListContractsLedger4
	ListContractsLedger5  *ListContractsLedger5
	ListContractsLedger6  *ListContractsLedger6
	ListContractsLedger7  *ListContractsLedger7
	ListContractsLedger8  *ListContractsLedger8
	ListContractsLedger9  *ListContractsLedger9
	ListContractsLedger10 *ListContractsLedger10
	ListContractsLedger11 *ListContractsLedger11
	ListContractsLedger12 *ListContractsLedger12
	ListContractsLedger13 *ListContractsLedger13

	Type ListContractsLedgerUnionType
}

func CreateListContractsLedgerListContractsLedger1(listContractsLedger1 ListContractsLedger1) ListContractsLedger {
	typ := ListContractsLedgerUnionTypeListContractsLedger1

	return ListContractsLedger{
		ListContractsLedger1: &listContractsLedger1,
		Type:                 typ,
	}
}

func CreateListContractsLedgerListContractsLedger2(listContractsLedger2 ListContractsLedger2) ListContractsLedger {
	typ := ListContractsLedgerUnionTypeListContractsLedger2

	return ListContractsLedger{
		ListContractsLedger2: &listContractsLedger2,
		Type:                 typ,
	}
}

func CreateListContractsLedgerListContractsLedger3(listContractsLedger3 ListContractsLedger3) ListContractsLedger {
	typ := ListContractsLedgerUnionTypeListContractsLedger3

	return ListContractsLedger{
		ListContractsLedger3: &listContractsLedger3,
		Type:                 typ,
	}
}

func CreateListContractsLedgerListContractsLedger4(listContractsLedger4 ListContractsLedger4) ListContractsLedger {
	typ := ListContractsLedgerUnionTypeListContractsLedger4

	return ListContractsLedger{
		ListContractsLedger4: &listContractsLedger4,
		Type:                 typ,
	}
}

func CreateListContractsLedgerListContractsLedger5(listContractsLedger5 ListContractsLedger5) ListContractsLedger {
	typ := ListContractsLedgerUnionTypeListContractsLedger5

	return ListContractsLedger{
		ListContractsLedger5: &listContractsLedger5,
		Type:                 typ,
	}
}

func CreateListContractsLedgerListContractsLedger6(listContractsLedger6 ListContractsLedger6) ListContractsLedger {
	typ := ListContractsLedgerUnionTypeListContractsLedger6

	return ListContractsLedger{
		ListContractsLedger6: &listContractsLedger6,
		Type:                 typ,
	}
}

func CreateListContractsLedgerListContractsLedger7(listContractsLedger7 ListContractsLedger7) ListContractsLedger {
	typ := ListContractsLedgerUnionTypeListContractsLedger7

	return ListContractsLedger{
		ListContractsLedger7: &listContractsLedger7,
		Type:                 typ,
	}
}

func CreateListContractsLedgerListContractsLedger8(listContractsLedger8 ListContractsLedger8) ListContractsLedger {
	typ := ListContractsLedgerUnionTypeListContractsLedger8

	return ListContractsLedger{
		ListContractsLedger8: &listContractsLedger8,
		Type:                 typ,
	}
}

func CreateListContractsLedgerListContractsLedger9(listContractsLedger9 ListContractsLedger9) ListContractsLedger {
	typ := ListContractsLedgerUnionTypeListContractsLedger9

	return ListContractsLedger{
		ListContractsLedger9: &listContractsLedger9,
		Type:                 typ,
	}
}

func CreateListContractsLedgerListContractsLedger10(listContractsLedger10 ListContractsLedger10) ListContractsLedger {
	typ := ListContractsLedgerUnionTypeListContractsLedger10

	return ListContractsLedger{
		ListContractsLedger10: &listContractsLedger10,
		Type:                  typ,
	}
}

func CreateListContractsLedgerListContractsLedger11(listContractsLedger11 ListContractsLedger11) ListContractsLedger {
	typ := ListContractsLedgerUnionTypeListContractsLedger11

	return ListContractsLedger{
		ListContractsLedger11: &listContractsLedger11,
		Type:                  typ,
	}
}

func CreateListContractsLedgerListContractsLedger12(listContractsLedger12 ListContractsLedger12) ListContractsLedger {
	typ := ListContractsLedgerUnionTypeListContractsLedger12

	return ListContractsLedger{
		ListContractsLedger12: &listContractsLedger12,
		Type:                  typ,
	}
}

func CreateListContractsLedgerListContractsLedger13(listContractsLedger13 ListContractsLedger13) ListContractsLedger {
	typ := ListContractsLedgerUnionTypeListContractsLedger13

	return ListContractsLedger{
		ListContractsLedger13: &listContractsLedger13,
		Type:                  typ,
	}
}

func (u *ListContractsLedger) UnmarshalJSON(data []byte) error {

	var listContractsLedger7 ListContractsLedger7 = ListContractsLedger7{}
	if err := utils.UnmarshalJSON(data, &listContractsLedger7, "", true, true); err == nil {
		u.ListContractsLedger7 = &listContractsLedger7
		u.Type = ListContractsLedgerUnionTypeListContractsLedger7
		return nil
	}

	var listContractsLedger13 ListContractsLedger13 = ListContractsLedger13{}
	if err := utils.UnmarshalJSON(data, &listContractsLedger13, "", true, true); err == nil {
		u.ListContractsLedger13 = &listContractsLedger13
		u.Type = ListContractsLedgerUnionTypeListContractsLedger13
		return nil
	}

	var listContractsLedger4 ListContractsLedger4 = ListContractsLedger4{}
	if err := utils.UnmarshalJSON(data, &listContractsLedger4, "", true, true); err == nil {
		u.ListContractsLedger4 = &listContractsLedger4
		u.Type = ListContractsLedgerUnionTypeListContractsLedger4
		return nil
	}

	var listContractsLedger1 ListContractsLedger1 = ListContractsLedger1{}
	if err := utils.UnmarshalJSON(data, &listContractsLedger1, "", true, true); err == nil {
		u.ListContractsLedger1 = &listContractsLedger1
		u.Type = ListContractsLedgerUnionTypeListContractsLedger1
		return nil
	}

	var listContractsLedger10 ListContractsLedger10 = ListContractsLedger10{}
	if err := utils.UnmarshalJSON(data, &listContractsLedger10, "", true, true); err == nil {
		u.ListContractsLedger10 = &listContractsLedger10
		u.Type = ListContractsLedgerUnionTypeListContractsLedger10
		return nil
	}

	var listContractsLedger11 ListContractsLedger11 = ListContractsLedger11{}
	if err := utils.UnmarshalJSON(data, &listContractsLedger11, "", true, true); err == nil {
		u.ListContractsLedger11 = &listContractsLedger11
		u.Type = ListContractsLedgerUnionTypeListContractsLedger11
		return nil
	}

	var listContractsLedger12 ListContractsLedger12 = ListContractsLedger12{}
	if err := utils.UnmarshalJSON(data, &listContractsLedger12, "", true, true); err == nil {
		u.ListContractsLedger12 = &listContractsLedger12
		u.Type = ListContractsLedgerUnionTypeListContractsLedger12
		return nil
	}

	var listContractsLedger5 ListContractsLedger5 = ListContractsLedger5{}
	if err := utils.UnmarshalJSON(data, &listContractsLedger5, "", true, true); err == nil {
		u.ListContractsLedger5 = &listContractsLedger5
		u.Type = ListContractsLedgerUnionTypeListContractsLedger5
		return nil
	}

	var listContractsLedger6 ListContractsLedger6 = ListContractsLedger6{}
	if err := utils.UnmarshalJSON(data, &listContractsLedger6, "", true, true); err == nil {
		u.ListContractsLedger6 = &listContractsLedger6
		u.Type = ListContractsLedgerUnionTypeListContractsLedger6
		return nil
	}

	var listContractsLedger3 ListContractsLedger3 = ListContractsLedger3{}
	if err := utils.UnmarshalJSON(data, &listContractsLedger3, "", true, true); err == nil {
		u.ListContractsLedger3 = &listContractsLedger3
		u.Type = ListContractsLedgerUnionTypeListContractsLedger3
		return nil
	}

	var listContractsLedger8 ListContractsLedger8 = ListContractsLedger8{}
	if err := utils.UnmarshalJSON(data, &listContractsLedger8, "", true, true); err == nil {
		u.ListContractsLedger8 = &listContractsLedger8
		u.Type = ListContractsLedgerUnionTypeListContractsLedger8
		return nil
	}

	var listContractsLedger9 ListContractsLedger9 = ListContractsLedger9{}
	if err := utils.UnmarshalJSON(data, &listContractsLedger9, "", true, true); err == nil {
		u.ListContractsLedger9 = &listContractsLedger9
		u.Type = ListContractsLedgerUnionTypeListContractsLedger9
		return nil
	}

	var listContractsLedger2 ListContractsLedger2 = ListContractsLedger2{}
	if err := utils.UnmarshalJSON(data, &listContractsLedger2, "", true, true); err == nil {
		u.ListContractsLedger2 = &listContractsLedger2
		u.Type = ListContractsLedgerUnionTypeListContractsLedger2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListContractsLedger", string(data))
}

func (u ListContractsLedger) MarshalJSON() ([]byte, error) {
	if u.ListContractsLedger1 != nil {
		return utils.MarshalJSON(u.ListContractsLedger1, "", true)
	}

	if u.ListContractsLedger2 != nil {
		return utils.MarshalJSON(u.ListContractsLedger2, "", true)
	}

	if u.ListContractsLedger3 != nil {
		return utils.MarshalJSON(u.ListContractsLedger3, "", true)
	}

	if u.ListContractsLedger4 != nil {
		return utils.MarshalJSON(u.ListContractsLedger4, "", true)
	}

	if u.ListContractsLedger5 != nil {
		return utils.MarshalJSON(u.ListContractsLedger5, "", true)
	}

	if u.ListContractsLedger6 != nil {
		return utils.MarshalJSON(u.ListContractsLedger6, "", true)
	}

	if u.ListContractsLedger7 != nil {
		return utils.MarshalJSON(u.ListContractsLedger7, "", true)
	}

	if u.ListContractsLedger8 != nil {
		return utils.MarshalJSON(u.ListContractsLedger8, "", true)
	}

	if u.ListContractsLedger9 != nil {
		return utils.MarshalJSON(u.ListContractsLedger9, "", true)
	}

	if u.ListContractsLedger10 != nil {
		return utils.MarshalJSON(u.ListContractsLedger10, "", true)
	}

	if u.ListContractsLedger11 != nil {
		return utils.MarshalJSON(u.ListContractsLedger11, "", true)
	}

	if u.ListContractsLedger12 != nil {
		return utils.MarshalJSON(u.ListContractsLedger12, "", true)
	}

	if u.ListContractsLedger13 != nil {
		return utils.MarshalJSON(u.ListContractsLedger13, "", true)
	}

	return nil, errors.New("could not marshal union type ListContractsLedger: all fields are null")
}

type ListContractsCommits struct {
	ID       string                 `json:"id"`
	Contract *ListContractsContract `json:"contract,omitempty"`
	Type     ListContractsType      `json:"type"`
	Name     *string                `json:"name,omitempty"`
	// If multiple credits or commits are applicable, the one with the lower priority will apply first.
	Priority *float64             `json:"priority,omitempty"`
	Product  ListContractsProduct `json:"product"`
	// The schedule that the customer will gain access to the credits purposed with this commit.
	AccessSchedule *ListContractsAccessSchedule `json:"access_schedule,omitempty"`
	// The schedule that the customer will be invoiced for this commit.
	InvoiceSchedule *ListContractsInvoiceSchedule `json:"invoice_schedule,omitempty"`
	// The contract that this commit will be billed on.
	InvoiceContract       *ListContractsInvoiceContract `json:"invoice_contract,omitempty"`
	RolledOverFrom        *ListContractsRolledOverFrom  `json:"rolled_over_from,omitempty"`
	Description           *string                       `json:"description,omitempty"`
	RolloverFraction      *float64                      `json:"rollover_fraction,omitempty"`
	ApplicableProductIds  []string                      `json:"applicable_product_ids,omitempty"`
	ApplicableProductTags []string                      `json:"applicable_product_tags,omitempty"`
	ApplicableContractIds []string                      `json:"applicable_contract_ids,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// (DEPRECATED) Use access_schedule + invoice_schedule instead.
	Amount *float64 `json:"amount,omitempty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string `json:"salesforce_opportunity_id,omitempty"`
	// A list of ordered events that impact the balance of a commit. For example, an invoice deduction or a rollover.
	Ledger       []ListContractsLedger `json:"ledger,omitempty"`
	CustomFields map[string]string     `json:"custom_fields,omitempty"`
}

func (o *ListContractsCommits) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsCommits) GetContract() *ListContractsContract {
	if o == nil {
		return nil
	}
	return o.Contract
}

func (o *ListContractsCommits) GetType() ListContractsType {
	if o == nil {
		return ListContractsType("")
	}
	return o.Type
}

func (o *ListContractsCommits) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListContractsCommits) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *ListContractsCommits) GetProduct() ListContractsProduct {
	if o == nil {
		return ListContractsProduct{}
	}
	return o.Product
}

func (o *ListContractsCommits) GetAccessSchedule() *ListContractsAccessSchedule {
	if o == nil {
		return nil
	}
	return o.AccessSchedule
}

func (o *ListContractsCommits) GetInvoiceSchedule() *ListContractsInvoiceSchedule {
	if o == nil {
		return nil
	}
	return o.InvoiceSchedule
}

func (o *ListContractsCommits) GetInvoiceContract() *ListContractsInvoiceContract {
	if o == nil {
		return nil
	}
	return o.InvoiceContract
}

func (o *ListContractsCommits) GetRolledOverFrom() *ListContractsRolledOverFrom {
	if o == nil {
		return nil
	}
	return o.RolledOverFrom
}

func (o *ListContractsCommits) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListContractsCommits) GetRolloverFraction() *float64 {
	if o == nil {
		return nil
	}
	return o.RolloverFraction
}

func (o *ListContractsCommits) GetApplicableProductIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductIds
}

func (o *ListContractsCommits) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *ListContractsCommits) GetApplicableContractIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableContractIds
}

func (o *ListContractsCommits) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *ListContractsCommits) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ListContractsCommits) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *ListContractsCommits) GetLedger() []ListContractsLedger {
	if o == nil {
		return nil
	}
	return o.Ledger
}

func (o *ListContractsCommits) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type ListContractsContractsContract struct {
	ID string `json:"id"`
}

func (o *ListContractsContractsContract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsType string

const (
	ListContractsContractsTypeCredit ListContractsContractsType = "CREDIT"
)

func (e ListContractsContractsType) ToPointer() *ListContractsContractsType {
	return &e
}
func (e *ListContractsContractsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT":
		*e = ListContractsContractsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsContractsType: %v", v)
	}
}

type ListContractsContractsProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *ListContractsContractsProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsResponseScheduleItems struct {
	ID           string    `json:"id"`
	Amount       float64   `json:"amount"`
	StartingAt   time.Time `json:"starting_at"`
	EndingBefore time.Time `json:"ending_before"`
}

func (l ListContractsContractsResponseScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsResponseScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsResponseScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponseScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsContractsResponseScheduleItems) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *ListContractsContractsResponseScheduleItems) GetEndingBefore() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndingBefore
}

// ListContractsContractsAccessSchedule - The schedule that the customer will gain access to the credits.
type ListContractsContractsAccessSchedule struct {
	CreditType    *ListContractsContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsCreditType `json:"credit_type,omitempty"`
	ScheduleItems []ListContractsContractsResponseScheduleItems                                             `json:"schedule_items"`
}

func (o *ListContractsContractsAccessSchedule) GetCreditType() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *ListContractsContractsAccessSchedule) GetScheduleItems() []ListContractsContractsResponseScheduleItems {
	if o == nil {
		return []ListContractsContractsResponseScheduleItems{}
	}
	return o.ScheduleItems
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits6Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits6TypeCreditManual ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits6Type = "CREDIT_MANUAL"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits6Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits6Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_MANUAL":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits6Type: %v", v)
	}
}

type ListContractsLedgerContracts6 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits6Type `json:"type"`
	Timestamp time.Time                                                                                 `json:"timestamp"`
	Amount    float64                                                                                   `json:"amount"`
	Reason    string                                                                                    `json:"reason"`
}

func (l ListContractsLedgerContracts6) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContracts6) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContracts6) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits6Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits6Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContracts6) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContracts6) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContracts6) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits5Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits5TypeCreditCredited ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits5Type = "CREDIT_CREDITED"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits5Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits5Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_CREDITED":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits5Type: %v", v)
	}
}

type ListContractsLedgerContracts5 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits5Type `json:"type"`
	Timestamp time.Time                                                                                 `json:"timestamp"`
	Amount    float64                                                                                   `json:"amount"`
	SegmentID string                                                                                    `json:"segment_id"`
	InvoiceID string                                                                                    `json:"invoice_id"`
}

func (l ListContractsLedgerContracts5) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContracts5) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContracts5) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits5Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits5Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContracts5) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContracts5) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContracts5) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedgerContracts5) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits4Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits4TypeCreditCanceled ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits4Type = "CREDIT_CANCELED"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits4Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits4Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_CANCELED":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits4Type: %v", v)
	}
}

type ListContractsLedgerContracts4 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits4Type `json:"type"`
	Timestamp time.Time                                                                                 `json:"timestamp"`
	Amount    float64                                                                                   `json:"amount"`
	SegmentID string                                                                                    `json:"segment_id"`
	InvoiceID string                                                                                    `json:"invoice_id"`
}

func (l ListContractsLedgerContracts4) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContracts4) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContracts4) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits4Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits4Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContracts4) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContracts4) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContracts4) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedgerContracts4) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits3Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits3TypeCreditExpiration ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits3Type = "CREDIT_EXPIRATION"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits3Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits3Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_EXPIRATION":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits3Type: %v", v)
	}
}

type ListContractsLedgerContracts3 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits3Type `json:"type"`
	Timestamp time.Time                                                                                 `json:"timestamp"`
	Amount    float64                                                                                   `json:"amount"`
	SegmentID string                                                                                    `json:"segment_id"`
}

func (l ListContractsLedgerContracts3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContracts3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContracts3) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits3Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits3Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContracts3) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContracts3) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContracts3) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits2Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits2TypeCreditAutomatedInvoiceDeduction ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits2Type = "CREDIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits2Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits2Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits2Type: %v", v)
	}
}

type ListContractsLedgerContracts2 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits2Type `json:"type"`
	Timestamp time.Time                                                                                 `json:"timestamp"`
	Amount    float64                                                                                   `json:"amount"`
	SegmentID string                                                                                    `json:"segment_id"`
	InvoiceID string                                                                                    `json:"invoice_id"`
}

func (l ListContractsLedgerContracts2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContracts2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContracts2) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits2Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCredits2Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContracts2) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContracts2) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContracts2) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedgerContracts2) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsType string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsTypeCreditSegmentStart ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsType = "CREDIT_SEGMENT_START"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsType) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsType {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_SEGMENT_START":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsType: %v", v)
	}
}

type ListContractsLedgerContracts1 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsType `json:"type"`
	Timestamp time.Time                                                                                `json:"timestamp"`
	Amount    float64                                                                                  `json:"amount"`
	SegmentID string                                                                                   `json:"segment_id"`
}

func (l ListContractsLedgerContracts1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContracts1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContracts1) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsType {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataInitialCreditsType("")
	}
	return o.Type
}

func (o *ListContractsLedgerContracts1) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContracts1) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContracts1) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type ListContractsContractsLedgerType string

const (
	ListContractsContractsLedgerTypeListContractsLedgerContracts1 ListContractsContractsLedgerType = "listContracts_ledger_contracts_1"
	ListContractsContractsLedgerTypeListContractsLedgerContracts2 ListContractsContractsLedgerType = "listContracts_ledger_contracts_2"
	ListContractsContractsLedgerTypeListContractsLedgerContracts3 ListContractsContractsLedgerType = "listContracts_ledger_contracts_3"
	ListContractsContractsLedgerTypeListContractsLedgerContracts4 ListContractsContractsLedgerType = "listContracts_ledger_contracts_4"
	ListContractsContractsLedgerTypeListContractsLedgerContracts5 ListContractsContractsLedgerType = "listContracts_ledger_contracts_5"
	ListContractsContractsLedgerTypeListContractsLedgerContracts6 ListContractsContractsLedgerType = "listContracts_ledger_contracts_6"
)

type ListContractsContractsLedger struct {
	ListContractsLedgerContracts1 *ListContractsLedgerContracts1
	ListContractsLedgerContracts2 *ListContractsLedgerContracts2
	ListContractsLedgerContracts3 *ListContractsLedgerContracts3
	ListContractsLedgerContracts4 *ListContractsLedgerContracts4
	ListContractsLedgerContracts5 *ListContractsLedgerContracts5
	ListContractsLedgerContracts6 *ListContractsLedgerContracts6

	Type ListContractsContractsLedgerType
}

func CreateListContractsContractsLedgerListContractsLedgerContracts1(listContractsLedgerContracts1 ListContractsLedgerContracts1) ListContractsContractsLedger {
	typ := ListContractsContractsLedgerTypeListContractsLedgerContracts1

	return ListContractsContractsLedger{
		ListContractsLedgerContracts1: &listContractsLedgerContracts1,
		Type:                          typ,
	}
}

func CreateListContractsContractsLedgerListContractsLedgerContracts2(listContractsLedgerContracts2 ListContractsLedgerContracts2) ListContractsContractsLedger {
	typ := ListContractsContractsLedgerTypeListContractsLedgerContracts2

	return ListContractsContractsLedger{
		ListContractsLedgerContracts2: &listContractsLedgerContracts2,
		Type:                          typ,
	}
}

func CreateListContractsContractsLedgerListContractsLedgerContracts3(listContractsLedgerContracts3 ListContractsLedgerContracts3) ListContractsContractsLedger {
	typ := ListContractsContractsLedgerTypeListContractsLedgerContracts3

	return ListContractsContractsLedger{
		ListContractsLedgerContracts3: &listContractsLedgerContracts3,
		Type:                          typ,
	}
}

func CreateListContractsContractsLedgerListContractsLedgerContracts4(listContractsLedgerContracts4 ListContractsLedgerContracts4) ListContractsContractsLedger {
	typ := ListContractsContractsLedgerTypeListContractsLedgerContracts4

	return ListContractsContractsLedger{
		ListContractsLedgerContracts4: &listContractsLedgerContracts4,
		Type:                          typ,
	}
}

func CreateListContractsContractsLedgerListContractsLedgerContracts5(listContractsLedgerContracts5 ListContractsLedgerContracts5) ListContractsContractsLedger {
	typ := ListContractsContractsLedgerTypeListContractsLedgerContracts5

	return ListContractsContractsLedger{
		ListContractsLedgerContracts5: &listContractsLedgerContracts5,
		Type:                          typ,
	}
}

func CreateListContractsContractsLedgerListContractsLedgerContracts6(listContractsLedgerContracts6 ListContractsLedgerContracts6) ListContractsContractsLedger {
	typ := ListContractsContractsLedgerTypeListContractsLedgerContracts6

	return ListContractsContractsLedger{
		ListContractsLedgerContracts6: &listContractsLedgerContracts6,
		Type:                          typ,
	}
}

func (u *ListContractsContractsLedger) UnmarshalJSON(data []byte) error {

	var listContractsLedgerContracts1 ListContractsLedgerContracts1 = ListContractsLedgerContracts1{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContracts1, "", true, true); err == nil {
		u.ListContractsLedgerContracts1 = &listContractsLedgerContracts1
		u.Type = ListContractsContractsLedgerTypeListContractsLedgerContracts1
		return nil
	}

	var listContractsLedgerContracts3 ListContractsLedgerContracts3 = ListContractsLedgerContracts3{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContracts3, "", true, true); err == nil {
		u.ListContractsLedgerContracts3 = &listContractsLedgerContracts3
		u.Type = ListContractsContractsLedgerTypeListContractsLedgerContracts3
		return nil
	}

	var listContractsLedgerContracts6 ListContractsLedgerContracts6 = ListContractsLedgerContracts6{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContracts6, "", true, true); err == nil {
		u.ListContractsLedgerContracts6 = &listContractsLedgerContracts6
		u.Type = ListContractsContractsLedgerTypeListContractsLedgerContracts6
		return nil
	}

	var listContractsLedgerContracts2 ListContractsLedgerContracts2 = ListContractsLedgerContracts2{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContracts2, "", true, true); err == nil {
		u.ListContractsLedgerContracts2 = &listContractsLedgerContracts2
		u.Type = ListContractsContractsLedgerTypeListContractsLedgerContracts2
		return nil
	}

	var listContractsLedgerContracts4 ListContractsLedgerContracts4 = ListContractsLedgerContracts4{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContracts4, "", true, true); err == nil {
		u.ListContractsLedgerContracts4 = &listContractsLedgerContracts4
		u.Type = ListContractsContractsLedgerTypeListContractsLedgerContracts4
		return nil
	}

	var listContractsLedgerContracts5 ListContractsLedgerContracts5 = ListContractsLedgerContracts5{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContracts5, "", true, true); err == nil {
		u.ListContractsLedgerContracts5 = &listContractsLedgerContracts5
		u.Type = ListContractsContractsLedgerTypeListContractsLedgerContracts5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListContractsContractsLedger", string(data))
}

func (u ListContractsContractsLedger) MarshalJSON() ([]byte, error) {
	if u.ListContractsLedgerContracts1 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContracts1, "", true)
	}

	if u.ListContractsLedgerContracts2 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContracts2, "", true)
	}

	if u.ListContractsLedgerContracts3 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContracts3, "", true)
	}

	if u.ListContractsLedgerContracts4 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContracts4, "", true)
	}

	if u.ListContractsLedgerContracts5 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContracts5, "", true)
	}

	if u.ListContractsLedgerContracts6 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContracts6, "", true)
	}

	return nil, errors.New("could not marshal union type ListContractsContractsLedger: all fields are null")
}

type ListContractsCredits struct {
	ID       string                          `json:"id"`
	Contract *ListContractsContractsContract `json:"contract,omitempty"`
	Type     ListContractsContractsType      `json:"type"`
	Name     *string                         `json:"name,omitempty"`
	// If multiple credits or commits are applicable, the one with the lower priority will apply first.
	Priority *float64                      `json:"priority,omitempty"`
	Product  ListContractsContractsProduct `json:"product"`
	// The schedule that the customer will gain access to the credits.
	AccessSchedule        *ListContractsContractsAccessSchedule `json:"access_schedule,omitempty"`
	Description           *string                               `json:"description,omitempty"`
	ApplicableProductIds  []string                              `json:"applicable_product_ids,omitempty"`
	ApplicableProductTags []string                              `json:"applicable_product_tags,omitempty"`
	ApplicableContractIds []string                              `json:"applicable_contract_ids,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string `json:"salesforce_opportunity_id,omitempty"`
	// A list of ordered events that impact the balance of a credit. For example, an invoice deduction or an expiration.
	Ledger       []ListContractsContractsLedger `json:"ledger,omitempty"`
	CustomFields map[string]string              `json:"custom_fields,omitempty"`
}

func (o *ListContractsCredits) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsCredits) GetContract() *ListContractsContractsContract {
	if o == nil {
		return nil
	}
	return o.Contract
}

func (o *ListContractsCredits) GetType() ListContractsContractsType {
	if o == nil {
		return ListContractsContractsType("")
	}
	return o.Type
}

func (o *ListContractsCredits) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListContractsCredits) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *ListContractsCredits) GetProduct() ListContractsContractsProduct {
	if o == nil {
		return ListContractsContractsProduct{}
	}
	return o.Product
}

func (o *ListContractsCredits) GetAccessSchedule() *ListContractsContractsAccessSchedule {
	if o == nil {
		return nil
	}
	return o.AccessSchedule
}

func (o *ListContractsCredits) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListContractsCredits) GetApplicableProductIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductIds
}

func (o *ListContractsCredits) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *ListContractsCredits) GetApplicableContractIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableContractIds
}

func (o *ListContractsCredits) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *ListContractsCredits) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *ListContractsCredits) GetLedger() []ListContractsContractsLedger {
	if o == nil {
		return nil
	}
	return o.Ledger
}

func (o *ListContractsCredits) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type ListContractsContractsResponseProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *ListContractsContractsResponseProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponseProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ListContractsOverrideSpecifiers struct {
	ProductID               *string           `json:"product_id,omitempty"`
	ProductTags             []string          `json:"product_tags,omitempty"`
	PricingGroupValues      map[string]string `json:"pricing_group_values,omitempty"`
	PresentationGroupValues map[string]string `json:"presentation_group_values,omitempty"`
}

func (o *ListContractsOverrideSpecifiers) GetProductID() *string {
	if o == nil {
		return nil
	}
	return o.ProductID
}

func (o *ListContractsOverrideSpecifiers) GetProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ProductTags
}

func (o *ListContractsOverrideSpecifiers) GetPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PricingGroupValues
}

func (o *ListContractsOverrideSpecifiers) GetPresentationGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PresentationGroupValues
}

type ListContractsContractsResponseType string

const (
	ListContractsContractsResponseTypeOverwrite  ListContractsContractsResponseType = "OVERWRITE"
	ListContractsContractsResponseTypeMultiplier ListContractsContractsResponseType = "MULTIPLIER"
	ListContractsContractsResponseTypeTiered     ListContractsContractsResponseType = "TIERED"
)

func (e ListContractsContractsResponseType) ToPointer() *ListContractsContractsResponseType {
	return &e
}
func (e *ListContractsContractsResponseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OVERWRITE":
		fallthrough
	case "MULTIPLIER":
		fallthrough
	case "TIERED":
		*e = ListContractsContractsResponseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsContractsResponseType: %v", v)
	}
}

type ListContractsContractsResponse200RateType string

const (
	ListContractsContractsResponse200RateTypeFlatUpper         ListContractsContractsResponse200RateType = "FLAT"
	ListContractsContractsResponse200RateTypeFlatLower         ListContractsContractsResponse200RateType = "flat"
	ListContractsContractsResponse200RateTypePercentageUpper   ListContractsContractsResponse200RateType = "PERCENTAGE"
	ListContractsContractsResponse200RateTypePercentageLower   ListContractsContractsResponse200RateType = "percentage"
	ListContractsContractsResponse200RateTypeSubscriptionUpper ListContractsContractsResponse200RateType = "SUBSCRIPTION"
	ListContractsContractsResponse200RateTypeSubscriptionLower ListContractsContractsResponse200RateType = "subscription"
	ListContractsContractsResponse200RateTypeTieredUpper       ListContractsContractsResponse200RateType = "TIERED"
	ListContractsContractsResponse200RateTypeTieredLower       ListContractsContractsResponse200RateType = "tiered"
	ListContractsContractsResponse200RateTypeCustomUpper       ListContractsContractsResponse200RateType = "CUSTOM"
	ListContractsContractsResponse200RateTypeCustomLower       ListContractsContractsResponse200RateType = "custom"
)

func (e ListContractsContractsResponse200RateType) ToPointer() *ListContractsContractsResponse200RateType {
	return &e
}
func (e *ListContractsContractsResponse200RateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FLAT":
		fallthrough
	case "flat":
		fallthrough
	case "PERCENTAGE":
		fallthrough
	case "percentage":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "subscription":
		fallthrough
	case "TIERED":
		fallthrough
	case "tiered":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "custom":
		*e = ListContractsContractsResponse200RateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsContractsResponse200RateType: %v", v)
	}
}

type ListContractsContractsResponse200Tiers struct {
	Size  *float64 `json:"size,omitempty"`
	Price float64  `json:"price"`
}

func (o *ListContractsContractsResponse200Tiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *ListContractsContractsResponse200Tiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type ListContractsContractsResponse200CreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListContractsContractsResponse200CreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListContractsContractsResponse200CreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsOverwriteRate struct {
	RateType ListContractsContractsResponse200RateType `json:"rate_type"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price *float64 `json:"price,omitempty"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity *float64 `json:"quantity,omitempty"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type.
	IsProrated *bool `json:"is_prorated,omitempty"`
	// Only set for TIERED rate_type.
	Tiers []ListContractsContractsResponse200Tiers `json:"tiers,omitempty"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate processors.
	CustomRate map[string]any                               `json:"custom_rate,omitempty"`
	CreditType *ListContractsContractsResponse200CreditType `json:"credit_type,omitempty"`
}

func (o *ListContractsOverwriteRate) GetRateType() ListContractsContractsResponse200RateType {
	if o == nil {
		return ListContractsContractsResponse200RateType("")
	}
	return o.RateType
}

func (o *ListContractsOverwriteRate) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *ListContractsOverwriteRate) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *ListContractsOverwriteRate) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *ListContractsOverwriteRate) GetTiers() []ListContractsContractsResponse200Tiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *ListContractsOverwriteRate) GetCustomRate() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomRate
}

func (o *ListContractsOverwriteRate) GetCreditType() *ListContractsContractsResponse200CreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

type ListContractsOverrideTiers struct {
	Size       *float64 `json:"size,omitempty"`
	Multiplier float64  `json:"multiplier"`
}

func (o *ListContractsOverrideTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *ListContractsOverrideTiers) GetMultiplier() float64 {
	if o == nil {
		return 0.0
	}
	return o.Multiplier
}

type ListContractsRateType string

const (
	ListContractsRateTypeFlatUpper         ListContractsRateType = "FLAT"
	ListContractsRateTypeFlatLower         ListContractsRateType = "flat"
	ListContractsRateTypePercentageUpper   ListContractsRateType = "PERCENTAGE"
	ListContractsRateTypePercentageLower   ListContractsRateType = "percentage"
	ListContractsRateTypeSubscriptionUpper ListContractsRateType = "SUBSCRIPTION"
	ListContractsRateTypeSubscriptionLower ListContractsRateType = "subscription"
	ListContractsRateTypeTieredUpper       ListContractsRateType = "TIERED"
	ListContractsRateTypeTieredLower       ListContractsRateType = "tiered"
	ListContractsRateTypeCustomUpper       ListContractsRateType = "CUSTOM"
	ListContractsRateTypeCustomLower       ListContractsRateType = "custom"
)

func (e ListContractsRateType) ToPointer() *ListContractsRateType {
	return &e
}
func (e *ListContractsRateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FLAT":
		fallthrough
	case "flat":
		fallthrough
	case "PERCENTAGE":
		fallthrough
	case "percentage":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "subscription":
		fallthrough
	case "TIERED":
		fallthrough
	case "tiered":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "custom":
		*e = ListContractsRateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsRateType: %v", v)
	}
}

type ListContractsTiers struct {
	Size  *float64 `json:"size,omitempty"`
	Price float64  `json:"price"`
}

func (o *ListContractsTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *ListContractsTiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type ListContractsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListContractsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListContractsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsOverrides struct {
	ID                    string                                 `json:"id"`
	Product               *ListContractsContractsResponseProduct `json:"product,omitempty"`
	ApplicableProductTags []string                               `json:"applicable_product_tags,omitempty"`
	OverrideSpecifiers    []ListContractsOverrideSpecifiers      `json:"override_specifiers,omitempty"`
	StartingAt            time.Time                              `json:"starting_at"`
	EndingBefore          *time.Time                             `json:"ending_before,omitempty"`
	Entitled              *bool                                  `json:"entitled,omitempty"`
	Type                  *ListContractsContractsResponseType    `json:"type,omitempty"`
	Priority              *float64                               `json:"priority,omitempty"`
	Multiplier            *float64                               `json:"multiplier,omitempty"`
	OverwriteRate         *ListContractsOverwriteRate            `json:"overwrite_rate,omitempty"`
	OverrideTiers         []ListContractsOverrideTiers           `json:"override_tiers,omitempty"`
	RateType              *ListContractsRateType                 `json:"rate_type,omitempty"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price *float64 `json:"price,omitempty"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity *float64 `json:"quantity,omitempty"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type.
	IsProrated *bool `json:"is_prorated,omitempty"`
	// Only set for TIERED rate_type.
	Tiers []ListContractsTiers `json:"tiers,omitempty"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate processors.
	Value      map[string]any           `json:"value,omitempty"`
	CreditType *ListContractsCreditType `json:"credit_type,omitempty"`
}

func (l ListContractsOverrides) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsOverrides) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsOverrides) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsOverrides) GetProduct() *ListContractsContractsResponseProduct {
	if o == nil {
		return nil
	}
	return o.Product
}

func (o *ListContractsOverrides) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *ListContractsOverrides) GetOverrideSpecifiers() []ListContractsOverrideSpecifiers {
	if o == nil {
		return nil
	}
	return o.OverrideSpecifiers
}

func (o *ListContractsOverrides) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *ListContractsOverrides) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *ListContractsOverrides) GetEntitled() *bool {
	if o == nil {
		return nil
	}
	return o.Entitled
}

func (o *ListContractsOverrides) GetType() *ListContractsContractsResponseType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListContractsOverrides) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *ListContractsOverrides) GetMultiplier() *float64 {
	if o == nil {
		return nil
	}
	return o.Multiplier
}

func (o *ListContractsOverrides) GetOverwriteRate() *ListContractsOverwriteRate {
	if o == nil {
		return nil
	}
	return o.OverwriteRate
}

func (o *ListContractsOverrides) GetOverrideTiers() []ListContractsOverrideTiers {
	if o == nil {
		return nil
	}
	return o.OverrideTiers
}

func (o *ListContractsOverrides) GetRateType() *ListContractsRateType {
	if o == nil {
		return nil
	}
	return o.RateType
}

func (o *ListContractsOverrides) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *ListContractsOverrides) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *ListContractsOverrides) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *ListContractsOverrides) GetTiers() []ListContractsTiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *ListContractsOverrides) GetValue() map[string]any {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *ListContractsOverrides) GetCreditType() *ListContractsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

type ListContractsContractsResponse200Product struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *ListContractsContractsResponse200Product) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200Product) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsResponse200ScheduleItems struct {
	ID        string    `json:"id"`
	InvoiceID string    `json:"invoice_id"`
	Amount    float64   `json:"amount"`
	UnitPrice float64   `json:"unit_price"`
	Quantity  float64   `json:"quantity"`
	Timestamp time.Time `json:"timestamp"`
}

func (l ListContractsContractsResponse200ScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsResponse200ScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsResponse200ScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ScheduleItems) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *ListContractsContractsResponse200ScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsContractsResponse200ScheduleItems) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *ListContractsContractsResponse200ScheduleItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *ListContractsContractsResponse200ScheduleItems) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

type ListContractsSchedule struct {
	CreditType    *ListContractsContractsResponse200ApplicationJSONResponseBodyCreditType `json:"credit_type,omitempty"`
	ScheduleItems []ListContractsContractsResponse200ScheduleItems                        `json:"schedule_items,omitempty"`
}

func (o *ListContractsSchedule) GetCreditType() *ListContractsContractsResponse200ApplicationJSONResponseBodyCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *ListContractsSchedule) GetScheduleItems() []ListContractsContractsResponse200ScheduleItems {
	if o == nil {
		return nil
	}
	return o.ScheduleItems
}

type ListContractsDiscounts struct {
	ID       string                                   `json:"id"`
	Product  ListContractsContractsResponse200Product `json:"product"`
	Schedule ListContractsSchedule                    `json:"schedule"`
	Name     *string                                  `json:"name,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
}

func (o *ListContractsDiscounts) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsDiscounts) GetProduct() ListContractsContractsResponse200Product {
	if o == nil {
		return ListContractsContractsResponse200Product{}
	}
	return o.Product
}

func (o *ListContractsDiscounts) GetSchedule() ListContractsSchedule {
	if o == nil {
		return ListContractsSchedule{}
	}
	return o.Schedule
}

func (o *ListContractsDiscounts) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListContractsDiscounts) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

type ListContractsProfessionalServices struct {
	ID          string  `json:"id"`
	Description *string `json:"description,omitempty"`
	ProductID   string  `json:"product_id"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// Unit price for the charge. Will be multiplied by quantity to determine the amount and must be specified.
	UnitPrice float64 `json:"unit_price"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the amount.
	Quantity float64 `json:"quantity"`
	// Maximum amount for the term.
	MaxAmount    float64           `json:"max_amount"`
	CustomFields map[string]string `json:"custom_fields,omitempty"`
}

func (o *ListContractsProfessionalServices) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsProfessionalServices) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListContractsProfessionalServices) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *ListContractsProfessionalServices) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *ListContractsProfessionalServices) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *ListContractsProfessionalServices) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *ListContractsProfessionalServices) GetMaxAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.MaxAmount
}

func (o *ListContractsProfessionalServices) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type ListContractsContractsResponse200ApplicationJSONProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *ListContractsContractsResponse200ApplicationJSONProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ApplicationJSONProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsResponse200ApplicationJSONScheduleItems struct {
	ID        string    `json:"id"`
	InvoiceID string    `json:"invoice_id"`
	Amount    float64   `json:"amount"`
	UnitPrice float64   `json:"unit_price"`
	Quantity  float64   `json:"quantity"`
	Timestamp time.Time `json:"timestamp"`
}

func (l ListContractsContractsResponse200ApplicationJSONScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsResponse200ApplicationJSONScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsResponse200ApplicationJSONScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ApplicationJSONScheduleItems) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *ListContractsContractsResponse200ApplicationJSONScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsContractsResponse200ApplicationJSONScheduleItems) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *ListContractsContractsResponse200ApplicationJSONScheduleItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *ListContractsContractsResponse200ApplicationJSONScheduleItems) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

type ListContractsContractsSchedule struct {
	CreditType    *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCreditType `json:"credit_type,omitempty"`
	ScheduleItems []ListContractsContractsResponse200ApplicationJSONScheduleItems             `json:"schedule_items,omitempty"`
}

func (o *ListContractsContractsSchedule) GetCreditType() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *ListContractsContractsSchedule) GetScheduleItems() []ListContractsContractsResponse200ApplicationJSONScheduleItems {
	if o == nil {
		return nil
	}
	return o.ScheduleItems
}

type ListContractsScheduledCharges struct {
	ID       string                                                  `json:"id"`
	Product  ListContractsContractsResponse200ApplicationJSONProduct `json:"product"`
	Schedule ListContractsContractsSchedule                          `json:"schedule"`
	// displayed on invoices
	Name *string `json:"name,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string           `json:"netsuite_sales_order_id,omitempty"`
	CustomFields         map[string]string `json:"custom_fields,omitempty"`
}

func (o *ListContractsScheduledCharges) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsScheduledCharges) GetProduct() ListContractsContractsResponse200ApplicationJSONProduct {
	if o == nil {
		return ListContractsContractsResponse200ApplicationJSONProduct{}
	}
	return o.Product
}

func (o *ListContractsScheduledCharges) GetSchedule() ListContractsContractsSchedule {
	if o == nil {
		return ListContractsContractsSchedule{}
	}
	return o.Schedule
}

func (o *ListContractsScheduledCharges) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListContractsScheduledCharges) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *ListContractsScheduledCharges) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type ListContractsContractsResponse200Type string

const (
	ListContractsContractsResponse200TypeSupersede ListContractsContractsResponse200Type = "SUPERSEDE"
	ListContractsContractsResponse200TypeRenewal   ListContractsContractsResponse200Type = "RENEWAL"
)

func (e ListContractsContractsResponse200Type) ToPointer() *ListContractsContractsResponse200Type {
	return &e
}
func (e *ListContractsContractsResponse200Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SUPERSEDE":
		fallthrough
	case "RENEWAL":
		*e = ListContractsContractsResponse200Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsContractsResponse200Type: %v", v)
	}
}

type ListContractsTransitions struct {
	Type           ListContractsContractsResponse200Type `json:"type"`
	FromContractID string                                `json:"from_contract_id"`
	ToContractID   string                                `json:"to_contract_id"`
}

func (o *ListContractsTransitions) GetType() ListContractsContractsResponse200Type {
	if o == nil {
		return ListContractsContractsResponse200Type("")
	}
	return o.Type
}

func (o *ListContractsTransitions) GetFromContractID() string {
	if o == nil {
		return ""
	}
	return o.FromContractID
}

func (o *ListContractsTransitions) GetToContractID() string {
	if o == nil {
		return ""
	}
	return o.ToContractID
}

type ListContractsResellerType string

const (
	ListContractsResellerTypeAws           ListContractsResellerType = "AWS"
	ListContractsResellerTypeAwsProService ListContractsResellerType = "AWS_PRO_SERVICE"
	ListContractsResellerTypeGcp           ListContractsResellerType = "GCP"
	ListContractsResellerTypeGcpProService ListContractsResellerType = "GCP_PRO_SERVICE"
)

func (e ListContractsResellerType) ToPointer() *ListContractsResellerType {
	return &e
}
func (e *ListContractsResellerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWS":
		fallthrough
	case "AWS_PRO_SERVICE":
		fallthrough
	case "GCP":
		fallthrough
	case "GCP_PRO_SERVICE":
		*e = ListContractsResellerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsResellerType: %v", v)
	}
}

type ListContractsResellerRoyalties struct {
	ResellerType          ListContractsResellerType `json:"reseller_type"`
	Fraction              float64                   `json:"fraction"`
	ApplicableProductTags []string                  `json:"applicable_product_tags,omitempty"`
	ApplicableProductIds  []string                  `json:"applicable_product_ids,omitempty"`
	NetsuiteResellerID    string                    `json:"netsuite_reseller_id"`
	StartingAt            time.Time                 `json:"starting_at"`
	EndingBefore          *time.Time                `json:"ending_before,omitempty"`
	ResellerContractValue *float64                  `json:"reseller_contract_value,omitempty"`
	AwsAccountNumber      *string                   `json:"aws_account_number,omitempty"`
	AwsPayerReferenceID   *string                   `json:"aws_payer_reference_id,omitempty"`
	AwsOfferID            *string                   `json:"aws_offer_id,omitempty"`
	GcpAccountID          *string                   `json:"gcp_account_id,omitempty"`
	GcpOfferID            *string                   `json:"gcp_offer_id,omitempty"`
}

func (l ListContractsResellerRoyalties) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsResellerRoyalties) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsResellerRoyalties) GetResellerType() ListContractsResellerType {
	if o == nil {
		return ListContractsResellerType("")
	}
	return o.ResellerType
}

func (o *ListContractsResellerRoyalties) GetFraction() float64 {
	if o == nil {
		return 0.0
	}
	return o.Fraction
}

func (o *ListContractsResellerRoyalties) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *ListContractsResellerRoyalties) GetApplicableProductIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductIds
}

func (o *ListContractsResellerRoyalties) GetNetsuiteResellerID() string {
	if o == nil {
		return ""
	}
	return o.NetsuiteResellerID
}

func (o *ListContractsResellerRoyalties) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *ListContractsResellerRoyalties) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *ListContractsResellerRoyalties) GetResellerContractValue() *float64 {
	if o == nil {
		return nil
	}
	return o.ResellerContractValue
}

func (o *ListContractsResellerRoyalties) GetAwsAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.AwsAccountNumber
}

func (o *ListContractsResellerRoyalties) GetAwsPayerReferenceID() *string {
	if o == nil {
		return nil
	}
	return o.AwsPayerReferenceID
}

func (o *ListContractsResellerRoyalties) GetAwsOfferID() *string {
	if o == nil {
		return nil
	}
	return o.AwsOfferID
}

func (o *ListContractsResellerRoyalties) GetGcpAccountID() *string {
	if o == nil {
		return nil
	}
	return o.GcpAccountID
}

func (o *ListContractsResellerRoyalties) GetGcpOfferID() *string {
	if o == nil {
		return nil
	}
	return o.GcpOfferID
}

type ListContractsContractsInitial struct {
	GroupKey    string     `json:"group_key"`
	GroupValues []string   `json:"group_values"`
	StartingAt  *time.Time `json:"starting_at,omitempty"`
}

func (l ListContractsContractsInitial) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsInitial) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsInitial) GetGroupKey() string {
	if o == nil {
		return ""
	}
	return o.GroupKey
}

func (o *ListContractsContractsInitial) GetGroupValues() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupValues
}

func (o *ListContractsContractsInitial) GetStartingAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartingAt
}

type ListContractsContractsResponseCurrent struct {
	GroupKey    string     `json:"group_key"`
	GroupValues []string   `json:"group_values"`
	StartingAt  *time.Time `json:"starting_at,omitempty"`
}

func (l ListContractsContractsResponseCurrent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsResponseCurrent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsResponseCurrent) GetGroupKey() string {
	if o == nil {
		return ""
	}
	return o.GroupKey
}

func (o *ListContractsContractsResponseCurrent) GetGroupValues() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupValues
}

func (o *ListContractsContractsResponseCurrent) GetStartingAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartingAt
}

type ListContractsUpdates struct {
	GroupKey    string    `json:"group_key"`
	GroupValues []string  `json:"group_values"`
	StartingAt  time.Time `json:"starting_at"`
}

func (l ListContractsUpdates) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsUpdates) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsUpdates) GetGroupKey() string {
	if o == nil {
		return ""
	}
	return o.GroupKey
}

func (o *ListContractsUpdates) GetGroupValues() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupValues
}

func (o *ListContractsUpdates) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

type ListContractsUsageFilter struct {
	Initial ListContractsContractsInitial          `json:"initial"`
	Current *ListContractsContractsResponseCurrent `json:"current"`
	Updates []ListContractsUpdates                 `json:"updates"`
}

func (o *ListContractsUsageFilter) GetInitial() ListContractsContractsInitial {
	if o == nil {
		return ListContractsContractsInitial{}
	}
	return o.Initial
}

func (o *ListContractsUsageFilter) GetCurrent() *ListContractsContractsResponseCurrent {
	if o == nil {
		return nil
	}
	return o.Current
}

func (o *ListContractsUsageFilter) GetUpdates() []ListContractsUpdates {
	if o == nil {
		return []ListContractsUpdates{}
	}
	return o.Updates
}

type ListContractsFrequency string

const (
	ListContractsFrequencyMonthlyUpper   ListContractsFrequency = "MONTHLY"
	ListContractsFrequencyMonthlyLower   ListContractsFrequency = "monthly"
	ListContractsFrequencyQuarterlyUpper ListContractsFrequency = "QUARTERLY"
	ListContractsFrequencyQuarterlyLower ListContractsFrequency = "quarterly"
)

func (e ListContractsFrequency) ToPointer() *ListContractsFrequency {
	return &e
}
func (e *ListContractsFrequency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MONTHLY":
		fallthrough
	case "monthly":
		fallthrough
	case "QUARTERLY":
		fallthrough
	case "quarterly":
		*e = ListContractsFrequency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsFrequency: %v", v)
	}
}

type ListContractsUsageStatementSchedule struct {
	Frequency ListContractsFrequency `json:"frequency"`
}

func (o *ListContractsUsageStatementSchedule) GetFrequency() ListContractsFrequency {
	if o == nil {
		return ListContractsFrequency("")
	}
	return o.Frequency
}

type ListContractsInitial struct {
	Name *string `json:"name,omitempty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string                  `json:"salesforce_opportunity_id,omitempty"`
	RateCardID              *string                  `json:"rate_card_id,omitempty"`
	StartingAt              time.Time                `json:"starting_at"`
	Commits                 []ListContractsCommits   `json:"commits"`
	Credits                 []ListContractsCredits   `json:"credits,omitempty"`
	Overrides               []ListContractsOverrides `json:"overrides"`
	// This field's availability is dependent on your client's configuration.
	Discounts []ListContractsDiscounts `json:"discounts,omitempty"`
	// This field's availability is dependent on your client's configuration.
	ProfessionalServices []ListContractsProfessionalServices `json:"professional_services,omitempty"`
	ScheduledCharges     []ListContractsScheduledCharges     `json:"scheduled_charges"`
	Transitions          []ListContractsTransitions          `json:"transitions"`
	// This field's availability is dependent on your client's configuration.
	ResellerRoyalties []ListContractsResellerRoyalties `json:"reseller_royalties,omitempty"`
	CreatedAt         time.Time                        `json:"created_at"`
	CreatedBy         string                           `json:"created_by"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string    `json:"netsuite_sales_order_id,omitempty"`
	NetPaymentTermsDays  *float64   `json:"net_payment_terms_days,omitempty"`
	EndingBefore         *time.Time `json:"ending_before,omitempty"`
	// This field's availability is dependent on your client's configuration.
	TotalContractValue     *float64                            `json:"total_contract_value,omitempty"`
	UsageFilter            *ListContractsUsageFilter           `json:"usage_filter,omitempty"`
	UsageStatementSchedule ListContractsUsageStatementSchedule `json:"usage_statement_schedule"`
}

func (l ListContractsInitial) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsInitial) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsInitial) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListContractsInitial) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *ListContractsInitial) GetRateCardID() *string {
	if o == nil {
		return nil
	}
	return o.RateCardID
}

func (o *ListContractsInitial) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *ListContractsInitial) GetCommits() []ListContractsCommits {
	if o == nil {
		return []ListContractsCommits{}
	}
	return o.Commits
}

func (o *ListContractsInitial) GetCredits() []ListContractsCredits {
	if o == nil {
		return nil
	}
	return o.Credits
}

func (o *ListContractsInitial) GetOverrides() []ListContractsOverrides {
	if o == nil {
		return []ListContractsOverrides{}
	}
	return o.Overrides
}

func (o *ListContractsInitial) GetDiscounts() []ListContractsDiscounts {
	if o == nil {
		return nil
	}
	return o.Discounts
}

func (o *ListContractsInitial) GetProfessionalServices() []ListContractsProfessionalServices {
	if o == nil {
		return nil
	}
	return o.ProfessionalServices
}

func (o *ListContractsInitial) GetScheduledCharges() []ListContractsScheduledCharges {
	if o == nil {
		return []ListContractsScheduledCharges{}
	}
	return o.ScheduledCharges
}

func (o *ListContractsInitial) GetTransitions() []ListContractsTransitions {
	if o == nil {
		return []ListContractsTransitions{}
	}
	return o.Transitions
}

func (o *ListContractsInitial) GetResellerRoyalties() []ListContractsResellerRoyalties {
	if o == nil {
		return nil
	}
	return o.ResellerRoyalties
}

func (o *ListContractsInitial) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ListContractsInitial) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *ListContractsInitial) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *ListContractsInitial) GetNetPaymentTermsDays() *float64 {
	if o == nil {
		return nil
	}
	return o.NetPaymentTermsDays
}

func (o *ListContractsInitial) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *ListContractsInitial) GetTotalContractValue() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalContractValue
}

func (o *ListContractsInitial) GetUsageFilter() *ListContractsUsageFilter {
	if o == nil {
		return nil
	}
	return o.UsageFilter
}

func (o *ListContractsInitial) GetUsageStatementSchedule() ListContractsUsageStatementSchedule {
	if o == nil {
		return ListContractsUsageStatementSchedule{}
	}
	return o.UsageStatementSchedule
}

type ListContractsContractsResponseContract struct {
	ID string `json:"id"`
}

func (o *ListContractsContractsResponseContract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsResponse200ApplicationJSONType string

const (
	ListContractsContractsResponse200ApplicationJSONTypePrepaid  ListContractsContractsResponse200ApplicationJSONType = "PREPAID"
	ListContractsContractsResponse200ApplicationJSONTypePostpaid ListContractsContractsResponse200ApplicationJSONType = "POSTPAID"
)

func (e ListContractsContractsResponse200ApplicationJSONType) ToPointer() *ListContractsContractsResponse200ApplicationJSONType {
	return &e
}
func (e *ListContractsContractsResponse200ApplicationJSONType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID":
		fallthrough
	case "POSTPAID":
		*e = ListContractsContractsResponse200ApplicationJSONType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsContractsResponse200ApplicationJSONType: %v", v)
	}
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyScheduleItems struct {
	ID           string    `json:"id"`
	Amount       float64   `json:"amount"`
	StartingAt   time.Time `json:"starting_at"`
	EndingBefore time.Time `json:"ending_before"`
}

func (l ListContractsContractsResponse200ApplicationJSONResponseBodyScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsResponse200ApplicationJSONResponseBodyScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyScheduleItems) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyScheduleItems) GetEndingBefore() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndingBefore
}

// ListContractsContractsResponseAccessSchedule - The schedule that the customer will gain access to the credits purposed with this commit.
type ListContractsContractsResponseAccessSchedule struct {
	CreditType    *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditType `json:"credit_type,omitempty"`
	ScheduleItems []ListContractsContractsResponse200ApplicationJSONResponseBodyScheduleItems        `json:"schedule_items"`
}

func (o *ListContractsContractsResponseAccessSchedule) GetCreditType() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *ListContractsContractsResponseAccessSchedule) GetScheduleItems() []ListContractsContractsResponse200ApplicationJSONResponseBodyScheduleItems {
	if o == nil {
		return []ListContractsContractsResponse200ApplicationJSONResponseBodyScheduleItems{}
	}
	return o.ScheduleItems
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataScheduleItems struct {
	ID        string    `json:"id"`
	InvoiceID string    `json:"invoice_id"`
	Amount    float64   `json:"amount"`
	UnitPrice float64   `json:"unit_price"`
	Quantity  float64   `json:"quantity"`
	Timestamp time.Time `json:"timestamp"`
}

func (l ListContractsContractsResponse200ApplicationJSONResponseBodyDataScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsResponse200ApplicationJSONResponseBodyDataScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataScheduleItems) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataScheduleItems) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataScheduleItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataScheduleItems) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

// ListContractsContractsInvoiceSchedule - The schedule that the customer will be invoiced for this commit.
type ListContractsContractsInvoiceSchedule struct {
	CreditType    *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsCreditType `json:"credit_type,omitempty"`
	ScheduleItems []ListContractsContractsResponse200ApplicationJSONResponseBodyDataScheduleItems           `json:"schedule_items,omitempty"`
}

func (o *ListContractsContractsInvoiceSchedule) GetCreditType() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *ListContractsContractsInvoiceSchedule) GetScheduleItems() []ListContractsContractsResponse200ApplicationJSONResponseBodyDataScheduleItems {
	if o == nil {
		return nil
	}
	return o.ScheduleItems
}

// ListContractsContractsInvoiceContract - The contract that this commit will be billed on.
type ListContractsContractsInvoiceContract struct {
	ID string `json:"id"`
}

func (o *ListContractsContractsInvoiceContract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsRolledOverFrom struct {
	CommitID   string `json:"commit_id"`
	ContractID string `json:"contract_id"`
}

func (o *ListContractsContractsRolledOverFrom) GetCommitID() string {
	if o == nil {
		return ""
	}
	return o.CommitID
}

func (o *ListContractsContractsRolledOverFrom) GetContractID() string {
	if o == nil {
		return ""
	}
	return o.ContractID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits13Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits13TypePostpaidCommitExpiration ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits13Type = "POSTPAID_COMMIT_EXPIRATION"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits13Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits13Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits13Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_EXPIRATION":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits13Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits13Type: %v", v)
	}
}

type ListContractsLedgerContracts13 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits13Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
}

func (l ListContractsLedgerContracts13) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContracts13) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContracts13) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits13Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits13Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContracts13) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContracts13) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits12Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits12TypePostpaidCommitManual ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits12Type = "POSTPAID_COMMIT_MANUAL"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits12Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits12Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_MANUAL":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits12Type: %v", v)
	}
}

type ListContractsLedgerContracts12 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits12Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
	Reason    string                                                                                     `json:"reason"`
}

func (l ListContractsLedgerContracts12) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContracts12) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContracts12) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits12Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits12Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContracts12) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContracts12) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContracts12) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits11Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits11TypePrepaidCommitManual ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits11Type = "PREPAID_COMMIT_MANUAL"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits11Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits11Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_MANUAL":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits11Type: %v", v)
	}
}

type ListContractsLedgerContracts11 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits11Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
	Reason    string                                                                                     `json:"reason"`
}

func (l ListContractsLedgerContracts11) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContracts11) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContracts11) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits11Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits11Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContracts11) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContracts11) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContracts11) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits10Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits10TypePostpaidCommitTrueup ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits10Type = "POSTPAID_COMMIT_TRUEUP"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits10Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits10Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_TRUEUP":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits10Type: %v", v)
	}
}

type ListContractsLedgerContracts10 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits10Type `json:"type"`
	Timestamp time.Time                                                                                  `json:"timestamp"`
	Amount    float64                                                                                    `json:"amount"`
	InvoiceID string                                                                                     `json:"invoice_id"`
}

func (l ListContractsLedgerContracts10) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContracts10) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContracts10) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits10Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits10Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContracts10) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContracts10) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContracts10) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits9Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits9TypePostpaidCommitRollover ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits9Type = "POSTPAID_COMMIT_ROLLOVER"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits9Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits9Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_ROLLOVER":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits9Type: %v", v)
	}
}

type ListContractsLedgerContracts9 struct {
	Type          ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits9Type `json:"type"`
	Timestamp     time.Time                                                                                 `json:"timestamp"`
	Amount        float64                                                                                   `json:"amount"`
	SegmentID     string                                                                                    `json:"segment_id"`
	NewContractID string                                                                                    `json:"new_contract_id"`
}

func (l ListContractsLedgerContracts9) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContracts9) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContracts9) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits9Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits9Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContracts9) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContracts9) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContracts9) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedgerContracts9) GetNewContractID() string {
	if o == nil {
		return ""
	}
	return o.NewContractID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits8Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits8TypePostpaidCommitAutomatedInvoiceDeduction ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits8Type = "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits8Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits8Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits8Type: %v", v)
	}
}

type ListContractsLedgerContracts8 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits8Type `json:"type"`
	Timestamp time.Time                                                                                 `json:"timestamp"`
	Amount    float64                                                                                   `json:"amount"`
	SegmentID string                                                                                    `json:"segment_id"`
	InvoiceID string                                                                                    `json:"invoice_id"`
}

func (l ListContractsLedgerContracts8) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContracts8) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContracts8) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits8Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits8Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContracts8) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContracts8) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContracts8) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedgerContracts8) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits7Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits7TypePostpaidCommitInitialBalance ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits7Type = "POSTPAID_COMMIT_INITIAL_BALANCE"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits7Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits7Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_INITIAL_BALANCE":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits7Type: %v", v)
	}
}

type ListContractsLedgerContracts7 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits7Type `json:"type"`
	Timestamp time.Time                                                                                 `json:"timestamp"`
	Amount    float64                                                                                   `json:"amount"`
}

func (l ListContractsLedgerContracts7) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContracts7) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContracts7) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits7Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits7Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContracts7) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContracts7) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits6Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits6TypePrepaidCommitCredited ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits6Type = "PREPAID_COMMIT_CREDITED"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits6Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits6Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_CREDITED":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits6Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse6 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits6Type `json:"type"`
	Timestamp time.Time                                                                                 `json:"timestamp"`
	Amount    float64                                                                                   `json:"amount"`
	SegmentID string                                                                                    `json:"segment_id"`
	InvoiceID string                                                                                    `json:"invoice_id"`
}

func (l ListContractsLedgerContractsResponse6) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse6) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse6) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits6Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits6Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse6) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse6) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse6) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedgerContractsResponse6) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits5Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits5TypePrepaidCommitCanceled ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits5Type = "PREPAID_COMMIT_CANCELED"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits5Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits5Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_CANCELED":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits5Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse5 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits5Type `json:"type"`
	Timestamp time.Time                                                                                 `json:"timestamp"`
	Amount    float64                                                                                   `json:"amount"`
	SegmentID string                                                                                    `json:"segment_id"`
	InvoiceID string                                                                                    `json:"invoice_id"`
}

func (l ListContractsLedgerContractsResponse5) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse5) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse5) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits5Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits5Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse5) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse5) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse5) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedgerContractsResponse5) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits4Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits4TypePrepaidCommitExpiration ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits4Type = "PREPAID_COMMIT_EXPIRATION"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits4Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits4Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_EXPIRATION":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits4Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse4 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits4Type `json:"type"`
	Timestamp time.Time                                                                                 `json:"timestamp"`
	Amount    float64                                                                                   `json:"amount"`
	SegmentID string                                                                                    `json:"segment_id"`
}

func (l ListContractsLedgerContractsResponse4) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse4) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse4) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits4Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits4Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse4) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse4) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse4) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits3Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits3TypePrepaidCommitRollover ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits3Type = "PREPAID_COMMIT_ROLLOVER"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits3Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits3Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_ROLLOVER":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits3Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse3 struct {
	Type          ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits3Type `json:"type"`
	Timestamp     time.Time                                                                                 `json:"timestamp"`
	Amount        float64                                                                                   `json:"amount"`
	SegmentID     string                                                                                    `json:"segment_id"`
	NewContractID string                                                                                    `json:"new_contract_id"`
}

func (l ListContractsLedgerContractsResponse3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse3) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits3Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommits3Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse3) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse3) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse3) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedgerContractsResponse3) GetNewContractID() string {
	if o == nil {
		return ""
	}
	return o.NewContractID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsType string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsTypePrepaidCommitAutomatedInvoiceDeduction ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsType = "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsType) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsType {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsType: %v", v)
	}
}

type ListContractsLedgerContractsResponse2 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsType `json:"type"`
	Timestamp time.Time                                                                                `json:"timestamp"`
	Amount    float64                                                                                  `json:"amount"`
	SegmentID string                                                                                   `json:"segment_id"`
	InvoiceID string                                                                                   `json:"invoice_id"`
}

func (l ListContractsLedgerContractsResponse2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse2) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsType {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCommitsType("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse2) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse2) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse2) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedgerContractsResponse2) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentType string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentTypePrepaidCommitSegmentStart ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentType = "PREPAID_COMMIT_SEGMENT_START"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentType) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentType {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_SEGMENT_START":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentType: %v", v)
	}
}

type ListContractsLedgerContractsResponse1 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentType `json:"type"`
	Timestamp time.Time                                                                         `json:"timestamp"`
	Amount    float64                                                                           `json:"amount"`
	SegmentID string                                                                            `json:"segment_id"`
}

func (l ListContractsLedgerContractsResponse1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse1) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentType {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentType("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse1) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse1) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse1) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type ListContractsContractsResponseLedgerType string

const (
	ListContractsContractsResponseLedgerTypeListContractsLedgerContractsResponse1 ListContractsContractsResponseLedgerType = "listContracts_ledger_contracts_response_1"
	ListContractsContractsResponseLedgerTypeListContractsLedgerContractsResponse2 ListContractsContractsResponseLedgerType = "listContracts_ledger_contracts_response_2"
	ListContractsContractsResponseLedgerTypeListContractsLedgerContractsResponse3 ListContractsContractsResponseLedgerType = "listContracts_ledger_contracts_response_3"
	ListContractsContractsResponseLedgerTypeListContractsLedgerContractsResponse4 ListContractsContractsResponseLedgerType = "listContracts_ledger_contracts_response_4"
	ListContractsContractsResponseLedgerTypeListContractsLedgerContractsResponse5 ListContractsContractsResponseLedgerType = "listContracts_ledger_contracts_response_5"
	ListContractsContractsResponseLedgerTypeListContractsLedgerContractsResponse6 ListContractsContractsResponseLedgerType = "listContracts_ledger_contracts_response_6"
	ListContractsContractsResponseLedgerTypeListContractsLedgerContracts7         ListContractsContractsResponseLedgerType = "listContracts_ledger_contracts_7"
	ListContractsContractsResponseLedgerTypeListContractsLedgerContracts8         ListContractsContractsResponseLedgerType = "listContracts_ledger_contracts_8"
	ListContractsContractsResponseLedgerTypeListContractsLedgerContracts9         ListContractsContractsResponseLedgerType = "listContracts_ledger_contracts_9"
	ListContractsContractsResponseLedgerTypeListContractsLedgerContracts10        ListContractsContractsResponseLedgerType = "listContracts_ledger_contracts_10"
	ListContractsContractsResponseLedgerTypeListContractsLedgerContracts11        ListContractsContractsResponseLedgerType = "listContracts_ledger_contracts_11"
	ListContractsContractsResponseLedgerTypeListContractsLedgerContracts12        ListContractsContractsResponseLedgerType = "listContracts_ledger_contracts_12"
	ListContractsContractsResponseLedgerTypeListContractsLedgerContracts13        ListContractsContractsResponseLedgerType = "listContracts_ledger_contracts_13"
)

type ListContractsContractsResponseLedger struct {
	ListContractsLedgerContractsResponse1 *ListContractsLedgerContractsResponse1
	ListContractsLedgerContractsResponse2 *ListContractsLedgerContractsResponse2
	ListContractsLedgerContractsResponse3 *ListContractsLedgerContractsResponse3
	ListContractsLedgerContractsResponse4 *ListContractsLedgerContractsResponse4
	ListContractsLedgerContractsResponse5 *ListContractsLedgerContractsResponse5
	ListContractsLedgerContractsResponse6 *ListContractsLedgerContractsResponse6
	ListContractsLedgerContracts7         *ListContractsLedgerContracts7
	ListContractsLedgerContracts8         *ListContractsLedgerContracts8
	ListContractsLedgerContracts9         *ListContractsLedgerContracts9
	ListContractsLedgerContracts10        *ListContractsLedgerContracts10
	ListContractsLedgerContracts11        *ListContractsLedgerContracts11
	ListContractsLedgerContracts12        *ListContractsLedgerContracts12
	ListContractsLedgerContracts13        *ListContractsLedgerContracts13

	Type ListContractsContractsResponseLedgerType
}

func CreateListContractsContractsResponseLedgerListContractsLedgerContractsResponse1(listContractsLedgerContractsResponse1 ListContractsLedgerContractsResponse1) ListContractsContractsResponseLedger {
	typ := ListContractsContractsResponseLedgerTypeListContractsLedgerContractsResponse1

	return ListContractsContractsResponseLedger{
		ListContractsLedgerContractsResponse1: &listContractsLedgerContractsResponse1,
		Type:                                  typ,
	}
}

func CreateListContractsContractsResponseLedgerListContractsLedgerContractsResponse2(listContractsLedgerContractsResponse2 ListContractsLedgerContractsResponse2) ListContractsContractsResponseLedger {
	typ := ListContractsContractsResponseLedgerTypeListContractsLedgerContractsResponse2

	return ListContractsContractsResponseLedger{
		ListContractsLedgerContractsResponse2: &listContractsLedgerContractsResponse2,
		Type:                                  typ,
	}
}

func CreateListContractsContractsResponseLedgerListContractsLedgerContractsResponse3(listContractsLedgerContractsResponse3 ListContractsLedgerContractsResponse3) ListContractsContractsResponseLedger {
	typ := ListContractsContractsResponseLedgerTypeListContractsLedgerContractsResponse3

	return ListContractsContractsResponseLedger{
		ListContractsLedgerContractsResponse3: &listContractsLedgerContractsResponse3,
		Type:                                  typ,
	}
}

func CreateListContractsContractsResponseLedgerListContractsLedgerContractsResponse4(listContractsLedgerContractsResponse4 ListContractsLedgerContractsResponse4) ListContractsContractsResponseLedger {
	typ := ListContractsContractsResponseLedgerTypeListContractsLedgerContractsResponse4

	return ListContractsContractsResponseLedger{
		ListContractsLedgerContractsResponse4: &listContractsLedgerContractsResponse4,
		Type:                                  typ,
	}
}

func CreateListContractsContractsResponseLedgerListContractsLedgerContractsResponse5(listContractsLedgerContractsResponse5 ListContractsLedgerContractsResponse5) ListContractsContractsResponseLedger {
	typ := ListContractsContractsResponseLedgerTypeListContractsLedgerContractsResponse5

	return ListContractsContractsResponseLedger{
		ListContractsLedgerContractsResponse5: &listContractsLedgerContractsResponse5,
		Type:                                  typ,
	}
}

func CreateListContractsContractsResponseLedgerListContractsLedgerContractsResponse6(listContractsLedgerContractsResponse6 ListContractsLedgerContractsResponse6) ListContractsContractsResponseLedger {
	typ := ListContractsContractsResponseLedgerTypeListContractsLedgerContractsResponse6

	return ListContractsContractsResponseLedger{
		ListContractsLedgerContractsResponse6: &listContractsLedgerContractsResponse6,
		Type:                                  typ,
	}
}

func CreateListContractsContractsResponseLedgerListContractsLedgerContracts7(listContractsLedgerContracts7 ListContractsLedgerContracts7) ListContractsContractsResponseLedger {
	typ := ListContractsContractsResponseLedgerTypeListContractsLedgerContracts7

	return ListContractsContractsResponseLedger{
		ListContractsLedgerContracts7: &listContractsLedgerContracts7,
		Type:                          typ,
	}
}

func CreateListContractsContractsResponseLedgerListContractsLedgerContracts8(listContractsLedgerContracts8 ListContractsLedgerContracts8) ListContractsContractsResponseLedger {
	typ := ListContractsContractsResponseLedgerTypeListContractsLedgerContracts8

	return ListContractsContractsResponseLedger{
		ListContractsLedgerContracts8: &listContractsLedgerContracts8,
		Type:                          typ,
	}
}

func CreateListContractsContractsResponseLedgerListContractsLedgerContracts9(listContractsLedgerContracts9 ListContractsLedgerContracts9) ListContractsContractsResponseLedger {
	typ := ListContractsContractsResponseLedgerTypeListContractsLedgerContracts9

	return ListContractsContractsResponseLedger{
		ListContractsLedgerContracts9: &listContractsLedgerContracts9,
		Type:                          typ,
	}
}

func CreateListContractsContractsResponseLedgerListContractsLedgerContracts10(listContractsLedgerContracts10 ListContractsLedgerContracts10) ListContractsContractsResponseLedger {
	typ := ListContractsContractsResponseLedgerTypeListContractsLedgerContracts10

	return ListContractsContractsResponseLedger{
		ListContractsLedgerContracts10: &listContractsLedgerContracts10,
		Type:                           typ,
	}
}

func CreateListContractsContractsResponseLedgerListContractsLedgerContracts11(listContractsLedgerContracts11 ListContractsLedgerContracts11) ListContractsContractsResponseLedger {
	typ := ListContractsContractsResponseLedgerTypeListContractsLedgerContracts11

	return ListContractsContractsResponseLedger{
		ListContractsLedgerContracts11: &listContractsLedgerContracts11,
		Type:                           typ,
	}
}

func CreateListContractsContractsResponseLedgerListContractsLedgerContracts12(listContractsLedgerContracts12 ListContractsLedgerContracts12) ListContractsContractsResponseLedger {
	typ := ListContractsContractsResponseLedgerTypeListContractsLedgerContracts12

	return ListContractsContractsResponseLedger{
		ListContractsLedgerContracts12: &listContractsLedgerContracts12,
		Type:                           typ,
	}
}

func CreateListContractsContractsResponseLedgerListContractsLedgerContracts13(listContractsLedgerContracts13 ListContractsLedgerContracts13) ListContractsContractsResponseLedger {
	typ := ListContractsContractsResponseLedgerTypeListContractsLedgerContracts13

	return ListContractsContractsResponseLedger{
		ListContractsLedgerContracts13: &listContractsLedgerContracts13,
		Type:                           typ,
	}
}

func (u *ListContractsContractsResponseLedger) UnmarshalJSON(data []byte) error {

	var listContractsLedgerContracts7 ListContractsLedgerContracts7 = ListContractsLedgerContracts7{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContracts7, "", true, true); err == nil {
		u.ListContractsLedgerContracts7 = &listContractsLedgerContracts7
		u.Type = ListContractsContractsResponseLedgerTypeListContractsLedgerContracts7
		return nil
	}

	var listContractsLedgerContracts13 ListContractsLedgerContracts13 = ListContractsLedgerContracts13{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContracts13, "", true, true); err == nil {
		u.ListContractsLedgerContracts13 = &listContractsLedgerContracts13
		u.Type = ListContractsContractsResponseLedgerTypeListContractsLedgerContracts13
		return nil
	}

	var listContractsLedgerContractsResponse4 ListContractsLedgerContractsResponse4 = ListContractsLedgerContractsResponse4{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse4, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse4 = &listContractsLedgerContractsResponse4
		u.Type = ListContractsContractsResponseLedgerTypeListContractsLedgerContractsResponse4
		return nil
	}

	var listContractsLedgerContractsResponse1 ListContractsLedgerContractsResponse1 = ListContractsLedgerContractsResponse1{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse1, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse1 = &listContractsLedgerContractsResponse1
		u.Type = ListContractsContractsResponseLedgerTypeListContractsLedgerContractsResponse1
		return nil
	}

	var listContractsLedgerContracts10 ListContractsLedgerContracts10 = ListContractsLedgerContracts10{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContracts10, "", true, true); err == nil {
		u.ListContractsLedgerContracts10 = &listContractsLedgerContracts10
		u.Type = ListContractsContractsResponseLedgerTypeListContractsLedgerContracts10
		return nil
	}

	var listContractsLedgerContracts11 ListContractsLedgerContracts11 = ListContractsLedgerContracts11{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContracts11, "", true, true); err == nil {
		u.ListContractsLedgerContracts11 = &listContractsLedgerContracts11
		u.Type = ListContractsContractsResponseLedgerTypeListContractsLedgerContracts11
		return nil
	}

	var listContractsLedgerContracts12 ListContractsLedgerContracts12 = ListContractsLedgerContracts12{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContracts12, "", true, true); err == nil {
		u.ListContractsLedgerContracts12 = &listContractsLedgerContracts12
		u.Type = ListContractsContractsResponseLedgerTypeListContractsLedgerContracts12
		return nil
	}

	var listContractsLedgerContractsResponse5 ListContractsLedgerContractsResponse5 = ListContractsLedgerContractsResponse5{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse5, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse5 = &listContractsLedgerContractsResponse5
		u.Type = ListContractsContractsResponseLedgerTypeListContractsLedgerContractsResponse5
		return nil
	}

	var listContractsLedgerContractsResponse6 ListContractsLedgerContractsResponse6 = ListContractsLedgerContractsResponse6{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse6, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse6 = &listContractsLedgerContractsResponse6
		u.Type = ListContractsContractsResponseLedgerTypeListContractsLedgerContractsResponse6
		return nil
	}

	var listContractsLedgerContractsResponse3 ListContractsLedgerContractsResponse3 = ListContractsLedgerContractsResponse3{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse3, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse3 = &listContractsLedgerContractsResponse3
		u.Type = ListContractsContractsResponseLedgerTypeListContractsLedgerContractsResponse3
		return nil
	}

	var listContractsLedgerContracts8 ListContractsLedgerContracts8 = ListContractsLedgerContracts8{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContracts8, "", true, true); err == nil {
		u.ListContractsLedgerContracts8 = &listContractsLedgerContracts8
		u.Type = ListContractsContractsResponseLedgerTypeListContractsLedgerContracts8
		return nil
	}

	var listContractsLedgerContracts9 ListContractsLedgerContracts9 = ListContractsLedgerContracts9{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContracts9, "", true, true); err == nil {
		u.ListContractsLedgerContracts9 = &listContractsLedgerContracts9
		u.Type = ListContractsContractsResponseLedgerTypeListContractsLedgerContracts9
		return nil
	}

	var listContractsLedgerContractsResponse2 ListContractsLedgerContractsResponse2 = ListContractsLedgerContractsResponse2{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse2, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse2 = &listContractsLedgerContractsResponse2
		u.Type = ListContractsContractsResponseLedgerTypeListContractsLedgerContractsResponse2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListContractsContractsResponseLedger", string(data))
}

func (u ListContractsContractsResponseLedger) MarshalJSON() ([]byte, error) {
	if u.ListContractsLedgerContractsResponse1 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse1, "", true)
	}

	if u.ListContractsLedgerContractsResponse2 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse2, "", true)
	}

	if u.ListContractsLedgerContractsResponse3 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse3, "", true)
	}

	if u.ListContractsLedgerContractsResponse4 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse4, "", true)
	}

	if u.ListContractsLedgerContractsResponse5 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse5, "", true)
	}

	if u.ListContractsLedgerContractsResponse6 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse6, "", true)
	}

	if u.ListContractsLedgerContracts7 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContracts7, "", true)
	}

	if u.ListContractsLedgerContracts8 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContracts8, "", true)
	}

	if u.ListContractsLedgerContracts9 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContracts9, "", true)
	}

	if u.ListContractsLedgerContracts10 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContracts10, "", true)
	}

	if u.ListContractsLedgerContracts11 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContracts11, "", true)
	}

	if u.ListContractsLedgerContracts12 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContracts12, "", true)
	}

	if u.ListContractsLedgerContracts13 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContracts13, "", true)
	}

	return nil, errors.New("could not marshal union type ListContractsContractsResponseLedger: all fields are null")
}

type ListContractsContractsCommits struct {
	ID       string                                               `json:"id"`
	Contract *ListContractsContractsResponseContract              `json:"contract,omitempty"`
	Type     ListContractsContractsResponse200ApplicationJSONType `json:"type"`
	Name     *string                                              `json:"name,omitempty"`
	// If multiple credits or commits are applicable, the one with the lower priority will apply first.
	Priority *float64                                                            `json:"priority,omitempty"`
	Product  ListContractsContractsResponse200ApplicationJSONResponseBodyProduct `json:"product"`
	// The schedule that the customer will gain access to the credits purposed with this commit.
	AccessSchedule *ListContractsContractsResponseAccessSchedule `json:"access_schedule,omitempty"`
	// The schedule that the customer will be invoiced for this commit.
	InvoiceSchedule *ListContractsContractsInvoiceSchedule `json:"invoice_schedule,omitempty"`
	// The contract that this commit will be billed on.
	InvoiceContract       *ListContractsContractsInvoiceContract `json:"invoice_contract,omitempty"`
	RolledOverFrom        *ListContractsContractsRolledOverFrom  `json:"rolled_over_from,omitempty"`
	Description           *string                                `json:"description,omitempty"`
	RolloverFraction      *float64                               `json:"rollover_fraction,omitempty"`
	ApplicableProductIds  []string                               `json:"applicable_product_ids,omitempty"`
	ApplicableProductTags []string                               `json:"applicable_product_tags,omitempty"`
	ApplicableContractIds []string                               `json:"applicable_contract_ids,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// (DEPRECATED) Use access_schedule + invoice_schedule instead.
	Amount *float64 `json:"amount,omitempty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string `json:"salesforce_opportunity_id,omitempty"`
	// A list of ordered events that impact the balance of a commit. For example, an invoice deduction or a rollover.
	Ledger       []ListContractsContractsResponseLedger `json:"ledger,omitempty"`
	CustomFields map[string]string                      `json:"custom_fields,omitempty"`
}

func (o *ListContractsContractsCommits) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsCommits) GetContract() *ListContractsContractsResponseContract {
	if o == nil {
		return nil
	}
	return o.Contract
}

func (o *ListContractsContractsCommits) GetType() ListContractsContractsResponse200ApplicationJSONType {
	if o == nil {
		return ListContractsContractsResponse200ApplicationJSONType("")
	}
	return o.Type
}

func (o *ListContractsContractsCommits) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListContractsContractsCommits) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *ListContractsContractsCommits) GetProduct() ListContractsContractsResponse200ApplicationJSONResponseBodyProduct {
	if o == nil {
		return ListContractsContractsResponse200ApplicationJSONResponseBodyProduct{}
	}
	return o.Product
}

func (o *ListContractsContractsCommits) GetAccessSchedule() *ListContractsContractsResponseAccessSchedule {
	if o == nil {
		return nil
	}
	return o.AccessSchedule
}

func (o *ListContractsContractsCommits) GetInvoiceSchedule() *ListContractsContractsInvoiceSchedule {
	if o == nil {
		return nil
	}
	return o.InvoiceSchedule
}

func (o *ListContractsContractsCommits) GetInvoiceContract() *ListContractsContractsInvoiceContract {
	if o == nil {
		return nil
	}
	return o.InvoiceContract
}

func (o *ListContractsContractsCommits) GetRolledOverFrom() *ListContractsContractsRolledOverFrom {
	if o == nil {
		return nil
	}
	return o.RolledOverFrom
}

func (o *ListContractsContractsCommits) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListContractsContractsCommits) GetRolloverFraction() *float64 {
	if o == nil {
		return nil
	}
	return o.RolloverFraction
}

func (o *ListContractsContractsCommits) GetApplicableProductIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductIds
}

func (o *ListContractsContractsCommits) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *ListContractsContractsCommits) GetApplicableContractIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableContractIds
}

func (o *ListContractsContractsCommits) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *ListContractsContractsCommits) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ListContractsContractsCommits) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *ListContractsContractsCommits) GetLedger() []ListContractsContractsResponseLedger {
	if o == nil {
		return nil
	}
	return o.Ledger
}

func (o *ListContractsContractsCommits) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type ListContractsContractsResponse200Contract struct {
	ID string `json:"id"`
}

func (o *ListContractsContractsResponse200Contract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyType string

const (
	ListContractsContractsResponse200ApplicationJSONResponseBodyTypeCredit ListContractsContractsResponse200ApplicationJSONResponseBodyType = "CREDIT"
)

func (e ListContractsContractsResponse200ApplicationJSONResponseBodyType) ToPointer() *ListContractsContractsResponse200ApplicationJSONResponseBodyType {
	return &e
}
func (e *ListContractsContractsResponse200ApplicationJSONResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT":
		*e = ListContractsContractsResponse200ApplicationJSONResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsContractsResponse200ApplicationJSONResponseBodyType: %v", v)
	}
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduleItems struct {
	ID           string    `json:"id"`
	Amount       float64   `json:"amount"`
	StartingAt   time.Time `json:"starting_at"`
	EndingBefore time.Time `json:"ending_before"`
}

func (l ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduleItems) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduleItems) GetEndingBefore() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndingBefore
}

// ListContractsContractsResponse200AccessSchedule - The schedule that the customer will gain access to the credits.
type ListContractsContractsResponse200AccessSchedule struct {
	CreditType    *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsCreditType `json:"credit_type,omitempty"`
	ScheduleItems []ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduleItems    `json:"schedule_items"`
}

func (o *ListContractsContractsResponse200AccessSchedule) GetCreditType() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *ListContractsContractsResponse200AccessSchedule) GetScheduleItems() []ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduleItems {
	if o == nil {
		return []ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduleItems{}
	}
	return o.ScheduleItems
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits6Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits6TypeCreditManual ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits6Type = "CREDIT_MANUAL"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits6Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits6Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_MANUAL":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits6Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse2006 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits6Type `json:"type"`
	Timestamp time.Time                                                                                 `json:"timestamp"`
	Amount    float64                                                                                   `json:"amount"`
	Reason    string                                                                                    `json:"reason"`
}

func (l ListContractsLedgerContractsResponse2006) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse2006) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse2006) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits6Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits6Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse2006) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse2006) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse2006) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits5Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits5TypeCreditCredited ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits5Type = "CREDIT_CREDITED"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits5Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits5Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_CREDITED":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits5Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse2005 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits5Type `json:"type"`
	Timestamp time.Time                                                                                 `json:"timestamp"`
	Amount    float64                                                                                   `json:"amount"`
	SegmentID string                                                                                    `json:"segment_id"`
	InvoiceID string                                                                                    `json:"invoice_id"`
}

func (l ListContractsLedgerContractsResponse2005) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse2005) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse2005) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits5Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits5Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse2005) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse2005) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse2005) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedgerContractsResponse2005) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits4Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits4TypeCreditCanceled ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits4Type = "CREDIT_CANCELED"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits4Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits4Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_CANCELED":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits4Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse2004 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits4Type `json:"type"`
	Timestamp time.Time                                                                                 `json:"timestamp"`
	Amount    float64                                                                                   `json:"amount"`
	SegmentID string                                                                                    `json:"segment_id"`
	InvoiceID string                                                                                    `json:"invoice_id"`
}

func (l ListContractsLedgerContractsResponse2004) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse2004) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse2004) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits4Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits4Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse2004) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse2004) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse2004) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedgerContractsResponse2004) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits3Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits3TypeCreditExpiration ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits3Type = "CREDIT_EXPIRATION"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits3Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits3Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_EXPIRATION":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits3Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse2003 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits3Type `json:"type"`
	Timestamp time.Time                                                                                 `json:"timestamp"`
	Amount    float64                                                                                   `json:"amount"`
	SegmentID string                                                                                    `json:"segment_id"`
}

func (l ListContractsLedgerContractsResponse2003) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse2003) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse2003) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits3Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits3Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse2003) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse2003) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse2003) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits2Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits2TypeCreditAutomatedInvoiceDeduction ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits2Type = "CREDIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits2Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits2Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits2Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse2002 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits2Type `json:"type"`
	Timestamp time.Time                                                                                 `json:"timestamp"`
	Amount    float64                                                                                   `json:"amount"`
	SegmentID string                                                                                    `json:"segment_id"`
	InvoiceID string                                                                                    `json:"invoice_id"`
}

func (l ListContractsLedgerContractsResponse2002) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse2002) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse2002) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits2Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCredits2Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse2002) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse2002) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse2002) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedgerContractsResponse2002) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsType string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsTypeCreditSegmentStart ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsType = "CREDIT_SEGMENT_START"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsType) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsType {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_SEGMENT_START":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsType: %v", v)
	}
}

type ListContractsLedgerContractsResponse2001 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsType `json:"type"`
	Timestamp time.Time                                                                                `json:"timestamp"`
	Amount    float64                                                                                  `json:"amount"`
	SegmentID string                                                                                   `json:"segment_id"`
}

func (l ListContractsLedgerContractsResponse2001) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse2001) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse2001) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsType {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataCurrentCreditsType("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse2001) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse2001) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse2001) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type ListContractsContractsResponse200LedgerType string

const (
	ListContractsContractsResponse200LedgerTypeListContractsLedgerContractsResponse2001 ListContractsContractsResponse200LedgerType = "listContracts_ledger_contracts_response_200_1"
	ListContractsContractsResponse200LedgerTypeListContractsLedgerContractsResponse2002 ListContractsContractsResponse200LedgerType = "listContracts_ledger_contracts_response_200_2"
	ListContractsContractsResponse200LedgerTypeListContractsLedgerContractsResponse2003 ListContractsContractsResponse200LedgerType = "listContracts_ledger_contracts_response_200_3"
	ListContractsContractsResponse200LedgerTypeListContractsLedgerContractsResponse2004 ListContractsContractsResponse200LedgerType = "listContracts_ledger_contracts_response_200_4"
	ListContractsContractsResponse200LedgerTypeListContractsLedgerContractsResponse2005 ListContractsContractsResponse200LedgerType = "listContracts_ledger_contracts_response_200_5"
	ListContractsContractsResponse200LedgerTypeListContractsLedgerContractsResponse2006 ListContractsContractsResponse200LedgerType = "listContracts_ledger_contracts_response_200_6"
)

type ListContractsContractsResponse200Ledger struct {
	ListContractsLedgerContractsResponse2001 *ListContractsLedgerContractsResponse2001
	ListContractsLedgerContractsResponse2002 *ListContractsLedgerContractsResponse2002
	ListContractsLedgerContractsResponse2003 *ListContractsLedgerContractsResponse2003
	ListContractsLedgerContractsResponse2004 *ListContractsLedgerContractsResponse2004
	ListContractsLedgerContractsResponse2005 *ListContractsLedgerContractsResponse2005
	ListContractsLedgerContractsResponse2006 *ListContractsLedgerContractsResponse2006

	Type ListContractsContractsResponse200LedgerType
}

func CreateListContractsContractsResponse200LedgerListContractsLedgerContractsResponse2001(listContractsLedgerContractsResponse2001 ListContractsLedgerContractsResponse2001) ListContractsContractsResponse200Ledger {
	typ := ListContractsContractsResponse200LedgerTypeListContractsLedgerContractsResponse2001

	return ListContractsContractsResponse200Ledger{
		ListContractsLedgerContractsResponse2001: &listContractsLedgerContractsResponse2001,
		Type:                                     typ,
	}
}

func CreateListContractsContractsResponse200LedgerListContractsLedgerContractsResponse2002(listContractsLedgerContractsResponse2002 ListContractsLedgerContractsResponse2002) ListContractsContractsResponse200Ledger {
	typ := ListContractsContractsResponse200LedgerTypeListContractsLedgerContractsResponse2002

	return ListContractsContractsResponse200Ledger{
		ListContractsLedgerContractsResponse2002: &listContractsLedgerContractsResponse2002,
		Type:                                     typ,
	}
}

func CreateListContractsContractsResponse200LedgerListContractsLedgerContractsResponse2003(listContractsLedgerContractsResponse2003 ListContractsLedgerContractsResponse2003) ListContractsContractsResponse200Ledger {
	typ := ListContractsContractsResponse200LedgerTypeListContractsLedgerContractsResponse2003

	return ListContractsContractsResponse200Ledger{
		ListContractsLedgerContractsResponse2003: &listContractsLedgerContractsResponse2003,
		Type:                                     typ,
	}
}

func CreateListContractsContractsResponse200LedgerListContractsLedgerContractsResponse2004(listContractsLedgerContractsResponse2004 ListContractsLedgerContractsResponse2004) ListContractsContractsResponse200Ledger {
	typ := ListContractsContractsResponse200LedgerTypeListContractsLedgerContractsResponse2004

	return ListContractsContractsResponse200Ledger{
		ListContractsLedgerContractsResponse2004: &listContractsLedgerContractsResponse2004,
		Type:                                     typ,
	}
}

func CreateListContractsContractsResponse200LedgerListContractsLedgerContractsResponse2005(listContractsLedgerContractsResponse2005 ListContractsLedgerContractsResponse2005) ListContractsContractsResponse200Ledger {
	typ := ListContractsContractsResponse200LedgerTypeListContractsLedgerContractsResponse2005

	return ListContractsContractsResponse200Ledger{
		ListContractsLedgerContractsResponse2005: &listContractsLedgerContractsResponse2005,
		Type:                                     typ,
	}
}

func CreateListContractsContractsResponse200LedgerListContractsLedgerContractsResponse2006(listContractsLedgerContractsResponse2006 ListContractsLedgerContractsResponse2006) ListContractsContractsResponse200Ledger {
	typ := ListContractsContractsResponse200LedgerTypeListContractsLedgerContractsResponse2006

	return ListContractsContractsResponse200Ledger{
		ListContractsLedgerContractsResponse2006: &listContractsLedgerContractsResponse2006,
		Type:                                     typ,
	}
}

func (u *ListContractsContractsResponse200Ledger) UnmarshalJSON(data []byte) error {

	var listContractsLedgerContractsResponse2001 ListContractsLedgerContractsResponse2001 = ListContractsLedgerContractsResponse2001{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse2001, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse2001 = &listContractsLedgerContractsResponse2001
		u.Type = ListContractsContractsResponse200LedgerTypeListContractsLedgerContractsResponse2001
		return nil
	}

	var listContractsLedgerContractsResponse2003 ListContractsLedgerContractsResponse2003 = ListContractsLedgerContractsResponse2003{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse2003, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse2003 = &listContractsLedgerContractsResponse2003
		u.Type = ListContractsContractsResponse200LedgerTypeListContractsLedgerContractsResponse2003
		return nil
	}

	var listContractsLedgerContractsResponse2006 ListContractsLedgerContractsResponse2006 = ListContractsLedgerContractsResponse2006{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse2006, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse2006 = &listContractsLedgerContractsResponse2006
		u.Type = ListContractsContractsResponse200LedgerTypeListContractsLedgerContractsResponse2006
		return nil
	}

	var listContractsLedgerContractsResponse2002 ListContractsLedgerContractsResponse2002 = ListContractsLedgerContractsResponse2002{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse2002, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse2002 = &listContractsLedgerContractsResponse2002
		u.Type = ListContractsContractsResponse200LedgerTypeListContractsLedgerContractsResponse2002
		return nil
	}

	var listContractsLedgerContractsResponse2004 ListContractsLedgerContractsResponse2004 = ListContractsLedgerContractsResponse2004{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse2004, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse2004 = &listContractsLedgerContractsResponse2004
		u.Type = ListContractsContractsResponse200LedgerTypeListContractsLedgerContractsResponse2004
		return nil
	}

	var listContractsLedgerContractsResponse2005 ListContractsLedgerContractsResponse2005 = ListContractsLedgerContractsResponse2005{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse2005, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse2005 = &listContractsLedgerContractsResponse2005
		u.Type = ListContractsContractsResponse200LedgerTypeListContractsLedgerContractsResponse2005
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListContractsContractsResponse200Ledger", string(data))
}

func (u ListContractsContractsResponse200Ledger) MarshalJSON() ([]byte, error) {
	if u.ListContractsLedgerContractsResponse2001 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse2001, "", true)
	}

	if u.ListContractsLedgerContractsResponse2002 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse2002, "", true)
	}

	if u.ListContractsLedgerContractsResponse2003 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse2003, "", true)
	}

	if u.ListContractsLedgerContractsResponse2004 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse2004, "", true)
	}

	if u.ListContractsLedgerContractsResponse2005 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse2005, "", true)
	}

	if u.ListContractsLedgerContractsResponse2006 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse2006, "", true)
	}

	return nil, errors.New("could not marshal union type ListContractsContractsResponse200Ledger: all fields are null")
}

type ListContractsContractsCredits struct {
	ID       string                                                           `json:"id"`
	Contract *ListContractsContractsResponse200Contract                       `json:"contract,omitempty"`
	Type     ListContractsContractsResponse200ApplicationJSONResponseBodyType `json:"type"`
	Name     *string                                                          `json:"name,omitempty"`
	// If multiple credits or commits are applicable, the one with the lower priority will apply first.
	Priority *float64                                                                `json:"priority,omitempty"`
	Product  ListContractsContractsResponse200ApplicationJSONResponseBodyDataProduct `json:"product"`
	// The schedule that the customer will gain access to the credits.
	AccessSchedule        *ListContractsContractsResponse200AccessSchedule `json:"access_schedule,omitempty"`
	Description           *string                                          `json:"description,omitempty"`
	ApplicableProductIds  []string                                         `json:"applicable_product_ids,omitempty"`
	ApplicableProductTags []string                                         `json:"applicable_product_tags,omitempty"`
	ApplicableContractIds []string                                         `json:"applicable_contract_ids,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string `json:"salesforce_opportunity_id,omitempty"`
	// A list of ordered events that impact the balance of a credit. For example, an invoice deduction or an expiration.
	Ledger       []ListContractsContractsResponse200Ledger `json:"ledger,omitempty"`
	CustomFields map[string]string                         `json:"custom_fields,omitempty"`
}

func (o *ListContractsContractsCredits) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsCredits) GetContract() *ListContractsContractsResponse200Contract {
	if o == nil {
		return nil
	}
	return o.Contract
}

func (o *ListContractsContractsCredits) GetType() ListContractsContractsResponse200ApplicationJSONResponseBodyType {
	if o == nil {
		return ListContractsContractsResponse200ApplicationJSONResponseBodyType("")
	}
	return o.Type
}

func (o *ListContractsContractsCredits) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListContractsContractsCredits) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *ListContractsContractsCredits) GetProduct() ListContractsContractsResponse200ApplicationJSONResponseBodyDataProduct {
	if o == nil {
		return ListContractsContractsResponse200ApplicationJSONResponseBodyDataProduct{}
	}
	return o.Product
}

func (o *ListContractsContractsCredits) GetAccessSchedule() *ListContractsContractsResponse200AccessSchedule {
	if o == nil {
		return nil
	}
	return o.AccessSchedule
}

func (o *ListContractsContractsCredits) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListContractsContractsCredits) GetApplicableProductIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductIds
}

func (o *ListContractsContractsCredits) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *ListContractsContractsCredits) GetApplicableContractIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableContractIds
}

func (o *ListContractsContractsCredits) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *ListContractsContractsCredits) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *ListContractsContractsCredits) GetLedger() []ListContractsContractsResponse200Ledger {
	if o == nil {
		return nil
	}
	return o.Ledger
}

func (o *ListContractsContractsCredits) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ListContractsContractsOverrideSpecifiers struct {
	ProductID               *string           `json:"product_id,omitempty"`
	ProductTags             []string          `json:"product_tags,omitempty"`
	PricingGroupValues      map[string]string `json:"pricing_group_values,omitempty"`
	PresentationGroupValues map[string]string `json:"presentation_group_values,omitempty"`
}

func (o *ListContractsContractsOverrideSpecifiers) GetProductID() *string {
	if o == nil {
		return nil
	}
	return o.ProductID
}

func (o *ListContractsContractsOverrideSpecifiers) GetProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ProductTags
}

func (o *ListContractsContractsOverrideSpecifiers) GetPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PricingGroupValues
}

func (o *ListContractsContractsOverrideSpecifiers) GetPresentationGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PresentationGroupValues
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataType string

const (
	ListContractsContractsResponse200ApplicationJSONResponseBodyDataTypeOverwrite  ListContractsContractsResponse200ApplicationJSONResponseBodyDataType = "OVERWRITE"
	ListContractsContractsResponse200ApplicationJSONResponseBodyDataTypeMultiplier ListContractsContractsResponse200ApplicationJSONResponseBodyDataType = "MULTIPLIER"
	ListContractsContractsResponse200ApplicationJSONResponseBodyDataTypeTiered     ListContractsContractsResponse200ApplicationJSONResponseBodyDataType = "TIERED"
)

func (e ListContractsContractsResponse200ApplicationJSONResponseBodyDataType) ToPointer() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataType {
	return &e
}
func (e *ListContractsContractsResponse200ApplicationJSONResponseBodyDataType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OVERWRITE":
		fallthrough
	case "MULTIPLIER":
		fallthrough
	case "TIERED":
		*e = ListContractsContractsResponse200ApplicationJSONResponseBodyDataType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsContractsResponse200ApplicationJSONResponseBodyDataType: %v", v)
	}
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyRateType string

const (
	ListContractsContractsResponse200ApplicationJSONResponseBodyRateTypeFlatUpper         ListContractsContractsResponse200ApplicationJSONResponseBodyRateType = "FLAT"
	ListContractsContractsResponse200ApplicationJSONResponseBodyRateTypeFlatLower         ListContractsContractsResponse200ApplicationJSONResponseBodyRateType = "flat"
	ListContractsContractsResponse200ApplicationJSONResponseBodyRateTypePercentageUpper   ListContractsContractsResponse200ApplicationJSONResponseBodyRateType = "PERCENTAGE"
	ListContractsContractsResponse200ApplicationJSONResponseBodyRateTypePercentageLower   ListContractsContractsResponse200ApplicationJSONResponseBodyRateType = "percentage"
	ListContractsContractsResponse200ApplicationJSONResponseBodyRateTypeSubscriptionUpper ListContractsContractsResponse200ApplicationJSONResponseBodyRateType = "SUBSCRIPTION"
	ListContractsContractsResponse200ApplicationJSONResponseBodyRateTypeSubscriptionLower ListContractsContractsResponse200ApplicationJSONResponseBodyRateType = "subscription"
	ListContractsContractsResponse200ApplicationJSONResponseBodyRateTypeTieredUpper       ListContractsContractsResponse200ApplicationJSONResponseBodyRateType = "TIERED"
	ListContractsContractsResponse200ApplicationJSONResponseBodyRateTypeTieredLower       ListContractsContractsResponse200ApplicationJSONResponseBodyRateType = "tiered"
	ListContractsContractsResponse200ApplicationJSONResponseBodyRateTypeCustomUpper       ListContractsContractsResponse200ApplicationJSONResponseBodyRateType = "CUSTOM"
	ListContractsContractsResponse200ApplicationJSONResponseBodyRateTypeCustomLower       ListContractsContractsResponse200ApplicationJSONResponseBodyRateType = "custom"
)

func (e ListContractsContractsResponse200ApplicationJSONResponseBodyRateType) ToPointer() *ListContractsContractsResponse200ApplicationJSONResponseBodyRateType {
	return &e
}
func (e *ListContractsContractsResponse200ApplicationJSONResponseBodyRateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FLAT":
		fallthrough
	case "flat":
		fallthrough
	case "PERCENTAGE":
		fallthrough
	case "percentage":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "subscription":
		fallthrough
	case "TIERED":
		fallthrough
	case "tiered":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "custom":
		*e = ListContractsContractsResponse200ApplicationJSONResponseBodyRateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsContractsResponse200ApplicationJSONResponseBodyRateType: %v", v)
	}
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyTiers struct {
	Size  *float64 `json:"size,omitempty"`
	Price float64  `json:"price"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyTiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentOverridesCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentOverridesCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentOverridesCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsOverwriteRate struct {
	RateType ListContractsContractsResponse200ApplicationJSONResponseBodyRateType `json:"rate_type"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price *float64 `json:"price,omitempty"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity *float64 `json:"quantity,omitempty"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type.
	IsProrated *bool `json:"is_prorated,omitempty"`
	// Only set for TIERED rate_type.
	Tiers []ListContractsContractsResponse200ApplicationJSONResponseBodyTiers `json:"tiers,omitempty"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate processors.
	CustomRate map[string]any                                                                              `json:"custom_rate,omitempty"`
	CreditType *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentOverridesCreditType `json:"credit_type,omitempty"`
}

func (o *ListContractsContractsOverwriteRate) GetRateType() ListContractsContractsResponse200ApplicationJSONResponseBodyRateType {
	if o == nil {
		return ListContractsContractsResponse200ApplicationJSONResponseBodyRateType("")
	}
	return o.RateType
}

func (o *ListContractsContractsOverwriteRate) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *ListContractsContractsOverwriteRate) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *ListContractsContractsOverwriteRate) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *ListContractsContractsOverwriteRate) GetTiers() []ListContractsContractsResponse200ApplicationJSONResponseBodyTiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *ListContractsContractsOverwriteRate) GetCustomRate() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomRate
}

func (o *ListContractsContractsOverwriteRate) GetCreditType() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentOverridesCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

type ListContractsContractsOverrideTiers struct {
	Size       *float64 `json:"size,omitempty"`
	Multiplier float64  `json:"multiplier"`
}

func (o *ListContractsContractsOverrideTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *ListContractsContractsOverrideTiers) GetMultiplier() float64 {
	if o == nil {
		return 0.0
	}
	return o.Multiplier
}

type ListContractsContractsRateType string

const (
	ListContractsContractsRateTypeFlatUpper         ListContractsContractsRateType = "FLAT"
	ListContractsContractsRateTypeFlatLower         ListContractsContractsRateType = "flat"
	ListContractsContractsRateTypePercentageUpper   ListContractsContractsRateType = "PERCENTAGE"
	ListContractsContractsRateTypePercentageLower   ListContractsContractsRateType = "percentage"
	ListContractsContractsRateTypeSubscriptionUpper ListContractsContractsRateType = "SUBSCRIPTION"
	ListContractsContractsRateTypeSubscriptionLower ListContractsContractsRateType = "subscription"
	ListContractsContractsRateTypeTieredUpper       ListContractsContractsRateType = "TIERED"
	ListContractsContractsRateTypeTieredLower       ListContractsContractsRateType = "tiered"
	ListContractsContractsRateTypeCustomUpper       ListContractsContractsRateType = "CUSTOM"
	ListContractsContractsRateTypeCustomLower       ListContractsContractsRateType = "custom"
)

func (e ListContractsContractsRateType) ToPointer() *ListContractsContractsRateType {
	return &e
}
func (e *ListContractsContractsRateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FLAT":
		fallthrough
	case "flat":
		fallthrough
	case "PERCENTAGE":
		fallthrough
	case "percentage":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "subscription":
		fallthrough
	case "TIERED":
		fallthrough
	case "tiered":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "custom":
		*e = ListContractsContractsRateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsContractsRateType: %v", v)
	}
}

type ListContractsContractsTiers struct {
	Size  *float64 `json:"size,omitempty"`
	Price float64  `json:"price"`
}

func (o *ListContractsContractsTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *ListContractsContractsTiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type ListContractsContractsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListContractsContractsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListContractsContractsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsOverrides struct {
	ID                    string                                                                          `json:"id"`
	Product               *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentProduct `json:"product,omitempty"`
	ApplicableProductTags []string                                                                        `json:"applicable_product_tags,omitempty"`
	OverrideSpecifiers    []ListContractsContractsOverrideSpecifiers                                      `json:"override_specifiers,omitempty"`
	StartingAt            time.Time                                                                       `json:"starting_at"`
	EndingBefore          *time.Time                                                                      `json:"ending_before,omitempty"`
	Entitled              *bool                                                                           `json:"entitled,omitempty"`
	Type                  *ListContractsContractsResponse200ApplicationJSONResponseBodyDataType           `json:"type,omitempty"`
	Priority              *float64                                                                        `json:"priority,omitempty"`
	Multiplier            *float64                                                                        `json:"multiplier,omitempty"`
	OverwriteRate         *ListContractsContractsOverwriteRate                                            `json:"overwrite_rate,omitempty"`
	OverrideTiers         []ListContractsContractsOverrideTiers                                           `json:"override_tiers,omitempty"`
	RateType              *ListContractsContractsRateType                                                 `json:"rate_type,omitempty"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price *float64 `json:"price,omitempty"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity *float64 `json:"quantity,omitempty"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type.
	IsProrated *bool `json:"is_prorated,omitempty"`
	// Only set for TIERED rate_type.
	Tiers []ListContractsContractsTiers `json:"tiers,omitempty"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate processors.
	Value      map[string]any                    `json:"value,omitempty"`
	CreditType *ListContractsContractsCreditType `json:"credit_type,omitempty"`
}

func (l ListContractsContractsOverrides) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsOverrides) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsOverrides) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsOverrides) GetProduct() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentProduct {
	if o == nil {
		return nil
	}
	return o.Product
}

func (o *ListContractsContractsOverrides) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *ListContractsContractsOverrides) GetOverrideSpecifiers() []ListContractsContractsOverrideSpecifiers {
	if o == nil {
		return nil
	}
	return o.OverrideSpecifiers
}

func (o *ListContractsContractsOverrides) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *ListContractsContractsOverrides) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *ListContractsContractsOverrides) GetEntitled() *bool {
	if o == nil {
		return nil
	}
	return o.Entitled
}

func (o *ListContractsContractsOverrides) GetType() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListContractsContractsOverrides) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *ListContractsContractsOverrides) GetMultiplier() *float64 {
	if o == nil {
		return nil
	}
	return o.Multiplier
}

func (o *ListContractsContractsOverrides) GetOverwriteRate() *ListContractsContractsOverwriteRate {
	if o == nil {
		return nil
	}
	return o.OverwriteRate
}

func (o *ListContractsContractsOverrides) GetOverrideTiers() []ListContractsContractsOverrideTiers {
	if o == nil {
		return nil
	}
	return o.OverrideTiers
}

func (o *ListContractsContractsOverrides) GetRateType() *ListContractsContractsRateType {
	if o == nil {
		return nil
	}
	return o.RateType
}

func (o *ListContractsContractsOverrides) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *ListContractsContractsOverrides) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *ListContractsContractsOverrides) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *ListContractsContractsOverrides) GetTiers() []ListContractsContractsTiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *ListContractsContractsOverrides) GetValue() map[string]any {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *ListContractsContractsOverrides) GetCreditType() *ListContractsContractsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsScheduleItems struct {
	ID        string    `json:"id"`
	InvoiceID string    `json:"invoice_id"`
	Amount    float64   `json:"amount"`
	UnitPrice float64   `json:"unit_price"`
	Quantity  float64   `json:"quantity"`
	Timestamp time.Time `json:"timestamp"`
}

func (l ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsScheduleItems) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsScheduleItems) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsScheduleItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsScheduleItems) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

type ListContractsContractsResponseSchedule struct {
	CreditType    *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsCreditType     `json:"credit_type,omitempty"`
	ScheduleItems []ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsScheduleItems `json:"schedule_items,omitempty"`
}

func (o *ListContractsContractsResponseSchedule) GetCreditType() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *ListContractsContractsResponseSchedule) GetScheduleItems() []ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsScheduleItems {
	if o == nil {
		return nil
	}
	return o.ScheduleItems
}

type ListContractsContractsDiscounts struct {
	ID       string                                                                                  `json:"id"`
	Product  ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsProduct `json:"product"`
	Schedule ListContractsContractsResponseSchedule                                                  `json:"schedule"`
	Name     *string                                                                                 `json:"name,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
}

func (o *ListContractsContractsDiscounts) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsDiscounts) GetProduct() ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsProduct {
	if o == nil {
		return ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentDiscountsProduct{}
	}
	return o.Product
}

func (o *ListContractsContractsDiscounts) GetSchedule() ListContractsContractsResponseSchedule {
	if o == nil {
		return ListContractsContractsResponseSchedule{}
	}
	return o.Schedule
}

func (o *ListContractsContractsDiscounts) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListContractsContractsDiscounts) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

type ListContractsContractsProfessionalServices struct {
	ID          string  `json:"id"`
	Description *string `json:"description,omitempty"`
	ProductID   string  `json:"product_id"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// Unit price for the charge. Will be multiplied by quantity to determine the amount and must be specified.
	UnitPrice float64 `json:"unit_price"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the amount.
	Quantity float64 `json:"quantity"`
	// Maximum amount for the term.
	MaxAmount    float64           `json:"max_amount"`
	CustomFields map[string]string `json:"custom_fields,omitempty"`
}

func (o *ListContractsContractsProfessionalServices) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsProfessionalServices) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListContractsContractsProfessionalServices) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *ListContractsContractsProfessionalServices) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *ListContractsContractsProfessionalServices) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *ListContractsContractsProfessionalServices) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *ListContractsContractsProfessionalServices) GetMaxAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.MaxAmount
}

func (o *ListContractsContractsProfessionalServices) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems struct {
	ID        string    `json:"id"`
	InvoiceID string    `json:"invoice_id"`
	Amount    float64   `json:"amount"`
	UnitPrice float64   `json:"unit_price"`
	Quantity  float64   `json:"quantity"`
	Timestamp time.Time `json:"timestamp"`
}

func (l ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

type ListContractsContractsResponse200Schedule struct {
	CreditType    *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesCreditType     `json:"credit_type,omitempty"`
	ScheduleItems []ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems `json:"schedule_items,omitempty"`
}

func (o *ListContractsContractsResponse200Schedule) GetCreditType() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *ListContractsContractsResponse200Schedule) GetScheduleItems() []ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesScheduleItems {
	if o == nil {
		return nil
	}
	return o.ScheduleItems
}

type ListContractsContractsScheduledCharges struct {
	ID       string                                                                                         `json:"id"`
	Product  ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesProduct `json:"product"`
	Schedule ListContractsContractsResponse200Schedule                                                      `json:"schedule"`
	// displayed on invoices
	Name *string `json:"name,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string           `json:"netsuite_sales_order_id,omitempty"`
	CustomFields         map[string]string `json:"custom_fields,omitempty"`
}

func (o *ListContractsContractsScheduledCharges) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsScheduledCharges) GetProduct() ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesProduct {
	if o == nil {
		return ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentScheduledChargesProduct{}
	}
	return o.Product
}

func (o *ListContractsContractsScheduledCharges) GetSchedule() ListContractsContractsResponse200Schedule {
	if o == nil {
		return ListContractsContractsResponse200Schedule{}
	}
	return o.Schedule
}

func (o *ListContractsContractsScheduledCharges) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListContractsContractsScheduledCharges) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *ListContractsContractsScheduledCharges) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentType string

const (
	ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentTypeSupersede ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentType = "SUPERSEDE"
	ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentTypeRenewal   ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentType = "RENEWAL"
)

func (e ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentType) ToPointer() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentType {
	return &e
}
func (e *ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SUPERSEDE":
		fallthrough
	case "RENEWAL":
		*e = ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentType: %v", v)
	}
}

type ListContractsContractsTransitions struct {
	Type           ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentType `json:"type"`
	FromContractID string                                                                      `json:"from_contract_id"`
	ToContractID   string                                                                      `json:"to_contract_id"`
}

func (o *ListContractsContractsTransitions) GetType() ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentType {
	if o == nil {
		return ListContractsContractsResponse200ApplicationJSONResponseBodyDataCurrentType("")
	}
	return o.Type
}

func (o *ListContractsContractsTransitions) GetFromContractID() string {
	if o == nil {
		return ""
	}
	return o.FromContractID
}

func (o *ListContractsContractsTransitions) GetToContractID() string {
	if o == nil {
		return ""
	}
	return o.ToContractID
}

type ListContractsContractsResellerType string

const (
	ListContractsContractsResellerTypeAws           ListContractsContractsResellerType = "AWS"
	ListContractsContractsResellerTypeAwsProService ListContractsContractsResellerType = "AWS_PRO_SERVICE"
	ListContractsContractsResellerTypeGcp           ListContractsContractsResellerType = "GCP"
	ListContractsContractsResellerTypeGcpProService ListContractsContractsResellerType = "GCP_PRO_SERVICE"
)

func (e ListContractsContractsResellerType) ToPointer() *ListContractsContractsResellerType {
	return &e
}
func (e *ListContractsContractsResellerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWS":
		fallthrough
	case "AWS_PRO_SERVICE":
		fallthrough
	case "GCP":
		fallthrough
	case "GCP_PRO_SERVICE":
		*e = ListContractsContractsResellerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsContractsResellerType: %v", v)
	}
}

type ListContractsContractsResellerRoyalties struct {
	ResellerType          ListContractsContractsResellerType `json:"reseller_type"`
	Fraction              float64                            `json:"fraction"`
	ApplicableProductTags []string                           `json:"applicable_product_tags,omitempty"`
	ApplicableProductIds  []string                           `json:"applicable_product_ids,omitempty"`
	NetsuiteResellerID    string                             `json:"netsuite_reseller_id"`
	StartingAt            time.Time                          `json:"starting_at"`
	EndingBefore          *time.Time                         `json:"ending_before,omitempty"`
	ResellerContractValue *float64                           `json:"reseller_contract_value,omitempty"`
	AwsAccountNumber      *string                            `json:"aws_account_number,omitempty"`
	AwsPayerReferenceID   *string                            `json:"aws_payer_reference_id,omitempty"`
	AwsOfferID            *string                            `json:"aws_offer_id,omitempty"`
	GcpAccountID          *string                            `json:"gcp_account_id,omitempty"`
	GcpOfferID            *string                            `json:"gcp_offer_id,omitempty"`
}

func (l ListContractsContractsResellerRoyalties) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsResellerRoyalties) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsResellerRoyalties) GetResellerType() ListContractsContractsResellerType {
	if o == nil {
		return ListContractsContractsResellerType("")
	}
	return o.ResellerType
}

func (o *ListContractsContractsResellerRoyalties) GetFraction() float64 {
	if o == nil {
		return 0.0
	}
	return o.Fraction
}

func (o *ListContractsContractsResellerRoyalties) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *ListContractsContractsResellerRoyalties) GetApplicableProductIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductIds
}

func (o *ListContractsContractsResellerRoyalties) GetNetsuiteResellerID() string {
	if o == nil {
		return ""
	}
	return o.NetsuiteResellerID
}

func (o *ListContractsContractsResellerRoyalties) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *ListContractsContractsResellerRoyalties) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *ListContractsContractsResellerRoyalties) GetResellerContractValue() *float64 {
	if o == nil {
		return nil
	}
	return o.ResellerContractValue
}

func (o *ListContractsContractsResellerRoyalties) GetAwsAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.AwsAccountNumber
}

func (o *ListContractsContractsResellerRoyalties) GetAwsPayerReferenceID() *string {
	if o == nil {
		return nil
	}
	return o.AwsPayerReferenceID
}

func (o *ListContractsContractsResellerRoyalties) GetAwsOfferID() *string {
	if o == nil {
		return nil
	}
	return o.AwsOfferID
}

func (o *ListContractsContractsResellerRoyalties) GetGcpAccountID() *string {
	if o == nil {
		return nil
	}
	return o.GcpAccountID
}

func (o *ListContractsContractsResellerRoyalties) GetGcpOfferID() *string {
	if o == nil {
		return nil
	}
	return o.GcpOfferID
}

type ListContractsContractsResponseInitial struct {
	GroupKey    string     `json:"group_key"`
	GroupValues []string   `json:"group_values"`
	StartingAt  *time.Time `json:"starting_at,omitempty"`
}

func (l ListContractsContractsResponseInitial) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsResponseInitial) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsResponseInitial) GetGroupKey() string {
	if o == nil {
		return ""
	}
	return o.GroupKey
}

func (o *ListContractsContractsResponseInitial) GetGroupValues() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupValues
}

func (o *ListContractsContractsResponseInitial) GetStartingAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartingAt
}

type ListContractsContractsCurrent struct {
	GroupKey    string     `json:"group_key"`
	GroupValues []string   `json:"group_values"`
	StartingAt  *time.Time `json:"starting_at,omitempty"`
}

func (l ListContractsContractsCurrent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsCurrent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsCurrent) GetGroupKey() string {
	if o == nil {
		return ""
	}
	return o.GroupKey
}

func (o *ListContractsContractsCurrent) GetGroupValues() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupValues
}

func (o *ListContractsContractsCurrent) GetStartingAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartingAt
}

type ListContractsContractsUpdates struct {
	GroupKey    string    `json:"group_key"`
	GroupValues []string  `json:"group_values"`
	StartingAt  time.Time `json:"starting_at"`
}

func (l ListContractsContractsUpdates) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsUpdates) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsUpdates) GetGroupKey() string {
	if o == nil {
		return ""
	}
	return o.GroupKey
}

func (o *ListContractsContractsUpdates) GetGroupValues() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupValues
}

func (o *ListContractsContractsUpdates) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

type ListContractsContractsUsageFilter struct {
	Initial ListContractsContractsResponseInitial `json:"initial"`
	Current *ListContractsContractsCurrent        `json:"current"`
	Updates []ListContractsContractsUpdates       `json:"updates"`
}

func (o *ListContractsContractsUsageFilter) GetInitial() ListContractsContractsResponseInitial {
	if o == nil {
		return ListContractsContractsResponseInitial{}
	}
	return o.Initial
}

func (o *ListContractsContractsUsageFilter) GetCurrent() *ListContractsContractsCurrent {
	if o == nil {
		return nil
	}
	return o.Current
}

func (o *ListContractsContractsUsageFilter) GetUpdates() []ListContractsContractsUpdates {
	if o == nil {
		return []ListContractsContractsUpdates{}
	}
	return o.Updates
}

type ListContractsContractsFrequency string

const (
	ListContractsContractsFrequencyMonthlyUpper   ListContractsContractsFrequency = "MONTHLY"
	ListContractsContractsFrequencyMonthlyLower   ListContractsContractsFrequency = "monthly"
	ListContractsContractsFrequencyQuarterlyUpper ListContractsContractsFrequency = "QUARTERLY"
	ListContractsContractsFrequencyQuarterlyLower ListContractsContractsFrequency = "quarterly"
)

func (e ListContractsContractsFrequency) ToPointer() *ListContractsContractsFrequency {
	return &e
}
func (e *ListContractsContractsFrequency) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MONTHLY":
		fallthrough
	case "monthly":
		fallthrough
	case "QUARTERLY":
		fallthrough
	case "quarterly":
		*e = ListContractsContractsFrequency(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsContractsFrequency: %v", v)
	}
}

type ListContractsContractsUsageStatementSchedule struct {
	Frequency ListContractsContractsFrequency `json:"frequency"`
}

func (o *ListContractsContractsUsageStatementSchedule) GetFrequency() ListContractsContractsFrequency {
	if o == nil {
		return ListContractsContractsFrequency("")
	}
	return o.Frequency
}

type ListContractsCurrent struct {
	Name *string `json:"name,omitempty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string                           `json:"salesforce_opportunity_id,omitempty"`
	RateCardID              *string                           `json:"rate_card_id,omitempty"`
	StartingAt              time.Time                         `json:"starting_at"`
	Commits                 []ListContractsContractsCommits   `json:"commits"`
	Credits                 []ListContractsContractsCredits   `json:"credits,omitempty"`
	Overrides               []ListContractsContractsOverrides `json:"overrides"`
	// This field's availability is dependent on your client's configuration.
	Discounts []ListContractsContractsDiscounts `json:"discounts,omitempty"`
	// This field's availability is dependent on your client's configuration.
	ProfessionalServices []ListContractsContractsProfessionalServices `json:"professional_services,omitempty"`
	ScheduledCharges     []ListContractsContractsScheduledCharges     `json:"scheduled_charges"`
	Transitions          []ListContractsContractsTransitions          `json:"transitions"`
	// This field's availability is dependent on your client's configuration.
	ResellerRoyalties []ListContractsContractsResellerRoyalties `json:"reseller_royalties,omitempty"`
	CreatedAt         time.Time                                 `json:"created_at"`
	CreatedBy         string                                    `json:"created_by"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string    `json:"netsuite_sales_order_id,omitempty"`
	NetPaymentTermsDays  *float64   `json:"net_payment_terms_days,omitempty"`
	EndingBefore         *time.Time `json:"ending_before,omitempty"`
	// This field's availability is dependent on your client's configuration.
	TotalContractValue     *float64                                     `json:"total_contract_value,omitempty"`
	UsageFilter            *ListContractsContractsUsageFilter           `json:"usage_filter,omitempty"`
	UsageStatementSchedule ListContractsContractsUsageStatementSchedule `json:"usage_statement_schedule"`
}

func (l ListContractsCurrent) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsCurrent) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsCurrent) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListContractsCurrent) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *ListContractsCurrent) GetRateCardID() *string {
	if o == nil {
		return nil
	}
	return o.RateCardID
}

func (o *ListContractsCurrent) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *ListContractsCurrent) GetCommits() []ListContractsContractsCommits {
	if o == nil {
		return []ListContractsContractsCommits{}
	}
	return o.Commits
}

func (o *ListContractsCurrent) GetCredits() []ListContractsContractsCredits {
	if o == nil {
		return nil
	}
	return o.Credits
}

func (o *ListContractsCurrent) GetOverrides() []ListContractsContractsOverrides {
	if o == nil {
		return []ListContractsContractsOverrides{}
	}
	return o.Overrides
}

func (o *ListContractsCurrent) GetDiscounts() []ListContractsContractsDiscounts {
	if o == nil {
		return nil
	}
	return o.Discounts
}

func (o *ListContractsCurrent) GetProfessionalServices() []ListContractsContractsProfessionalServices {
	if o == nil {
		return nil
	}
	return o.ProfessionalServices
}

func (o *ListContractsCurrent) GetScheduledCharges() []ListContractsContractsScheduledCharges {
	if o == nil {
		return []ListContractsContractsScheduledCharges{}
	}
	return o.ScheduledCharges
}

func (o *ListContractsCurrent) GetTransitions() []ListContractsContractsTransitions {
	if o == nil {
		return []ListContractsContractsTransitions{}
	}
	return o.Transitions
}

func (o *ListContractsCurrent) GetResellerRoyalties() []ListContractsContractsResellerRoyalties {
	if o == nil {
		return nil
	}
	return o.ResellerRoyalties
}

func (o *ListContractsCurrent) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ListContractsCurrent) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *ListContractsCurrent) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *ListContractsCurrent) GetNetPaymentTermsDays() *float64 {
	if o == nil {
		return nil
	}
	return o.NetPaymentTermsDays
}

func (o *ListContractsCurrent) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *ListContractsCurrent) GetTotalContractValue() *float64 {
	if o == nil {
		return nil
	}
	return o.TotalContractValue
}

func (o *ListContractsCurrent) GetUsageFilter() *ListContractsContractsUsageFilter {
	if o == nil {
		return nil
	}
	return o.UsageFilter
}

func (o *ListContractsCurrent) GetUsageStatementSchedule() ListContractsContractsUsageStatementSchedule {
	if o == nil {
		return ListContractsContractsUsageStatementSchedule{}
	}
	return o.UsageStatementSchedule
}

type ListContractsContractsResponse200ApplicationJSONContract struct {
	ID string `json:"id"`
}

func (o *ListContractsContractsResponse200ApplicationJSONContract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType string

const (
	ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsTypePrepaid  ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType = "PREPAID"
	ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsTypePostpaid ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType = "POSTPAID"
)

func (e ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType) ToPointer() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType {
	return &e
}
func (e *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID":
		fallthrough
	case "POSTPAID":
		*e = ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType: %v", v)
	}
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduleItems struct {
	ID           string    `json:"id"`
	Amount       float64   `json:"amount"`
	StartingAt   time.Time `json:"starting_at"`
	EndingBefore time.Time `json:"ending_before"`
}

func (l ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduleItems) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduleItems) GetEndingBefore() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndingBefore
}

// ListContractsContractsResponse200ApplicationJSONAccessSchedule - The schedule that the customer will gain access to the credits purposed with this commit.
type ListContractsContractsResponse200ApplicationJSONAccessSchedule struct {
	CreditType    *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditType     `json:"credit_type,omitempty"`
	ScheduleItems []ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduleItems `json:"schedule_items"`
}

func (o *ListContractsContractsResponse200ApplicationJSONAccessSchedule) GetCreditType() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *ListContractsContractsResponse200ApplicationJSONAccessSchedule) GetScheduleItems() []ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduleItems {
	if o == nil {
		return []ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduleItems{}
	}
	return o.ScheduleItems
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsScheduleItems struct {
	ID        string    `json:"id"`
	InvoiceID string    `json:"invoice_id"`
	Amount    float64   `json:"amount"`
	UnitPrice float64   `json:"unit_price"`
	Quantity  float64   `json:"quantity"`
	Timestamp time.Time `json:"timestamp"`
}

func (l ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsScheduleItems) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsScheduleItems) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsScheduleItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsScheduleItems) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

// ListContractsContractsResponseInvoiceSchedule - The schedule that the customer will be invoiced for this commit.
type ListContractsContractsResponseInvoiceSchedule struct {
	CreditType    *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsCreditType     `json:"credit_type,omitempty"`
	ScheduleItems []ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsScheduleItems `json:"schedule_items,omitempty"`
}

func (o *ListContractsContractsResponseInvoiceSchedule) GetCreditType() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *ListContractsContractsResponseInvoiceSchedule) GetScheduleItems() []ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsScheduleItems {
	if o == nil {
		return nil
	}
	return o.ScheduleItems
}

// ListContractsContractsResponseInvoiceContract - The contract that this commit will be billed on.
type ListContractsContractsResponseInvoiceContract struct {
	ID string `json:"id"`
}

func (o *ListContractsContractsResponseInvoiceContract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsResponseRolledOverFrom struct {
	CommitID   string `json:"commit_id"`
	ContractID string `json:"contract_id"`
}

func (o *ListContractsContractsResponseRolledOverFrom) GetCommitID() string {
	if o == nil {
		return ""
	}
	return o.CommitID
}

func (o *ListContractsContractsResponseRolledOverFrom) GetContractID() string {
	if o == nil {
		return ""
	}
	return o.ContractID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits13Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits13TypePostpaidCommitExpiration ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits13Type = "POSTPAID_COMMIT_EXPIRATION"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits13Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits13Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits13Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_EXPIRATION":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits13Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits13Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse13 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits13Type `json:"type"`
	Timestamp time.Time                                                                                     `json:"timestamp"`
	Amount    float64                                                                                       `json:"amount"`
}

func (l ListContractsLedgerContractsResponse13) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse13) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse13) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits13Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits13Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse13) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse13) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits12Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits12TypePostpaidCommitManual ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits12Type = "POSTPAID_COMMIT_MANUAL"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits12Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits12Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits12Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_MANUAL":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits12Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits12Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse12 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits12Type `json:"type"`
	Timestamp time.Time                                                                                     `json:"timestamp"`
	Amount    float64                                                                                       `json:"amount"`
	Reason    string                                                                                        `json:"reason"`
}

func (l ListContractsLedgerContractsResponse12) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse12) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse12) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits12Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits12Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse12) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse12) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse12) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits11Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits11TypePrepaidCommitManual ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits11Type = "PREPAID_COMMIT_MANUAL"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits11Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits11Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits11Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_MANUAL":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits11Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits11Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse11 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits11Type `json:"type"`
	Timestamp time.Time                                                                                     `json:"timestamp"`
	Amount    float64                                                                                       `json:"amount"`
	Reason    string                                                                                        `json:"reason"`
}

func (l ListContractsLedgerContractsResponse11) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse11) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse11) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits11Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits11Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse11) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse11) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse11) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits10Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits10TypePostpaidCommitTrueup ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits10Type = "POSTPAID_COMMIT_TRUEUP"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits10Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits10Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits10Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_TRUEUP":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits10Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits10Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse10 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits10Type `json:"type"`
	Timestamp time.Time                                                                                     `json:"timestamp"`
	Amount    float64                                                                                       `json:"amount"`
	InvoiceID string                                                                                        `json:"invoice_id"`
}

func (l ListContractsLedgerContractsResponse10) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse10) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse10) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits10Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits10Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse10) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse10) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse10) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits9Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits9TypePostpaidCommitRollover ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits9Type = "POSTPAID_COMMIT_ROLLOVER"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits9Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits9Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits9Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_ROLLOVER":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits9Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits9Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse9 struct {
	Type          ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits9Type `json:"type"`
	Timestamp     time.Time                                                                                    `json:"timestamp"`
	Amount        float64                                                                                      `json:"amount"`
	SegmentID     string                                                                                       `json:"segment_id"`
	NewContractID string                                                                                       `json:"new_contract_id"`
}

func (l ListContractsLedgerContractsResponse9) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse9) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse9) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits9Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits9Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse9) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse9) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse9) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedgerContractsResponse9) GetNewContractID() string {
	if o == nil {
		return ""
	}
	return o.NewContractID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits8Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits8TypePostpaidCommitAutomatedInvoiceDeduction ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits8Type = "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits8Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits8Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits8Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits8Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits8Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse8 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits8Type `json:"type"`
	Timestamp time.Time                                                                                    `json:"timestamp"`
	Amount    float64                                                                                      `json:"amount"`
	SegmentID string                                                                                       `json:"segment_id"`
	InvoiceID string                                                                                       `json:"invoice_id"`
}

func (l ListContractsLedgerContractsResponse8) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse8) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse8) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits8Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits8Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse8) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse8) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse8) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedgerContractsResponse8) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits7Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits7TypePostpaidCommitInitialBalance ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits7Type = "POSTPAID_COMMIT_INITIAL_BALANCE"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits7Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits7Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits7Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "POSTPAID_COMMIT_INITIAL_BALANCE":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits7Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits7Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse7 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits7Type `json:"type"`
	Timestamp time.Time                                                                                    `json:"timestamp"`
	Amount    float64                                                                                      `json:"amount"`
}

func (l ListContractsLedgerContractsResponse7) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse7) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse7) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits7Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits7Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse7) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse7) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits6Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits6TypePrepaidCommitCredited ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits6Type = "PREPAID_COMMIT_CREDITED"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits6Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits6Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_CREDITED":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits6Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse200ApplicationJSON6 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits6Type `json:"type"`
	Timestamp time.Time                                                                                    `json:"timestamp"`
	Amount    float64                                                                                      `json:"amount"`
	SegmentID string                                                                                       `json:"segment_id"`
	InvoiceID string                                                                                       `json:"invoice_id"`
}

func (l ListContractsLedgerContractsResponse200ApplicationJSON6) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse200ApplicationJSON6) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON6) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits6Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits6Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON6) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON6) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON6) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON6) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits5Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits5TypePrepaidCommitCanceled ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits5Type = "PREPAID_COMMIT_CANCELED"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits5Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits5Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_CANCELED":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits5Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse200ApplicationJSON5 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits5Type `json:"type"`
	Timestamp time.Time                                                                                    `json:"timestamp"`
	Amount    float64                                                                                      `json:"amount"`
	SegmentID string                                                                                       `json:"segment_id"`
	InvoiceID string                                                                                       `json:"invoice_id"`
}

func (l ListContractsLedgerContractsResponse200ApplicationJSON5) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse200ApplicationJSON5) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON5) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits5Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits5Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON5) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON5) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON5) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON5) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits4Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits4TypePrepaidCommitExpiration ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits4Type = "PREPAID_COMMIT_EXPIRATION"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits4Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits4Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_EXPIRATION":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits4Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse200ApplicationJSON4 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits4Type `json:"type"`
	Timestamp time.Time                                                                                    `json:"timestamp"`
	Amount    float64                                                                                      `json:"amount"`
	SegmentID string                                                                                       `json:"segment_id"`
}

func (l ListContractsLedgerContractsResponse200ApplicationJSON4) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse200ApplicationJSON4) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON4) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits4Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits4Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON4) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON4) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON4) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits3Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits3TypePrepaidCommitRollover ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits3Type = "PREPAID_COMMIT_ROLLOVER"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits3Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits3Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_ROLLOVER":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits3Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse200ApplicationJSON3 struct {
	Type          ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits3Type `json:"type"`
	Timestamp     time.Time                                                                                    `json:"timestamp"`
	Amount        float64                                                                                      `json:"amount"`
	SegmentID     string                                                                                       `json:"segment_id"`
	NewContractID string                                                                                       `json:"new_contract_id"`
}

func (l ListContractsLedgerContractsResponse200ApplicationJSON3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse200ApplicationJSON3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON3) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits3Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommits3Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON3) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON3) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON3) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON3) GetNewContractID() string {
	if o == nil {
		return ""
	}
	return o.NewContractID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsType string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsTypePrepaidCommitAutomatedInvoiceDeduction ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsType = "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsType) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsType {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsType: %v", v)
	}
}

type ListContractsLedgerContractsResponse200ApplicationJSON2 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsType `json:"type"`
	Timestamp time.Time                                                                                   `json:"timestamp"`
	Amount    float64                                                                                     `json:"amount"`
	SegmentID string                                                                                      `json:"segment_id"`
	InvoiceID string                                                                                      `json:"invoice_id"`
}

func (l ListContractsLedgerContractsResponse200ApplicationJSON2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse200ApplicationJSON2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON2) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsType {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCommitsType("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON2) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON2) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON2) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON2) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsTypePrepaidCommitSegmentStart ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType = "PREPAID_COMMIT_SEGMENT_START"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PREPAID_COMMIT_SEGMENT_START":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType: %v", v)
	}
}

type ListContractsLedgerContractsResponse200ApplicationJSON1 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType `json:"type"`
	Timestamp time.Time                                                                            `json:"timestamp"`
	Amount    float64                                                                              `json:"amount"`
	SegmentID string                                                                               `json:"segment_id"`
}

func (l ListContractsLedgerContractsResponse200ApplicationJSON1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse200ApplicationJSON1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON1) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON1) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON1) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSON1) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type ListContractsContractsResponse200ApplicationJSONLedgerType string

const (
	ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse200ApplicationJSON1 ListContractsContractsResponse200ApplicationJSONLedgerType = "listContracts_ledger_contracts_response_200_ApplicationJSON_1"
	ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse200ApplicationJSON2 ListContractsContractsResponse200ApplicationJSONLedgerType = "listContracts_ledger_contracts_response_200_ApplicationJSON_2"
	ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse200ApplicationJSON3 ListContractsContractsResponse200ApplicationJSONLedgerType = "listContracts_ledger_contracts_response_200_ApplicationJSON_3"
	ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse200ApplicationJSON4 ListContractsContractsResponse200ApplicationJSONLedgerType = "listContracts_ledger_contracts_response_200_ApplicationJSON_4"
	ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse200ApplicationJSON5 ListContractsContractsResponse200ApplicationJSONLedgerType = "listContracts_ledger_contracts_response_200_ApplicationJSON_5"
	ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse200ApplicationJSON6 ListContractsContractsResponse200ApplicationJSONLedgerType = "listContracts_ledger_contracts_response_200_ApplicationJSON_6"
	ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse7                   ListContractsContractsResponse200ApplicationJSONLedgerType = "listContracts_ledger_contracts_response_7"
	ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse8                   ListContractsContractsResponse200ApplicationJSONLedgerType = "listContracts_ledger_contracts_response_8"
	ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse9                   ListContractsContractsResponse200ApplicationJSONLedgerType = "listContracts_ledger_contracts_response_9"
	ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse10                  ListContractsContractsResponse200ApplicationJSONLedgerType = "listContracts_ledger_contracts_response_10"
	ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse11                  ListContractsContractsResponse200ApplicationJSONLedgerType = "listContracts_ledger_contracts_response_11"
	ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse12                  ListContractsContractsResponse200ApplicationJSONLedgerType = "listContracts_ledger_contracts_response_12"
	ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse13                  ListContractsContractsResponse200ApplicationJSONLedgerType = "listContracts_ledger_contracts_response_13"
)

type ListContractsContractsResponse200ApplicationJSONLedger struct {
	ListContractsLedgerContractsResponse200ApplicationJSON1 *ListContractsLedgerContractsResponse200ApplicationJSON1
	ListContractsLedgerContractsResponse200ApplicationJSON2 *ListContractsLedgerContractsResponse200ApplicationJSON2
	ListContractsLedgerContractsResponse200ApplicationJSON3 *ListContractsLedgerContractsResponse200ApplicationJSON3
	ListContractsLedgerContractsResponse200ApplicationJSON4 *ListContractsLedgerContractsResponse200ApplicationJSON4
	ListContractsLedgerContractsResponse200ApplicationJSON5 *ListContractsLedgerContractsResponse200ApplicationJSON5
	ListContractsLedgerContractsResponse200ApplicationJSON6 *ListContractsLedgerContractsResponse200ApplicationJSON6
	ListContractsLedgerContractsResponse7                   *ListContractsLedgerContractsResponse7
	ListContractsLedgerContractsResponse8                   *ListContractsLedgerContractsResponse8
	ListContractsLedgerContractsResponse9                   *ListContractsLedgerContractsResponse9
	ListContractsLedgerContractsResponse10                  *ListContractsLedgerContractsResponse10
	ListContractsLedgerContractsResponse11                  *ListContractsLedgerContractsResponse11
	ListContractsLedgerContractsResponse12                  *ListContractsLedgerContractsResponse12
	ListContractsLedgerContractsResponse13                  *ListContractsLedgerContractsResponse13

	Type ListContractsContractsResponse200ApplicationJSONLedgerType
}

func CreateListContractsContractsResponse200ApplicationJSONLedgerListContractsLedgerContractsResponse200ApplicationJSON1(listContractsLedgerContractsResponse200ApplicationJSON1 ListContractsLedgerContractsResponse200ApplicationJSON1) ListContractsContractsResponse200ApplicationJSONLedger {
	typ := ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse200ApplicationJSON1

	return ListContractsContractsResponse200ApplicationJSONLedger{
		ListContractsLedgerContractsResponse200ApplicationJSON1: &listContractsLedgerContractsResponse200ApplicationJSON1,
		Type: typ,
	}
}

func CreateListContractsContractsResponse200ApplicationJSONLedgerListContractsLedgerContractsResponse200ApplicationJSON2(listContractsLedgerContractsResponse200ApplicationJSON2 ListContractsLedgerContractsResponse200ApplicationJSON2) ListContractsContractsResponse200ApplicationJSONLedger {
	typ := ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse200ApplicationJSON2

	return ListContractsContractsResponse200ApplicationJSONLedger{
		ListContractsLedgerContractsResponse200ApplicationJSON2: &listContractsLedgerContractsResponse200ApplicationJSON2,
		Type: typ,
	}
}

func CreateListContractsContractsResponse200ApplicationJSONLedgerListContractsLedgerContractsResponse200ApplicationJSON3(listContractsLedgerContractsResponse200ApplicationJSON3 ListContractsLedgerContractsResponse200ApplicationJSON3) ListContractsContractsResponse200ApplicationJSONLedger {
	typ := ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse200ApplicationJSON3

	return ListContractsContractsResponse200ApplicationJSONLedger{
		ListContractsLedgerContractsResponse200ApplicationJSON3: &listContractsLedgerContractsResponse200ApplicationJSON3,
		Type: typ,
	}
}

func CreateListContractsContractsResponse200ApplicationJSONLedgerListContractsLedgerContractsResponse200ApplicationJSON4(listContractsLedgerContractsResponse200ApplicationJSON4 ListContractsLedgerContractsResponse200ApplicationJSON4) ListContractsContractsResponse200ApplicationJSONLedger {
	typ := ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse200ApplicationJSON4

	return ListContractsContractsResponse200ApplicationJSONLedger{
		ListContractsLedgerContractsResponse200ApplicationJSON4: &listContractsLedgerContractsResponse200ApplicationJSON4,
		Type: typ,
	}
}

func CreateListContractsContractsResponse200ApplicationJSONLedgerListContractsLedgerContractsResponse200ApplicationJSON5(listContractsLedgerContractsResponse200ApplicationJSON5 ListContractsLedgerContractsResponse200ApplicationJSON5) ListContractsContractsResponse200ApplicationJSONLedger {
	typ := ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse200ApplicationJSON5

	return ListContractsContractsResponse200ApplicationJSONLedger{
		ListContractsLedgerContractsResponse200ApplicationJSON5: &listContractsLedgerContractsResponse200ApplicationJSON5,
		Type: typ,
	}
}

func CreateListContractsContractsResponse200ApplicationJSONLedgerListContractsLedgerContractsResponse200ApplicationJSON6(listContractsLedgerContractsResponse200ApplicationJSON6 ListContractsLedgerContractsResponse200ApplicationJSON6) ListContractsContractsResponse200ApplicationJSONLedger {
	typ := ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse200ApplicationJSON6

	return ListContractsContractsResponse200ApplicationJSONLedger{
		ListContractsLedgerContractsResponse200ApplicationJSON6: &listContractsLedgerContractsResponse200ApplicationJSON6,
		Type: typ,
	}
}

func CreateListContractsContractsResponse200ApplicationJSONLedgerListContractsLedgerContractsResponse7(listContractsLedgerContractsResponse7 ListContractsLedgerContractsResponse7) ListContractsContractsResponse200ApplicationJSONLedger {
	typ := ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse7

	return ListContractsContractsResponse200ApplicationJSONLedger{
		ListContractsLedgerContractsResponse7: &listContractsLedgerContractsResponse7,
		Type:                                  typ,
	}
}

func CreateListContractsContractsResponse200ApplicationJSONLedgerListContractsLedgerContractsResponse8(listContractsLedgerContractsResponse8 ListContractsLedgerContractsResponse8) ListContractsContractsResponse200ApplicationJSONLedger {
	typ := ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse8

	return ListContractsContractsResponse200ApplicationJSONLedger{
		ListContractsLedgerContractsResponse8: &listContractsLedgerContractsResponse8,
		Type:                                  typ,
	}
}

func CreateListContractsContractsResponse200ApplicationJSONLedgerListContractsLedgerContractsResponse9(listContractsLedgerContractsResponse9 ListContractsLedgerContractsResponse9) ListContractsContractsResponse200ApplicationJSONLedger {
	typ := ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse9

	return ListContractsContractsResponse200ApplicationJSONLedger{
		ListContractsLedgerContractsResponse9: &listContractsLedgerContractsResponse9,
		Type:                                  typ,
	}
}

func CreateListContractsContractsResponse200ApplicationJSONLedgerListContractsLedgerContractsResponse10(listContractsLedgerContractsResponse10 ListContractsLedgerContractsResponse10) ListContractsContractsResponse200ApplicationJSONLedger {
	typ := ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse10

	return ListContractsContractsResponse200ApplicationJSONLedger{
		ListContractsLedgerContractsResponse10: &listContractsLedgerContractsResponse10,
		Type:                                   typ,
	}
}

func CreateListContractsContractsResponse200ApplicationJSONLedgerListContractsLedgerContractsResponse11(listContractsLedgerContractsResponse11 ListContractsLedgerContractsResponse11) ListContractsContractsResponse200ApplicationJSONLedger {
	typ := ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse11

	return ListContractsContractsResponse200ApplicationJSONLedger{
		ListContractsLedgerContractsResponse11: &listContractsLedgerContractsResponse11,
		Type:                                   typ,
	}
}

func CreateListContractsContractsResponse200ApplicationJSONLedgerListContractsLedgerContractsResponse12(listContractsLedgerContractsResponse12 ListContractsLedgerContractsResponse12) ListContractsContractsResponse200ApplicationJSONLedger {
	typ := ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse12

	return ListContractsContractsResponse200ApplicationJSONLedger{
		ListContractsLedgerContractsResponse12: &listContractsLedgerContractsResponse12,
		Type:                                   typ,
	}
}

func CreateListContractsContractsResponse200ApplicationJSONLedgerListContractsLedgerContractsResponse13(listContractsLedgerContractsResponse13 ListContractsLedgerContractsResponse13) ListContractsContractsResponse200ApplicationJSONLedger {
	typ := ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse13

	return ListContractsContractsResponse200ApplicationJSONLedger{
		ListContractsLedgerContractsResponse13: &listContractsLedgerContractsResponse13,
		Type:                                   typ,
	}
}

func (u *ListContractsContractsResponse200ApplicationJSONLedger) UnmarshalJSON(data []byte) error {

	var listContractsLedgerContractsResponse7 ListContractsLedgerContractsResponse7 = ListContractsLedgerContractsResponse7{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse7, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse7 = &listContractsLedgerContractsResponse7
		u.Type = ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse7
		return nil
	}

	var listContractsLedgerContractsResponse13 ListContractsLedgerContractsResponse13 = ListContractsLedgerContractsResponse13{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse13, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse13 = &listContractsLedgerContractsResponse13
		u.Type = ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse13
		return nil
	}

	var listContractsLedgerContractsResponse200ApplicationJSON4 ListContractsLedgerContractsResponse200ApplicationJSON4 = ListContractsLedgerContractsResponse200ApplicationJSON4{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse200ApplicationJSON4, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse200ApplicationJSON4 = &listContractsLedgerContractsResponse200ApplicationJSON4
		u.Type = ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse200ApplicationJSON4
		return nil
	}

	var listContractsLedgerContractsResponse200ApplicationJSON1 ListContractsLedgerContractsResponse200ApplicationJSON1 = ListContractsLedgerContractsResponse200ApplicationJSON1{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse200ApplicationJSON1, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse200ApplicationJSON1 = &listContractsLedgerContractsResponse200ApplicationJSON1
		u.Type = ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse200ApplicationJSON1
		return nil
	}

	var listContractsLedgerContractsResponse10 ListContractsLedgerContractsResponse10 = ListContractsLedgerContractsResponse10{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse10, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse10 = &listContractsLedgerContractsResponse10
		u.Type = ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse10
		return nil
	}

	var listContractsLedgerContractsResponse11 ListContractsLedgerContractsResponse11 = ListContractsLedgerContractsResponse11{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse11, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse11 = &listContractsLedgerContractsResponse11
		u.Type = ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse11
		return nil
	}

	var listContractsLedgerContractsResponse12 ListContractsLedgerContractsResponse12 = ListContractsLedgerContractsResponse12{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse12, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse12 = &listContractsLedgerContractsResponse12
		u.Type = ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse12
		return nil
	}

	var listContractsLedgerContractsResponse200ApplicationJSON5 ListContractsLedgerContractsResponse200ApplicationJSON5 = ListContractsLedgerContractsResponse200ApplicationJSON5{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse200ApplicationJSON5, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse200ApplicationJSON5 = &listContractsLedgerContractsResponse200ApplicationJSON5
		u.Type = ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse200ApplicationJSON5
		return nil
	}

	var listContractsLedgerContractsResponse200ApplicationJSON6 ListContractsLedgerContractsResponse200ApplicationJSON6 = ListContractsLedgerContractsResponse200ApplicationJSON6{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse200ApplicationJSON6, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse200ApplicationJSON6 = &listContractsLedgerContractsResponse200ApplicationJSON6
		u.Type = ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse200ApplicationJSON6
		return nil
	}

	var listContractsLedgerContractsResponse200ApplicationJSON3 ListContractsLedgerContractsResponse200ApplicationJSON3 = ListContractsLedgerContractsResponse200ApplicationJSON3{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse200ApplicationJSON3, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse200ApplicationJSON3 = &listContractsLedgerContractsResponse200ApplicationJSON3
		u.Type = ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse200ApplicationJSON3
		return nil
	}

	var listContractsLedgerContractsResponse8 ListContractsLedgerContractsResponse8 = ListContractsLedgerContractsResponse8{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse8, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse8 = &listContractsLedgerContractsResponse8
		u.Type = ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse8
		return nil
	}

	var listContractsLedgerContractsResponse9 ListContractsLedgerContractsResponse9 = ListContractsLedgerContractsResponse9{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse9, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse9 = &listContractsLedgerContractsResponse9
		u.Type = ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse9
		return nil
	}

	var listContractsLedgerContractsResponse200ApplicationJSON2 ListContractsLedgerContractsResponse200ApplicationJSON2 = ListContractsLedgerContractsResponse200ApplicationJSON2{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse200ApplicationJSON2, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse200ApplicationJSON2 = &listContractsLedgerContractsResponse200ApplicationJSON2
		u.Type = ListContractsContractsResponse200ApplicationJSONLedgerTypeListContractsLedgerContractsResponse200ApplicationJSON2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListContractsContractsResponse200ApplicationJSONLedger", string(data))
}

func (u ListContractsContractsResponse200ApplicationJSONLedger) MarshalJSON() ([]byte, error) {
	if u.ListContractsLedgerContractsResponse200ApplicationJSON1 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse200ApplicationJSON1, "", true)
	}

	if u.ListContractsLedgerContractsResponse200ApplicationJSON2 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse200ApplicationJSON2, "", true)
	}

	if u.ListContractsLedgerContractsResponse200ApplicationJSON3 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse200ApplicationJSON3, "", true)
	}

	if u.ListContractsLedgerContractsResponse200ApplicationJSON4 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse200ApplicationJSON4, "", true)
	}

	if u.ListContractsLedgerContractsResponse200ApplicationJSON5 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse200ApplicationJSON5, "", true)
	}

	if u.ListContractsLedgerContractsResponse200ApplicationJSON6 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse200ApplicationJSON6, "", true)
	}

	if u.ListContractsLedgerContractsResponse7 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse7, "", true)
	}

	if u.ListContractsLedgerContractsResponse8 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse8, "", true)
	}

	if u.ListContractsLedgerContractsResponse9 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse9, "", true)
	}

	if u.ListContractsLedgerContractsResponse10 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse10, "", true)
	}

	if u.ListContractsLedgerContractsResponse11 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse11, "", true)
	}

	if u.ListContractsLedgerContractsResponse12 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse12, "", true)
	}

	if u.ListContractsLedgerContractsResponse13 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse13, "", true)
	}

	return nil, errors.New("could not marshal union type ListContractsContractsResponse200ApplicationJSONLedger: all fields are null")
}

type ListContractsContractsResponseCommits struct {
	ID       string                                                                         `json:"id"`
	Contract *ListContractsContractsResponse200ApplicationJSONContract                      `json:"contract,omitempty"`
	Type     ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType `json:"type"`
	Name     *string                                                                        `json:"name,omitempty"`
	// If multiple credits or commits are applicable, the one with the lower priority will apply first.
	Priority *float64                                                                          `json:"priority,omitempty"`
	Product  ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsProduct `json:"product"`
	// The schedule that the customer will gain access to the credits purposed with this commit.
	AccessSchedule *ListContractsContractsResponse200ApplicationJSONAccessSchedule `json:"access_schedule,omitempty"`
	// The schedule that the customer will be invoiced for this commit.
	InvoiceSchedule *ListContractsContractsResponseInvoiceSchedule `json:"invoice_schedule,omitempty"`
	// The contract that this commit will be billed on.
	InvoiceContract       *ListContractsContractsResponseInvoiceContract `json:"invoice_contract,omitempty"`
	RolledOverFrom        *ListContractsContractsResponseRolledOverFrom  `json:"rolled_over_from,omitempty"`
	Description           *string                                        `json:"description,omitempty"`
	RolloverFraction      *float64                                       `json:"rollover_fraction,omitempty"`
	ApplicableProductIds  []string                                       `json:"applicable_product_ids,omitempty"`
	ApplicableProductTags []string                                       `json:"applicable_product_tags,omitempty"`
	ApplicableContractIds []string                                       `json:"applicable_contract_ids,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// (DEPRECATED) Use access_schedule + invoice_schedule instead.
	Amount *float64 `json:"amount,omitempty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string `json:"salesforce_opportunity_id,omitempty"`
	// A list of ordered events that impact the balance of a commit. For example, an invoice deduction or a rollover.
	Ledger       []ListContractsContractsResponse200ApplicationJSONLedger `json:"ledger,omitempty"`
	CustomFields map[string]string                                        `json:"custom_fields,omitempty"`
}

func (o *ListContractsContractsResponseCommits) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponseCommits) GetContract() *ListContractsContractsResponse200ApplicationJSONContract {
	if o == nil {
		return nil
	}
	return o.Contract
}

func (o *ListContractsContractsResponseCommits) GetType() ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType {
	if o == nil {
		return ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsType("")
	}
	return o.Type
}

func (o *ListContractsContractsResponseCommits) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListContractsContractsResponseCommits) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *ListContractsContractsResponseCommits) GetProduct() ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsProduct {
	if o == nil {
		return ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsProduct{}
	}
	return o.Product
}

func (o *ListContractsContractsResponseCommits) GetAccessSchedule() *ListContractsContractsResponse200ApplicationJSONAccessSchedule {
	if o == nil {
		return nil
	}
	return o.AccessSchedule
}

func (o *ListContractsContractsResponseCommits) GetInvoiceSchedule() *ListContractsContractsResponseInvoiceSchedule {
	if o == nil {
		return nil
	}
	return o.InvoiceSchedule
}

func (o *ListContractsContractsResponseCommits) GetInvoiceContract() *ListContractsContractsResponseInvoiceContract {
	if o == nil {
		return nil
	}
	return o.InvoiceContract
}

func (o *ListContractsContractsResponseCommits) GetRolledOverFrom() *ListContractsContractsResponseRolledOverFrom {
	if o == nil {
		return nil
	}
	return o.RolledOverFrom
}

func (o *ListContractsContractsResponseCommits) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListContractsContractsResponseCommits) GetRolloverFraction() *float64 {
	if o == nil {
		return nil
	}
	return o.RolloverFraction
}

func (o *ListContractsContractsResponseCommits) GetApplicableProductIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductIds
}

func (o *ListContractsContractsResponseCommits) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *ListContractsContractsResponseCommits) GetApplicableContractIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableContractIds
}

func (o *ListContractsContractsResponseCommits) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *ListContractsContractsResponseCommits) GetAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.Amount
}

func (o *ListContractsContractsResponseCommits) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *ListContractsContractsResponseCommits) GetLedger() []ListContractsContractsResponse200ApplicationJSONLedger {
	if o == nil {
		return nil
	}
	return o.Ledger
}

func (o *ListContractsContractsResponseCommits) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyContract struct {
	ID string `json:"id"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyContract) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType string

const (
	ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsTypeCredit ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType = "CREDIT"
)

func (e ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType) ToPointer() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType {
	return &e
}
func (e *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT":
		*e = ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType: %v", v)
	}
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsScheduleItems struct {
	ID           string    `json:"id"`
	Amount       float64   `json:"amount"`
	StartingAt   time.Time `json:"starting_at"`
	EndingBefore time.Time `json:"ending_before"`
}

func (l ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsScheduleItems) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsScheduleItems) GetEndingBefore() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.EndingBefore
}

// ListContractsContractsResponse200ApplicationJSONResponseBodyAccessSchedule - The schedule that the customer will gain access to the credits.
type ListContractsContractsResponse200ApplicationJSONResponseBodyAccessSchedule struct {
	CreditType    *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsCreditType     `json:"credit_type,omitempty"`
	ScheduleItems []ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsScheduleItems `json:"schedule_items"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyAccessSchedule) GetCreditType() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyAccessSchedule) GetScheduleItems() []ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsScheduleItems {
	if o == nil {
		return []ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsScheduleItems{}
	}
	return o.ScheduleItems
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits6Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits6TypeCreditManual ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits6Type = "CREDIT_MANUAL"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits6Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits6Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits6Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_MANUAL":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits6Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits6Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBody6 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits6Type `json:"type"`
	Timestamp time.Time                                                                                    `json:"timestamp"`
	Amount    float64                                                                                      `json:"amount"`
	Reason    string                                                                                       `json:"reason"`
}

func (l ListContractsLedgerContractsResponse200ApplicationJSONResponseBody6) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody6) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody6) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits6Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits6Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody6) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody6) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody6) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits5Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits5TypeCreditCredited ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits5Type = "CREDIT_CREDITED"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits5Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits5Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits5Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_CREDITED":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits5Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits5Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBody5 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits5Type `json:"type"`
	Timestamp time.Time                                                                                    `json:"timestamp"`
	Amount    float64                                                                                      `json:"amount"`
	SegmentID string                                                                                       `json:"segment_id"`
	InvoiceID string                                                                                       `json:"invoice_id"`
}

func (l ListContractsLedgerContractsResponse200ApplicationJSONResponseBody5) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody5) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody5) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits5Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits5Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody5) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody5) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody5) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody5) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits4Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits4TypeCreditCanceled ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits4Type = "CREDIT_CANCELED"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits4Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits4Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits4Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_CANCELED":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits4Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits4Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBody4 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits4Type `json:"type"`
	Timestamp time.Time                                                                                    `json:"timestamp"`
	Amount    float64                                                                                      `json:"amount"`
	SegmentID string                                                                                       `json:"segment_id"`
	InvoiceID string                                                                                       `json:"invoice_id"`
}

func (l ListContractsLedgerContractsResponse200ApplicationJSONResponseBody4) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody4) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody4) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits4Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits4Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody4) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody4) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody4) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody4) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits3Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits3TypeCreditExpiration ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits3Type = "CREDIT_EXPIRATION"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits3Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits3Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits3Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_EXPIRATION":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits3Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits3Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBody3 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits3Type `json:"type"`
	Timestamp time.Time                                                                                    `json:"timestamp"`
	Amount    float64                                                                                      `json:"amount"`
	SegmentID string                                                                                       `json:"segment_id"`
}

func (l ListContractsLedgerContractsResponse200ApplicationJSONResponseBody3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody3) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits3Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits3Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody3) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody3) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody3) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits2Type string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits2TypeCreditAutomatedInvoiceDeduction ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits2Type = "CREDIT_AUTOMATED_INVOICE_DEDUCTION"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits2Type) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits2Type {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits2Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_AUTOMATED_INVOICE_DEDUCTION":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits2Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits2Type: %v", v)
	}
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBody2 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits2Type `json:"type"`
	Timestamp time.Time                                                                                    `json:"timestamp"`
	Amount    float64                                                                                      `json:"amount"`
	SegmentID string                                                                                       `json:"segment_id"`
	InvoiceID string                                                                                       `json:"invoice_id"`
}

func (l ListContractsLedgerContractsResponse200ApplicationJSONResponseBody2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody2) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits2Type {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCredits2Type("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody2) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody2) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody2) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody2) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType string

const (
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsTypeCreditSegmentStart ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType = "CREDIT_SEGMENT_START"
)

func (e ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType) ToPointer() *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType {
	return &e
}
func (e *ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CREDIT_SEGMENT_START":
		*e = ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType: %v", v)
	}
}

type ListContractsLedgerContractsResponse200ApplicationJSONResponseBody1 struct {
	Type      ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType `json:"type"`
	Timestamp time.Time                                                                                   `json:"timestamp"`
	Amount    float64                                                                                     `json:"amount"`
	SegmentID string                                                                                      `json:"segment_id"`
}

func (l ListContractsLedgerContractsResponse200ApplicationJSONResponseBody1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody1) GetType() ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType {
	if o == nil {
		return ListContractsLedgerContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType("")
	}
	return o.Type
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody1) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody1) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody1) GetSegmentID() string {
	if o == nil {
		return ""
	}
	return o.SegmentID
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerType string

const (
	ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerTypeListContractsLedgerContractsResponse200ApplicationJSONResponseBody1 ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerType = "listContracts_ledger_contracts_response_200_ApplicationJSON_responseBody_1"
	ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerTypeListContractsLedgerContractsResponse200ApplicationJSONResponseBody2 ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerType = "listContracts_ledger_contracts_response_200_ApplicationJSON_responseBody_2"
	ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerTypeListContractsLedgerContractsResponse200ApplicationJSONResponseBody3 ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerType = "listContracts_ledger_contracts_response_200_ApplicationJSON_responseBody_3"
	ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerTypeListContractsLedgerContractsResponse200ApplicationJSONResponseBody4 ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerType = "listContracts_ledger_contracts_response_200_ApplicationJSON_responseBody_4"
	ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerTypeListContractsLedgerContractsResponse200ApplicationJSONResponseBody5 ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerType = "listContracts_ledger_contracts_response_200_ApplicationJSON_responseBody_5"
	ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerTypeListContractsLedgerContractsResponse200ApplicationJSONResponseBody6 ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerType = "listContracts_ledger_contracts_response_200_ApplicationJSON_responseBody_6"
)

type ListContractsContractsResponse200ApplicationJSONResponseBodyLedger struct {
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBody1 *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody1
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBody2 *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody2
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBody3 *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody3
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBody4 *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody4
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBody5 *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody5
	ListContractsLedgerContractsResponse200ApplicationJSONResponseBody6 *ListContractsLedgerContractsResponse200ApplicationJSONResponseBody6

	Type ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerType
}

func CreateListContractsContractsResponse200ApplicationJSONResponseBodyLedgerListContractsLedgerContractsResponse200ApplicationJSONResponseBody1(listContractsLedgerContractsResponse200ApplicationJSONResponseBody1 ListContractsLedgerContractsResponse200ApplicationJSONResponseBody1) ListContractsContractsResponse200ApplicationJSONResponseBodyLedger {
	typ := ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerTypeListContractsLedgerContractsResponse200ApplicationJSONResponseBody1

	return ListContractsContractsResponse200ApplicationJSONResponseBodyLedger{
		ListContractsLedgerContractsResponse200ApplicationJSONResponseBody1: &listContractsLedgerContractsResponse200ApplicationJSONResponseBody1,
		Type: typ,
	}
}

func CreateListContractsContractsResponse200ApplicationJSONResponseBodyLedgerListContractsLedgerContractsResponse200ApplicationJSONResponseBody2(listContractsLedgerContractsResponse200ApplicationJSONResponseBody2 ListContractsLedgerContractsResponse200ApplicationJSONResponseBody2) ListContractsContractsResponse200ApplicationJSONResponseBodyLedger {
	typ := ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerTypeListContractsLedgerContractsResponse200ApplicationJSONResponseBody2

	return ListContractsContractsResponse200ApplicationJSONResponseBodyLedger{
		ListContractsLedgerContractsResponse200ApplicationJSONResponseBody2: &listContractsLedgerContractsResponse200ApplicationJSONResponseBody2,
		Type: typ,
	}
}

func CreateListContractsContractsResponse200ApplicationJSONResponseBodyLedgerListContractsLedgerContractsResponse200ApplicationJSONResponseBody3(listContractsLedgerContractsResponse200ApplicationJSONResponseBody3 ListContractsLedgerContractsResponse200ApplicationJSONResponseBody3) ListContractsContractsResponse200ApplicationJSONResponseBodyLedger {
	typ := ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerTypeListContractsLedgerContractsResponse200ApplicationJSONResponseBody3

	return ListContractsContractsResponse200ApplicationJSONResponseBodyLedger{
		ListContractsLedgerContractsResponse200ApplicationJSONResponseBody3: &listContractsLedgerContractsResponse200ApplicationJSONResponseBody3,
		Type: typ,
	}
}

func CreateListContractsContractsResponse200ApplicationJSONResponseBodyLedgerListContractsLedgerContractsResponse200ApplicationJSONResponseBody4(listContractsLedgerContractsResponse200ApplicationJSONResponseBody4 ListContractsLedgerContractsResponse200ApplicationJSONResponseBody4) ListContractsContractsResponse200ApplicationJSONResponseBodyLedger {
	typ := ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerTypeListContractsLedgerContractsResponse200ApplicationJSONResponseBody4

	return ListContractsContractsResponse200ApplicationJSONResponseBodyLedger{
		ListContractsLedgerContractsResponse200ApplicationJSONResponseBody4: &listContractsLedgerContractsResponse200ApplicationJSONResponseBody4,
		Type: typ,
	}
}

func CreateListContractsContractsResponse200ApplicationJSONResponseBodyLedgerListContractsLedgerContractsResponse200ApplicationJSONResponseBody5(listContractsLedgerContractsResponse200ApplicationJSONResponseBody5 ListContractsLedgerContractsResponse200ApplicationJSONResponseBody5) ListContractsContractsResponse200ApplicationJSONResponseBodyLedger {
	typ := ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerTypeListContractsLedgerContractsResponse200ApplicationJSONResponseBody5

	return ListContractsContractsResponse200ApplicationJSONResponseBodyLedger{
		ListContractsLedgerContractsResponse200ApplicationJSONResponseBody5: &listContractsLedgerContractsResponse200ApplicationJSONResponseBody5,
		Type: typ,
	}
}

func CreateListContractsContractsResponse200ApplicationJSONResponseBodyLedgerListContractsLedgerContractsResponse200ApplicationJSONResponseBody6(listContractsLedgerContractsResponse200ApplicationJSONResponseBody6 ListContractsLedgerContractsResponse200ApplicationJSONResponseBody6) ListContractsContractsResponse200ApplicationJSONResponseBodyLedger {
	typ := ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerTypeListContractsLedgerContractsResponse200ApplicationJSONResponseBody6

	return ListContractsContractsResponse200ApplicationJSONResponseBodyLedger{
		ListContractsLedgerContractsResponse200ApplicationJSONResponseBody6: &listContractsLedgerContractsResponse200ApplicationJSONResponseBody6,
		Type: typ,
	}
}

func (u *ListContractsContractsResponse200ApplicationJSONResponseBodyLedger) UnmarshalJSON(data []byte) error {

	var listContractsLedgerContractsResponse200ApplicationJSONResponseBody1 ListContractsLedgerContractsResponse200ApplicationJSONResponseBody1 = ListContractsLedgerContractsResponse200ApplicationJSONResponseBody1{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse200ApplicationJSONResponseBody1, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse200ApplicationJSONResponseBody1 = &listContractsLedgerContractsResponse200ApplicationJSONResponseBody1
		u.Type = ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerTypeListContractsLedgerContractsResponse200ApplicationJSONResponseBody1
		return nil
	}

	var listContractsLedgerContractsResponse200ApplicationJSONResponseBody3 ListContractsLedgerContractsResponse200ApplicationJSONResponseBody3 = ListContractsLedgerContractsResponse200ApplicationJSONResponseBody3{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse200ApplicationJSONResponseBody3, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse200ApplicationJSONResponseBody3 = &listContractsLedgerContractsResponse200ApplicationJSONResponseBody3
		u.Type = ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerTypeListContractsLedgerContractsResponse200ApplicationJSONResponseBody3
		return nil
	}

	var listContractsLedgerContractsResponse200ApplicationJSONResponseBody6 ListContractsLedgerContractsResponse200ApplicationJSONResponseBody6 = ListContractsLedgerContractsResponse200ApplicationJSONResponseBody6{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse200ApplicationJSONResponseBody6, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse200ApplicationJSONResponseBody6 = &listContractsLedgerContractsResponse200ApplicationJSONResponseBody6
		u.Type = ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerTypeListContractsLedgerContractsResponse200ApplicationJSONResponseBody6
		return nil
	}

	var listContractsLedgerContractsResponse200ApplicationJSONResponseBody2 ListContractsLedgerContractsResponse200ApplicationJSONResponseBody2 = ListContractsLedgerContractsResponse200ApplicationJSONResponseBody2{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse200ApplicationJSONResponseBody2, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse200ApplicationJSONResponseBody2 = &listContractsLedgerContractsResponse200ApplicationJSONResponseBody2
		u.Type = ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerTypeListContractsLedgerContractsResponse200ApplicationJSONResponseBody2
		return nil
	}

	var listContractsLedgerContractsResponse200ApplicationJSONResponseBody4 ListContractsLedgerContractsResponse200ApplicationJSONResponseBody4 = ListContractsLedgerContractsResponse200ApplicationJSONResponseBody4{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse200ApplicationJSONResponseBody4, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse200ApplicationJSONResponseBody4 = &listContractsLedgerContractsResponse200ApplicationJSONResponseBody4
		u.Type = ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerTypeListContractsLedgerContractsResponse200ApplicationJSONResponseBody4
		return nil
	}

	var listContractsLedgerContractsResponse200ApplicationJSONResponseBody5 ListContractsLedgerContractsResponse200ApplicationJSONResponseBody5 = ListContractsLedgerContractsResponse200ApplicationJSONResponseBody5{}
	if err := utils.UnmarshalJSON(data, &listContractsLedgerContractsResponse200ApplicationJSONResponseBody5, "", true, true); err == nil {
		u.ListContractsLedgerContractsResponse200ApplicationJSONResponseBody5 = &listContractsLedgerContractsResponse200ApplicationJSONResponseBody5
		u.Type = ListContractsContractsResponse200ApplicationJSONResponseBodyLedgerTypeListContractsLedgerContractsResponse200ApplicationJSONResponseBody5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ListContractsContractsResponse200ApplicationJSONResponseBodyLedger", string(data))
}

func (u ListContractsContractsResponse200ApplicationJSONResponseBodyLedger) MarshalJSON() ([]byte, error) {
	if u.ListContractsLedgerContractsResponse200ApplicationJSONResponseBody1 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse200ApplicationJSONResponseBody1, "", true)
	}

	if u.ListContractsLedgerContractsResponse200ApplicationJSONResponseBody2 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse200ApplicationJSONResponseBody2, "", true)
	}

	if u.ListContractsLedgerContractsResponse200ApplicationJSONResponseBody3 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse200ApplicationJSONResponseBody3, "", true)
	}

	if u.ListContractsLedgerContractsResponse200ApplicationJSONResponseBody4 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse200ApplicationJSONResponseBody4, "", true)
	}

	if u.ListContractsLedgerContractsResponse200ApplicationJSONResponseBody5 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse200ApplicationJSONResponseBody5, "", true)
	}

	if u.ListContractsLedgerContractsResponse200ApplicationJSONResponseBody6 != nil {
		return utils.MarshalJSON(u.ListContractsLedgerContractsResponse200ApplicationJSONResponseBody6, "", true)
	}

	return nil, errors.New("could not marshal union type ListContractsContractsResponse200ApplicationJSONResponseBodyLedger: all fields are null")
}

type ListContractsContractsResponseCredits struct {
	ID       string                                                                                `json:"id"`
	Contract *ListContractsContractsResponse200ApplicationJSONResponseBodyContract                 `json:"contract,omitempty"`
	Type     ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType `json:"type"`
	Name     *string                                                                               `json:"name,omitempty"`
	// If multiple credits or commits are applicable, the one with the lower priority will apply first.
	Priority *float64                                                                                 `json:"priority,omitempty"`
	Product  ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsProduct `json:"product"`
	// The schedule that the customer will gain access to the credits.
	AccessSchedule        *ListContractsContractsResponse200ApplicationJSONResponseBodyAccessSchedule `json:"access_schedule,omitempty"`
	Description           *string                                                                     `json:"description,omitempty"`
	ApplicableProductIds  []string                                                                    `json:"applicable_product_ids,omitempty"`
	ApplicableProductTags []string                                                                    `json:"applicable_product_tags,omitempty"`
	ApplicableContractIds []string                                                                    `json:"applicable_contract_ids,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string `json:"salesforce_opportunity_id,omitempty"`
	// A list of ordered events that impact the balance of a credit. For example, an invoice deduction or an expiration.
	Ledger       []ListContractsContractsResponse200ApplicationJSONResponseBodyLedger `json:"ledger,omitempty"`
	CustomFields map[string]string                                                    `json:"custom_fields,omitempty"`
}

func (o *ListContractsContractsResponseCredits) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponseCredits) GetContract() *ListContractsContractsResponse200ApplicationJSONResponseBodyContract {
	if o == nil {
		return nil
	}
	return o.Contract
}

func (o *ListContractsContractsResponseCredits) GetType() ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType {
	if o == nil {
		return ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsType("")
	}
	return o.Type
}

func (o *ListContractsContractsResponseCredits) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListContractsContractsResponseCredits) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *ListContractsContractsResponseCredits) GetProduct() ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsProduct {
	if o == nil {
		return ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsCreditsProduct{}
	}
	return o.Product
}

func (o *ListContractsContractsResponseCredits) GetAccessSchedule() *ListContractsContractsResponse200ApplicationJSONResponseBodyAccessSchedule {
	if o == nil {
		return nil
	}
	return o.AccessSchedule
}

func (o *ListContractsContractsResponseCredits) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListContractsContractsResponseCredits) GetApplicableProductIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductIds
}

func (o *ListContractsContractsResponseCredits) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *ListContractsContractsResponseCredits) GetApplicableContractIds() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableContractIds
}

func (o *ListContractsContractsResponseCredits) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *ListContractsContractsResponseCredits) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *ListContractsContractsResponseCredits) GetLedger() []ListContractsContractsResponse200ApplicationJSONResponseBodyLedger {
	if o == nil {
		return nil
	}
	return o.Ledger
}

func (o *ListContractsContractsResponseCredits) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ListContractsContractsResponseOverrideSpecifiers struct {
	ProductID               *string           `json:"product_id,omitempty"`
	ProductTags             []string          `json:"product_tags,omitempty"`
	PricingGroupValues      map[string]string `json:"pricing_group_values,omitempty"`
	PresentationGroupValues map[string]string `json:"presentation_group_values,omitempty"`
}

func (o *ListContractsContractsResponseOverrideSpecifiers) GetProductID() *string {
	if o == nil {
		return nil
	}
	return o.ProductID
}

func (o *ListContractsContractsResponseOverrideSpecifiers) GetProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ProductTags
}

func (o *ListContractsContractsResponseOverrideSpecifiers) GetPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PricingGroupValues
}

func (o *ListContractsContractsResponseOverrideSpecifiers) GetPresentationGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PresentationGroupValues
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesType string

const (
	ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesTypeOverwrite  ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesType = "OVERWRITE"
	ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesTypeMultiplier ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesType = "MULTIPLIER"
	ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesTypeTiered     ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesType = "TIERED"
)

func (e ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesType) ToPointer() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesType {
	return &e
}
func (e *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OVERWRITE":
		fallthrough
	case "MULTIPLIER":
		fallthrough
	case "TIERED":
		*e = ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesType: %v", v)
	}
}

type ListContractsContractsResponse200ApplicationJSONRateType string

const (
	ListContractsContractsResponse200ApplicationJSONRateTypeFlatUpper         ListContractsContractsResponse200ApplicationJSONRateType = "FLAT"
	ListContractsContractsResponse200ApplicationJSONRateTypeFlatLower         ListContractsContractsResponse200ApplicationJSONRateType = "flat"
	ListContractsContractsResponse200ApplicationJSONRateTypePercentageUpper   ListContractsContractsResponse200ApplicationJSONRateType = "PERCENTAGE"
	ListContractsContractsResponse200ApplicationJSONRateTypePercentageLower   ListContractsContractsResponse200ApplicationJSONRateType = "percentage"
	ListContractsContractsResponse200ApplicationJSONRateTypeSubscriptionUpper ListContractsContractsResponse200ApplicationJSONRateType = "SUBSCRIPTION"
	ListContractsContractsResponse200ApplicationJSONRateTypeSubscriptionLower ListContractsContractsResponse200ApplicationJSONRateType = "subscription"
	ListContractsContractsResponse200ApplicationJSONRateTypeTieredUpper       ListContractsContractsResponse200ApplicationJSONRateType = "TIERED"
	ListContractsContractsResponse200ApplicationJSONRateTypeTieredLower       ListContractsContractsResponse200ApplicationJSONRateType = "tiered"
	ListContractsContractsResponse200ApplicationJSONRateTypeCustomUpper       ListContractsContractsResponse200ApplicationJSONRateType = "CUSTOM"
	ListContractsContractsResponse200ApplicationJSONRateTypeCustomLower       ListContractsContractsResponse200ApplicationJSONRateType = "custom"
)

func (e ListContractsContractsResponse200ApplicationJSONRateType) ToPointer() *ListContractsContractsResponse200ApplicationJSONRateType {
	return &e
}
func (e *ListContractsContractsResponse200ApplicationJSONRateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FLAT":
		fallthrough
	case "flat":
		fallthrough
	case "PERCENTAGE":
		fallthrough
	case "percentage":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "subscription":
		fallthrough
	case "TIERED":
		fallthrough
	case "tiered":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "custom":
		*e = ListContractsContractsResponse200ApplicationJSONRateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsContractsResponse200ApplicationJSONRateType: %v", v)
	}
}

type ListContractsContractsResponse200ApplicationJSONTiers struct {
	Size  *float64 `json:"size,omitempty"`
	Price float64  `json:"price"`
}

func (o *ListContractsContractsResponse200ApplicationJSONTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *ListContractsContractsResponse200ApplicationJSONTiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsResponseOverwriteRate struct {
	RateType ListContractsContractsResponse200ApplicationJSONRateType `json:"rate_type"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price *float64 `json:"price,omitempty"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity *float64 `json:"quantity,omitempty"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type.
	IsProrated *bool `json:"is_prorated,omitempty"`
	// Only set for TIERED rate_type.
	Tiers []ListContractsContractsResponse200ApplicationJSONTiers `json:"tiers,omitempty"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate processors.
	CustomRate map[string]any                                                                                 `json:"custom_rate,omitempty"`
	CreditType *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesCreditType `json:"credit_type,omitempty"`
}

func (o *ListContractsContractsResponseOverwriteRate) GetRateType() ListContractsContractsResponse200ApplicationJSONRateType {
	if o == nil {
		return ListContractsContractsResponse200ApplicationJSONRateType("")
	}
	return o.RateType
}

func (o *ListContractsContractsResponseOverwriteRate) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *ListContractsContractsResponseOverwriteRate) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *ListContractsContractsResponseOverwriteRate) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *ListContractsContractsResponseOverwriteRate) GetTiers() []ListContractsContractsResponse200ApplicationJSONTiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *ListContractsContractsResponseOverwriteRate) GetCustomRate() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomRate
}

func (o *ListContractsContractsResponseOverwriteRate) GetCreditType() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

type ListContractsContractsResponseOverrideTiers struct {
	Size       *float64 `json:"size,omitempty"`
	Multiplier float64  `json:"multiplier"`
}

func (o *ListContractsContractsResponseOverrideTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *ListContractsContractsResponseOverrideTiers) GetMultiplier() float64 {
	if o == nil {
		return 0.0
	}
	return o.Multiplier
}

type ListContractsContractsResponseRateType string

const (
	ListContractsContractsResponseRateTypeFlatUpper         ListContractsContractsResponseRateType = "FLAT"
	ListContractsContractsResponseRateTypeFlatLower         ListContractsContractsResponseRateType = "flat"
	ListContractsContractsResponseRateTypePercentageUpper   ListContractsContractsResponseRateType = "PERCENTAGE"
	ListContractsContractsResponseRateTypePercentageLower   ListContractsContractsResponseRateType = "percentage"
	ListContractsContractsResponseRateTypeSubscriptionUpper ListContractsContractsResponseRateType = "SUBSCRIPTION"
	ListContractsContractsResponseRateTypeSubscriptionLower ListContractsContractsResponseRateType = "subscription"
	ListContractsContractsResponseRateTypeTieredUpper       ListContractsContractsResponseRateType = "TIERED"
	ListContractsContractsResponseRateTypeTieredLower       ListContractsContractsResponseRateType = "tiered"
	ListContractsContractsResponseRateTypeCustomUpper       ListContractsContractsResponseRateType = "CUSTOM"
	ListContractsContractsResponseRateTypeCustomLower       ListContractsContractsResponseRateType = "custom"
)

func (e ListContractsContractsResponseRateType) ToPointer() *ListContractsContractsResponseRateType {
	return &e
}
func (e *ListContractsContractsResponseRateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FLAT":
		fallthrough
	case "flat":
		fallthrough
	case "PERCENTAGE":
		fallthrough
	case "percentage":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "subscription":
		fallthrough
	case "TIERED":
		fallthrough
	case "tiered":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "custom":
		*e = ListContractsContractsResponseRateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsContractsResponseRateType: %v", v)
	}
}

type ListContractsContractsResponseTiers struct {
	Size  *float64 `json:"size,omitempty"`
	Price float64  `json:"price"`
}

func (o *ListContractsContractsResponseTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *ListContractsContractsResponseTiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type ListContractsContractsResponseCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListContractsContractsResponseCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListContractsContractsResponseCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsResponseOverrides struct {
	ID                    string                                                                                      `json:"id"`
	Product               *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesProduct `json:"product,omitempty"`
	ApplicableProductTags []string                                                                                    `json:"applicable_product_tags,omitempty"`
	OverrideSpecifiers    []ListContractsContractsResponseOverrideSpecifiers                                          `json:"override_specifiers,omitempty"`
	StartingAt            time.Time                                                                                   `json:"starting_at"`
	EndingBefore          *time.Time                                                                                  `json:"ending_before,omitempty"`
	Entitled              *bool                                                                                       `json:"entitled,omitempty"`
	Type                  *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesType    `json:"type,omitempty"`
	Priority              *float64                                                                                    `json:"priority,omitempty"`
	Multiplier            *float64                                                                                    `json:"multiplier,omitempty"`
	OverwriteRate         *ListContractsContractsResponseOverwriteRate                                                `json:"overwrite_rate,omitempty"`
	OverrideTiers         []ListContractsContractsResponseOverrideTiers                                               `json:"override_tiers,omitempty"`
	RateType              *ListContractsContractsResponseRateType                                                     `json:"rate_type,omitempty"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price *float64 `json:"price,omitempty"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity *float64 `json:"quantity,omitempty"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type.
	IsProrated *bool `json:"is_prorated,omitempty"`
	// Only set for TIERED rate_type.
	Tiers []ListContractsContractsResponseTiers `json:"tiers,omitempty"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate processors.
	Value      map[string]any                            `json:"value,omitempty"`
	CreditType *ListContractsContractsResponseCreditType `json:"credit_type,omitempty"`
}

func (l ListContractsContractsResponseOverrides) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsResponseOverrides) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsResponseOverrides) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponseOverrides) GetProduct() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesProduct {
	if o == nil {
		return nil
	}
	return o.Product
}

func (o *ListContractsContractsResponseOverrides) GetApplicableProductTags() []string {
	if o == nil {
		return nil
	}
	return o.ApplicableProductTags
}

func (o *ListContractsContractsResponseOverrides) GetOverrideSpecifiers() []ListContractsContractsResponseOverrideSpecifiers {
	if o == nil {
		return nil
	}
	return o.OverrideSpecifiers
}

func (o *ListContractsContractsResponseOverrides) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *ListContractsContractsResponseOverrides) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *ListContractsContractsResponseOverrides) GetEntitled() *bool {
	if o == nil {
		return nil
	}
	return o.Entitled
}

func (o *ListContractsContractsResponseOverrides) GetType() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsOverridesType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ListContractsContractsResponseOverrides) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *ListContractsContractsResponseOverrides) GetMultiplier() *float64 {
	if o == nil {
		return nil
	}
	return o.Multiplier
}

func (o *ListContractsContractsResponseOverrides) GetOverwriteRate() *ListContractsContractsResponseOverwriteRate {
	if o == nil {
		return nil
	}
	return o.OverwriteRate
}

func (o *ListContractsContractsResponseOverrides) GetOverrideTiers() []ListContractsContractsResponseOverrideTiers {
	if o == nil {
		return nil
	}
	return o.OverrideTiers
}

func (o *ListContractsContractsResponseOverrides) GetRateType() *ListContractsContractsResponseRateType {
	if o == nil {
		return nil
	}
	return o.RateType
}

func (o *ListContractsContractsResponseOverrides) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *ListContractsContractsResponseOverrides) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *ListContractsContractsResponseOverrides) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *ListContractsContractsResponseOverrides) GetTiers() []ListContractsContractsResponseTiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *ListContractsContractsResponseOverrides) GetValue() map[string]any {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *ListContractsContractsResponseOverrides) GetCreditType() *ListContractsContractsResponseCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsScheduleItems struct {
	ID        string    `json:"id"`
	InvoiceID string    `json:"invoice_id"`
	Amount    float64   `json:"amount"`
	UnitPrice float64   `json:"unit_price"`
	Quantity  float64   `json:"quantity"`
	Timestamp time.Time `json:"timestamp"`
}

func (l ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsScheduleItems) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsScheduleItems) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsScheduleItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsScheduleItems) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

type ListContractsContractsResponse200ApplicationJSONSchedule struct {
	CreditType    *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsCreditType     `json:"credit_type,omitempty"`
	ScheduleItems []ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsScheduleItems `json:"schedule_items,omitempty"`
}

func (o *ListContractsContractsResponse200ApplicationJSONSchedule) GetCreditType() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *ListContractsContractsResponse200ApplicationJSONSchedule) GetScheduleItems() []ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsScheduleItems {
	if o == nil {
		return nil
	}
	return o.ScheduleItems
}

type ListContractsContractsResponseDiscounts struct {
	ID       string                                                                                     `json:"id"`
	Product  ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsProduct `json:"product"`
	Schedule ListContractsContractsResponse200ApplicationJSONSchedule                                   `json:"schedule"`
	Name     *string                                                                                    `json:"name,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
}

func (o *ListContractsContractsResponseDiscounts) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponseDiscounts) GetProduct() ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsProduct {
	if o == nil {
		return ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsDiscountsProduct{}
	}
	return o.Product
}

func (o *ListContractsContractsResponseDiscounts) GetSchedule() ListContractsContractsResponse200ApplicationJSONSchedule {
	if o == nil {
		return ListContractsContractsResponse200ApplicationJSONSchedule{}
	}
	return o.Schedule
}

func (o *ListContractsContractsResponseDiscounts) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListContractsContractsResponseDiscounts) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

type ListContractsContractsResponseProfessionalServices struct {
	ID          string  `json:"id"`
	Description *string `json:"description,omitempty"`
	ProductID   string  `json:"product_id"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
	// Unit price for the charge. Will be multiplied by quantity to determine the amount and must be specified.
	UnitPrice float64 `json:"unit_price"`
	// Quantity for the charge. Will be multiplied by unit_price to determine the amount.
	Quantity float64 `json:"quantity"`
	// Maximum amount for the term.
	MaxAmount    float64           `json:"max_amount"`
	CustomFields map[string]string `json:"custom_fields,omitempty"`
}

func (o *ListContractsContractsResponseProfessionalServices) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponseProfessionalServices) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ListContractsContractsResponseProfessionalServices) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *ListContractsContractsResponseProfessionalServices) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *ListContractsContractsResponseProfessionalServices) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *ListContractsContractsResponseProfessionalServices) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *ListContractsContractsResponseProfessionalServices) GetMaxAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.MaxAmount
}

func (o *ListContractsContractsResponseProfessionalServices) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesProduct struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesProduct) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesProduct) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems struct {
	ID        string    `json:"id"`
	InvoiceID string    `json:"invoice_id"`
	Amount    float64   `json:"amount"`
	UnitPrice float64   `json:"unit_price"`
	Quantity  float64   `json:"quantity"`
	Timestamp time.Time `json:"timestamp"`
}

func (l ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems) GetAmount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Amount
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems) GetUnitPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.UnitPrice
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems) GetTimestamp() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Timestamp
}

type ListContractsContractsResponse200ApplicationJSONResponseBodySchedule struct {
	CreditType    *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesCreditType     `json:"credit_type,omitempty"`
	ScheduleItems []ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems `json:"schedule_items,omitempty"`
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodySchedule) GetCreditType() *ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

func (o *ListContractsContractsResponse200ApplicationJSONResponseBodySchedule) GetScheduleItems() []ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesScheduleItems {
	if o == nil {
		return nil
	}
	return o.ScheduleItems
}

type ListContractsContractsResponseScheduledCharges struct {
	ID       string                                                                                            `json:"id"`
	Product  ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesProduct `json:"product"`
	Schedule ListContractsContractsResponse200ApplicationJSONResponseBodySchedule                              `json:"schedule"`
	// displayed on invoices
	Name *string `json:"name,omitempty"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string           `json:"netsuite_sales_order_id,omitempty"`
	CustomFields         map[string]string `json:"custom_fields,omitempty"`
}

func (o *ListContractsContractsResponseScheduledCharges) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsContractsResponseScheduledCharges) GetProduct() ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesProduct {
	if o == nil {
		return ListContractsContractsResponse200ApplicationJSONResponseBodyDataAmendmentsScheduledChargesProduct{}
	}
	return o.Product
}

func (o *ListContractsContractsResponseScheduledCharges) GetSchedule() ListContractsContractsResponse200ApplicationJSONResponseBodySchedule {
	if o == nil {
		return ListContractsContractsResponse200ApplicationJSONResponseBodySchedule{}
	}
	return o.Schedule
}

func (o *ListContractsContractsResponseScheduledCharges) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListContractsContractsResponseScheduledCharges) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

func (o *ListContractsContractsResponseScheduledCharges) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

type ListContractsContractsResponseResellerType string

const (
	ListContractsContractsResponseResellerTypeAws           ListContractsContractsResponseResellerType = "AWS"
	ListContractsContractsResponseResellerTypeAwsProService ListContractsContractsResponseResellerType = "AWS_PRO_SERVICE"
	ListContractsContractsResponseResellerTypeGcp           ListContractsContractsResponseResellerType = "GCP"
	ListContractsContractsResponseResellerTypeGcpProService ListContractsContractsResponseResellerType = "GCP_PRO_SERVICE"
)

func (e ListContractsContractsResponseResellerType) ToPointer() *ListContractsContractsResponseResellerType {
	return &e
}
func (e *ListContractsContractsResponseResellerType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWS":
		fallthrough
	case "AWS_PRO_SERVICE":
		fallthrough
	case "GCP":
		fallthrough
	case "GCP_PRO_SERVICE":
		*e = ListContractsContractsResponseResellerType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsContractsResponseResellerType: %v", v)
	}
}

type ListContractsContractsResponseResellerRoyalties struct {
	ResellerType          ListContractsContractsResponseResellerType `json:"reseller_type"`
	Fraction              *float64                                   `json:"fraction,omitempty"`
	NetsuiteResellerID    *string                                    `json:"netsuite_reseller_id,omitempty"`
	StartingAt            *time.Time                                 `json:"starting_at,omitempty"`
	EndingBefore          *time.Time                                 `json:"ending_before,omitempty"`
	ResellerContractValue *float64                                   `json:"reseller_contract_value,omitempty"`
	AwsAccountNumber      *string                                    `json:"aws_account_number,omitempty"`
	AwsPayerReferenceID   *string                                    `json:"aws_payer_reference_id,omitempty"`
	AwsOfferID            *string                                    `json:"aws_offer_id,omitempty"`
	GcpAccountID          *string                                    `json:"gcp_account_id,omitempty"`
	GcpOfferID            *string                                    `json:"gcp_offer_id,omitempty"`
}

func (l ListContractsContractsResponseResellerRoyalties) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsContractsResponseResellerRoyalties) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsContractsResponseResellerRoyalties) GetResellerType() ListContractsContractsResponseResellerType {
	if o == nil {
		return ListContractsContractsResponseResellerType("")
	}
	return o.ResellerType
}

func (o *ListContractsContractsResponseResellerRoyalties) GetFraction() *float64 {
	if o == nil {
		return nil
	}
	return o.Fraction
}

func (o *ListContractsContractsResponseResellerRoyalties) GetNetsuiteResellerID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteResellerID
}

func (o *ListContractsContractsResponseResellerRoyalties) GetStartingAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.StartingAt
}

func (o *ListContractsContractsResponseResellerRoyalties) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *ListContractsContractsResponseResellerRoyalties) GetResellerContractValue() *float64 {
	if o == nil {
		return nil
	}
	return o.ResellerContractValue
}

func (o *ListContractsContractsResponseResellerRoyalties) GetAwsAccountNumber() *string {
	if o == nil {
		return nil
	}
	return o.AwsAccountNumber
}

func (o *ListContractsContractsResponseResellerRoyalties) GetAwsPayerReferenceID() *string {
	if o == nil {
		return nil
	}
	return o.AwsPayerReferenceID
}

func (o *ListContractsContractsResponseResellerRoyalties) GetAwsOfferID() *string {
	if o == nil {
		return nil
	}
	return o.AwsOfferID
}

func (o *ListContractsContractsResponseResellerRoyalties) GetGcpAccountID() *string {
	if o == nil {
		return nil
	}
	return o.GcpAccountID
}

func (o *ListContractsContractsResponseResellerRoyalties) GetGcpOfferID() *string {
	if o == nil {
		return nil
	}
	return o.GcpOfferID
}

type ListContractsAmendments struct {
	ID string `json:"id"`
	// This field's availability is dependent on your client's configuration.
	SalesforceOpportunityID *string                                   `json:"salesforce_opportunity_id,omitempty"`
	StartingAt              time.Time                                 `json:"starting_at"`
	Commits                 []ListContractsContractsResponseCommits   `json:"commits"`
	Credits                 []ListContractsContractsResponseCredits   `json:"credits,omitempty"`
	Overrides               []ListContractsContractsResponseOverrides `json:"overrides"`
	// This field's availability is dependent on your client's configuration.
	Discounts []ListContractsContractsResponseDiscounts `json:"discounts,omitempty"`
	// This field's availability is dependent on your client's configuration.
	ProfessionalServices []ListContractsContractsResponseProfessionalServices `json:"professional_services,omitempty"`
	ScheduledCharges     []ListContractsContractsResponseScheduledCharges     `json:"scheduled_charges"`
	// This field's availability is dependent on your client's configuration.
	ResellerRoyalties []ListContractsContractsResponseResellerRoyalties `json:"reseller_royalties,omitempty"`
	CreatedAt         time.Time                                         `json:"created_at"`
	CreatedBy         string                                            `json:"created_by"`
	// This field's availability is dependent on your client's configuration.
	NetsuiteSalesOrderID *string `json:"netsuite_sales_order_id,omitempty"`
}

func (l ListContractsAmendments) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListContractsAmendments) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListContractsAmendments) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsAmendments) GetSalesforceOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.SalesforceOpportunityID
}

func (o *ListContractsAmendments) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *ListContractsAmendments) GetCommits() []ListContractsContractsResponseCommits {
	if o == nil {
		return []ListContractsContractsResponseCommits{}
	}
	return o.Commits
}

func (o *ListContractsAmendments) GetCredits() []ListContractsContractsResponseCredits {
	if o == nil {
		return nil
	}
	return o.Credits
}

func (o *ListContractsAmendments) GetOverrides() []ListContractsContractsResponseOverrides {
	if o == nil {
		return []ListContractsContractsResponseOverrides{}
	}
	return o.Overrides
}

func (o *ListContractsAmendments) GetDiscounts() []ListContractsContractsResponseDiscounts {
	if o == nil {
		return nil
	}
	return o.Discounts
}

func (o *ListContractsAmendments) GetProfessionalServices() []ListContractsContractsResponseProfessionalServices {
	if o == nil {
		return nil
	}
	return o.ProfessionalServices
}

func (o *ListContractsAmendments) GetScheduledCharges() []ListContractsContractsResponseScheduledCharges {
	if o == nil {
		return []ListContractsContractsResponseScheduledCharges{}
	}
	return o.ScheduledCharges
}

func (o *ListContractsAmendments) GetResellerRoyalties() []ListContractsContractsResponseResellerRoyalties {
	if o == nil {
		return nil
	}
	return o.ResellerRoyalties
}

func (o *ListContractsAmendments) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *ListContractsAmendments) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *ListContractsAmendments) GetNetsuiteSalesOrderID() *string {
	if o == nil {
		return nil
	}
	return o.NetsuiteSalesOrderID
}

type ListContractsBillingProvider string

const (
	ListContractsBillingProviderAwsMarketplace   ListContractsBillingProvider = "aws_marketplace"
	ListContractsBillingProviderStripe           ListContractsBillingProvider = "stripe"
	ListContractsBillingProviderNetsuite         ListContractsBillingProvider = "netsuite"
	ListContractsBillingProviderCustom           ListContractsBillingProvider = "custom"
	ListContractsBillingProviderAzureMarketplace ListContractsBillingProvider = "azure_marketplace"
	ListContractsBillingProviderQuickbooksOnline ListContractsBillingProvider = "quickbooks_online"
	ListContractsBillingProviderWorkday          ListContractsBillingProvider = "workday"
	ListContractsBillingProviderGcpMarketplace   ListContractsBillingProvider = "gcp_marketplace"
)

func (e ListContractsBillingProvider) ToPointer() *ListContractsBillingProvider {
	return &e
}
func (e *ListContractsBillingProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "aws_marketplace":
		fallthrough
	case "stripe":
		fallthrough
	case "netsuite":
		fallthrough
	case "custom":
		fallthrough
	case "azure_marketplace":
		fallthrough
	case "quickbooks_online":
		fallthrough
	case "workday":
		fallthrough
	case "gcp_marketplace":
		*e = ListContractsBillingProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsBillingProvider: %v", v)
	}
}

type ListContractsDeliveryMethod string

const (
	ListContractsDeliveryMethodDirectToBillingProvider ListContractsDeliveryMethod = "direct_to_billing_provider"
	ListContractsDeliveryMethodAwsSqs                  ListContractsDeliveryMethod = "aws_sqs"
	ListContractsDeliveryMethodTackle                  ListContractsDeliveryMethod = "tackle"
	ListContractsDeliveryMethodAwsSns                  ListContractsDeliveryMethod = "aws_sns"
)

func (e ListContractsDeliveryMethod) ToPointer() *ListContractsDeliveryMethod {
	return &e
}
func (e *ListContractsDeliveryMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "direct_to_billing_provider":
		fallthrough
	case "aws_sqs":
		fallthrough
	case "tackle":
		fallthrough
	case "aws_sns":
		*e = ListContractsDeliveryMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListContractsDeliveryMethod: %v", v)
	}
}

// ListContractsCustomerBillingProviderConfiguration - This field's availability is dependent on your client's configuration.
type ListContractsCustomerBillingProviderConfiguration struct {
	BillingProvider ListContractsBillingProvider `json:"billing_provider"`
	DeliveryMethod  ListContractsDeliveryMethod  `json:"delivery_method"`
}

func (o *ListContractsCustomerBillingProviderConfiguration) GetBillingProvider() ListContractsBillingProvider {
	if o == nil {
		return ListContractsBillingProvider("")
	}
	return o.BillingProvider
}

func (o *ListContractsCustomerBillingProviderConfiguration) GetDeliveryMethod() ListContractsDeliveryMethod {
	if o == nil {
		return ListContractsDeliveryMethod("")
	}
	return o.DeliveryMethod
}

type ListContractsData struct {
	ID         string `json:"id"`
	CustomerID string `json:"customer_id"`
	// Prevents the creation of duplicates. If a request to create a record is made with a previously used uniqueness key, a new record will not be created and the request will fail with a 409 error.
	UniquenessKey *string                   `json:"uniqueness_key,omitempty"`
	Initial       ListContractsInitial      `json:"initial"`
	Current       ListContractsCurrent      `json:"current"`
	Amendments    []ListContractsAmendments `json:"amendments"`
	CustomFields  map[string]string         `json:"custom_fields,omitempty"`
	// This field's availability is dependent on your client's configuration.
	CustomerBillingProviderConfiguration *ListContractsCustomerBillingProviderConfiguration `json:"customer_billing_provider_configuration,omitempty"`
}

func (o *ListContractsData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ListContractsData) GetCustomerID() string {
	if o == nil {
		return ""
	}
	return o.CustomerID
}

func (o *ListContractsData) GetUniquenessKey() *string {
	if o == nil {
		return nil
	}
	return o.UniquenessKey
}

func (o *ListContractsData) GetInitial() ListContractsInitial {
	if o == nil {
		return ListContractsInitial{}
	}
	return o.Initial
}

func (o *ListContractsData) GetCurrent() ListContractsCurrent {
	if o == nil {
		return ListContractsCurrent{}
	}
	return o.Current
}

func (o *ListContractsData) GetAmendments() []ListContractsAmendments {
	if o == nil {
		return []ListContractsAmendments{}
	}
	return o.Amendments
}

func (o *ListContractsData) GetCustomFields() map[string]string {
	if o == nil {
		return nil
	}
	return o.CustomFields
}

func (o *ListContractsData) GetCustomerBillingProviderConfiguration() *ListContractsCustomerBillingProviderConfiguration {
	if o == nil {
		return nil
	}
	return o.CustomerBillingProviderConfiguration
}

// ListContractsResponseBody - Success
type ListContractsResponseBody struct {
	Data []ListContractsData `json:"data"`
}

func (o *ListContractsResponseBody) GetData() []ListContractsData {
	if o == nil {
		return []ListContractsData{}
	}
	return o.Data
}

type ListContractsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *ListContractsResponseBody
}

func (o *ListContractsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListContractsResponse) GetObject() *ListContractsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
