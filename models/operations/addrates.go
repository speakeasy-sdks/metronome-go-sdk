// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/metronome-go-sdk/internal/utils"
	"github.com/speakeasy-sdks/metronome-go-sdk/models/components"
	"time"
)

type AddRatesRateType string

const (
	AddRatesRateTypeFlatUpper         AddRatesRateType = "FLAT"
	AddRatesRateTypeFlatLower         AddRatesRateType = "flat"
	AddRatesRateTypePercentageUpper   AddRatesRateType = "PERCENTAGE"
	AddRatesRateTypePercentageLower   AddRatesRateType = "percentage"
	AddRatesRateTypeSubscriptionUpper AddRatesRateType = "SUBSCRIPTION"
	AddRatesRateTypeSubscriptionLower AddRatesRateType = "subscription"
	AddRatesRateTypeTieredUpper       AddRatesRateType = "TIERED"
	AddRatesRateTypeTieredLower       AddRatesRateType = "tiered"
	AddRatesRateTypeCustomUpper       AddRatesRateType = "CUSTOM"
	AddRatesRateTypeCustomLower       AddRatesRateType = "custom"
)

func (e AddRatesRateType) ToPointer() *AddRatesRateType {
	return &e
}
func (e *AddRatesRateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FLAT":
		fallthrough
	case "flat":
		fallthrough
	case "PERCENTAGE":
		fallthrough
	case "percentage":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "subscription":
		fallthrough
	case "TIERED":
		fallthrough
	case "tiered":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "custom":
		*e = AddRatesRateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddRatesRateType: %v", v)
	}
}

type AddRatesTiers struct {
	Size  *float64 `json:"size,omitempty"`
	Price float64  `json:"price"`
}

func (o *AddRatesTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *AddRatesTiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type AddRatesRateCardsRateType string

const (
	AddRatesRateCardsRateTypeFlatUpper         AddRatesRateCardsRateType = "FLAT"
	AddRatesRateCardsRateTypeFlatLower         AddRatesRateCardsRateType = "flat"
	AddRatesRateCardsRateTypePercentageUpper   AddRatesRateCardsRateType = "PERCENTAGE"
	AddRatesRateCardsRateTypePercentageLower   AddRatesRateCardsRateType = "percentage"
	AddRatesRateCardsRateTypeSubscriptionUpper AddRatesRateCardsRateType = "SUBSCRIPTION"
	AddRatesRateCardsRateTypeSubscriptionLower AddRatesRateCardsRateType = "subscription"
	AddRatesRateCardsRateTypeTieredUpper       AddRatesRateCardsRateType = "TIERED"
	AddRatesRateCardsRateTypeTieredLower       AddRatesRateCardsRateType = "tiered"
	AddRatesRateCardsRateTypeCustomUpper       AddRatesRateCardsRateType = "CUSTOM"
	AddRatesRateCardsRateTypeCustomLower       AddRatesRateCardsRateType = "custom"
)

func (e AddRatesRateCardsRateType) ToPointer() *AddRatesRateCardsRateType {
	return &e
}
func (e *AddRatesRateCardsRateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FLAT":
		fallthrough
	case "flat":
		fallthrough
	case "PERCENTAGE":
		fallthrough
	case "percentage":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "subscription":
		fallthrough
	case "TIERED":
		fallthrough
	case "tiered":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "custom":
		*e = AddRatesRateCardsRateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddRatesRateCardsRateType: %v", v)
	}
}

type AddRatesRateCardsTiers struct {
	Size  *float64 `json:"size,omitempty"`
	Price float64  `json:"price"`
}

func (o *AddRatesRateCardsTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *AddRatesRateCardsTiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type AddRatesCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *AddRatesCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AddRatesCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// AddRatesCommitRate - The rate that will be used to rate a product when it is paid for by a commit. This feature requires opt-in before it can be used. Please contact Metronome support to enable this feature.
type AddRatesCommitRate struct {
	RateType AddRatesRateCardsRateType `json:"rate_type"`
	// Commit rate price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price *float64 `json:"price,omitempty"`
	// Commit rate quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity *float64 `json:"quantity,omitempty"`
	// Commit rate proration configuration. Only valid for SUBSCRIPTION rate_type.
	IsProrated *bool `json:"is_prorated,omitempty"`
	// Only set for PERCENTAGE rate_type. Defaults to false. If true, rate is computed using list prices rather than the standard rates for this product on the contract.
	UseListPrices *bool `json:"use_list_prices,omitempty"`
	// Only set for TIERED rate_type.
	Tiers      []AddRatesRateCardsTiers `json:"tiers,omitempty"`
	CreditType *AddRatesCreditType      `json:"credit_type,omitempty"`
}

func (o *AddRatesCommitRate) GetRateType() AddRatesRateCardsRateType {
	if o == nil {
		return AddRatesRateCardsRateType("")
	}
	return o.RateType
}

func (o *AddRatesCommitRate) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *AddRatesCommitRate) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *AddRatesCommitRate) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *AddRatesCommitRate) GetUseListPrices() *bool {
	if o == nil {
		return nil
	}
	return o.UseListPrices
}

func (o *AddRatesCommitRate) GetTiers() []AddRatesRateCardsTiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *AddRatesCommitRate) GetCreditType() *AddRatesCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

type Rates struct {
	// ID of the product to add a rate for
	ProductID string `json:"product_id"`
	// Optional. List of pricing group key value pairs which will be used to calculate the price.
	PricingGroupValues map[string]string `json:"pricing_group_values,omitempty"`
	// inclusive effective date
	StartingAt time.Time `json:"starting_at"`
	// exclusive end date
	EndingBefore *time.Time       `json:"ending_before,omitempty"`
	Entitled     bool             `json:"entitled"`
	RateType     AddRatesRateType `json:"rate_type"`
	// Default price. For FLAT and SUBSCRIPTION rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price *float64 `json:"price,omitempty"`
	// "The Metronome ID of the credit type to associate with price, defaults to USD (cents) if not passed. Used by all rate_types except type PERCENTAGE. PERCENTAGE rates use the credit type of associated rates."
	CreditTypeID *string `json:"credit_type_id,omitempty"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity *float64 `json:"quantity,omitempty"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type.
	IsProrated *bool `json:"is_prorated,omitempty"`
	// Only set for PERCENTAGE rate_type. Defaults to false. If true, rate is computed using list prices rather than the standard rates for this product on the contract.
	UseListPrices *bool `json:"use_list_prices,omitempty"`
	// Only set for TIERED rate_type.
	Tiers []AddRatesTiers `json:"tiers,omitempty"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate processors.
	CustomRate map[string]any `json:"custom_rate,omitempty"`
	// The rate that will be used to rate a product when it is paid for by a commit. This feature requires opt-in before it can be used. Please contact Metronome support to enable this feature.
	CommitRate *AddRatesCommitRate `json:"commit_rate,omitempty"`
}

func (r Rates) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *Rates) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Rates) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *Rates) GetPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PricingGroupValues
}

func (o *Rates) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *Rates) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *Rates) GetEntitled() bool {
	if o == nil {
		return false
	}
	return o.Entitled
}

func (o *Rates) GetRateType() AddRatesRateType {
	if o == nil {
		return AddRatesRateType("")
	}
	return o.RateType
}

func (o *Rates) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *Rates) GetCreditTypeID() *string {
	if o == nil {
		return nil
	}
	return o.CreditTypeID
}

func (o *Rates) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *Rates) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *Rates) GetUseListPrices() *bool {
	if o == nil {
		return nil
	}
	return o.UseListPrices
}

func (o *Rates) GetTiers() []AddRatesTiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *Rates) GetCustomRate() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomRate
}

func (o *Rates) GetCommitRate() *AddRatesCommitRate {
	if o == nil {
		return nil
	}
	return o.CommitRate
}

// AddRatesRequestBody - Add new rates
type AddRatesRequestBody struct {
	RateCardID *string `json:"rate_card_id,omitempty"`
	Rates      []Rates `json:"rates,omitempty"`
}

func (o *AddRatesRequestBody) GetRateCardID() *string {
	if o == nil {
		return nil
	}
	return o.RateCardID
}

func (o *AddRatesRequestBody) GetRates() []Rates {
	if o == nil {
		return nil
	}
	return o.Rates
}

// AddRatesData - The ID of the rate card to which the rates were added.
type AddRatesData struct {
	ID string `json:"id"`
}

func (o *AddRatesData) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// AddRatesResponseBody - Success
type AddRatesResponseBody struct {
	// The ID of the rate card to which the rates were added.
	Data AddRatesData `json:"data"`
}

func (o *AddRatesResponseBody) GetData() AddRatesData {
	if o == nil {
		return AddRatesData{}
	}
	return o.Data
}

type AddRatesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *AddRatesResponseBody
}

func (o *AddRatesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *AddRatesResponse) GetObject() *AddRatesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
