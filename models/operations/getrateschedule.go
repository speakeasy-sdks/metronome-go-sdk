// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/metronome-go-sdk/internal/utils"
	"github.com/speakeasy-sdks/metronome-go-sdk/models/components"
	"time"
)

type Selectors struct {
	// Rates matching the product id will be included in the response.
	ProductID *string `json:"product_id,omitempty"`
	// List of pricing group key value pairs, rates matching all of the key / value pairs will be included in the response.
	PricingGroupValues map[string]string `json:"pricing_group_values,omitempty"`
	// List of pricing group key value pairs, rates containing the matching key / value pairs will be included in the response.
	PartialPricingGroupValues map[string]string `json:"partial_pricing_group_values,omitempty"`
}

func (o *Selectors) GetProductID() *string {
	if o == nil {
		return nil
	}
	return o.ProductID
}

func (o *Selectors) GetPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PricingGroupValues
}

func (o *Selectors) GetPartialPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PartialPricingGroupValues
}

// GetRateScheduleRequestBody - Rate schedule filter options.
type GetRateScheduleRequestBody struct {
	// ID of the rate card to get the schedule for
	RateCardID string `json:"rate_card_id"`
	// inclusive starting point for the rates schedule
	StartingAt time.Time `json:"starting_at"`
	// optional exclusive end date for the rates schedule. When not specified rates will show all future schedule segments.
	EndingBefore *time.Time `json:"ending_before,omitempty"`
	// List of rate selectors, rates matching ANY of the selector will be included in the response Passing no selectors will result in all rates being returned.
	Selectors []Selectors `json:"selectors,omitempty"`
}

func (g GetRateScheduleRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetRateScheduleRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetRateScheduleRequestBody) GetRateCardID() string {
	if o == nil {
		return ""
	}
	return o.RateCardID
}

func (o *GetRateScheduleRequestBody) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *GetRateScheduleRequestBody) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *GetRateScheduleRequestBody) GetSelectors() []Selectors {
	if o == nil {
		return nil
	}
	return o.Selectors
}

type GetRateScheduleRequest struct {
	// Max number of results that should be returned
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Cursor that indicates where the next page of results should start.
	NextPage *string `queryParam:"style=form,explode=true,name=next_page"`
	// Rate schedule filter options.
	RequestBody *GetRateScheduleRequestBody `request:"mediaType=application/json"`
}

func (o *GetRateScheduleRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetRateScheduleRequest) GetNextPage() *string {
	if o == nil {
		return nil
	}
	return o.NextPage
}

func (o *GetRateScheduleRequest) GetRequestBody() *GetRateScheduleRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type GetRateScheduleRateCardsRateType string

const (
	GetRateScheduleRateCardsRateTypeFlatUpper         GetRateScheduleRateCardsRateType = "FLAT"
	GetRateScheduleRateCardsRateTypeFlatLower         GetRateScheduleRateCardsRateType = "flat"
	GetRateScheduleRateCardsRateTypePercentageUpper   GetRateScheduleRateCardsRateType = "PERCENTAGE"
	GetRateScheduleRateCardsRateTypePercentageLower   GetRateScheduleRateCardsRateType = "percentage"
	GetRateScheduleRateCardsRateTypeSubscriptionUpper GetRateScheduleRateCardsRateType = "SUBSCRIPTION"
	GetRateScheduleRateCardsRateTypeSubscriptionLower GetRateScheduleRateCardsRateType = "subscription"
	GetRateScheduleRateCardsRateTypeCustomUpper       GetRateScheduleRateCardsRateType = "CUSTOM"
	GetRateScheduleRateCardsRateTypeCustomLower       GetRateScheduleRateCardsRateType = "custom"
	GetRateScheduleRateCardsRateTypeTieredUpper       GetRateScheduleRateCardsRateType = "TIERED"
	GetRateScheduleRateCardsRateTypeTieredLower       GetRateScheduleRateCardsRateType = "tiered"
)

func (e GetRateScheduleRateCardsRateType) ToPointer() *GetRateScheduleRateCardsRateType {
	return &e
}
func (e *GetRateScheduleRateCardsRateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FLAT":
		fallthrough
	case "flat":
		fallthrough
	case "PERCENTAGE":
		fallthrough
	case "percentage":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "subscription":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "custom":
		fallthrough
	case "TIERED":
		fallthrough
	case "tiered":
		*e = GetRateScheduleRateCardsRateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRateScheduleRateCardsRateType: %v", v)
	}
}

type GetRateScheduleRateCardsTiers struct {
	Size  *float64 `json:"size,omitempty"`
	Price float64  `json:"price"`
}

func (o *GetRateScheduleRateCardsTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *GetRateScheduleRateCardsTiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type GetRateScheduleRateCardsCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetRateScheduleRateCardsCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetRateScheduleRateCardsCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type Rate struct {
	RateType GetRateScheduleRateCardsRateType `json:"rate_type"`
	// Default price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price *float64 `json:"price,omitempty"`
	// Only set for CUSTOM rate_type. This field is interpreted by custom rate processors.
	CustomRate map[string]any `json:"custom_rate,omitempty"`
	// Only set for PERCENTAGE rate_type. Defaults to false. If true, rate is computed using list prices rather than the standard rates for this product on the contract.
	UseListPrices *bool `json:"use_list_prices,omitempty"`
	// Default quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity *float64 `json:"quantity,omitempty"`
	// Default proration configuration. Only valid for SUBSCRIPTION rate_type.
	IsProrated *bool `json:"is_prorated,omitempty"`
	// Only set for TIERED rate_type.
	Tiers []GetRateScheduleRateCardsTiers `json:"tiers,omitempty"`
	// if pricing groups are used, this will contain the values used to calculate the price
	PricingGroupValues map[string]string                   `json:"pricing_group_values,omitempty"`
	CreditType         *GetRateScheduleRateCardsCreditType `json:"credit_type,omitempty"`
}

func (o *Rate) GetRateType() GetRateScheduleRateCardsRateType {
	if o == nil {
		return GetRateScheduleRateCardsRateType("")
	}
	return o.RateType
}

func (o *Rate) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *Rate) GetCustomRate() map[string]any {
	if o == nil {
		return nil
	}
	return o.CustomRate
}

func (o *Rate) GetUseListPrices() *bool {
	if o == nil {
		return nil
	}
	return o.UseListPrices
}

func (o *Rate) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *Rate) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *Rate) GetTiers() []GetRateScheduleRateCardsTiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *Rate) GetPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PricingGroupValues
}

func (o *Rate) GetCreditType() *GetRateScheduleRateCardsCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

type GetRateScheduleRateType string

const (
	GetRateScheduleRateTypeFlatUpper         GetRateScheduleRateType = "FLAT"
	GetRateScheduleRateTypeFlatLower         GetRateScheduleRateType = "flat"
	GetRateScheduleRateTypePercentageUpper   GetRateScheduleRateType = "PERCENTAGE"
	GetRateScheduleRateTypePercentageLower   GetRateScheduleRateType = "percentage"
	GetRateScheduleRateTypeSubscriptionUpper GetRateScheduleRateType = "SUBSCRIPTION"
	GetRateScheduleRateTypeSubscriptionLower GetRateScheduleRateType = "subscription"
	GetRateScheduleRateTypeTieredUpper       GetRateScheduleRateType = "TIERED"
	GetRateScheduleRateTypeTieredLower       GetRateScheduleRateType = "tiered"
	GetRateScheduleRateTypeCustomUpper       GetRateScheduleRateType = "CUSTOM"
	GetRateScheduleRateTypeCustomLower       GetRateScheduleRateType = "custom"
)

func (e GetRateScheduleRateType) ToPointer() *GetRateScheduleRateType {
	return &e
}
func (e *GetRateScheduleRateType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "FLAT":
		fallthrough
	case "flat":
		fallthrough
	case "PERCENTAGE":
		fallthrough
	case "percentage":
		fallthrough
	case "SUBSCRIPTION":
		fallthrough
	case "subscription":
		fallthrough
	case "TIERED":
		fallthrough
	case "tiered":
		fallthrough
	case "CUSTOM":
		fallthrough
	case "custom":
		*e = GetRateScheduleRateType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRateScheduleRateType: %v", v)
	}
}

type GetRateScheduleTiers struct {
	Size  *float64 `json:"size,omitempty"`
	Price float64  `json:"price"`
}

func (o *GetRateScheduleTiers) GetSize() *float64 {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *GetRateScheduleTiers) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type GetRateScheduleCreditType struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *GetRateScheduleCreditType) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetRateScheduleCreditType) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// GetRateScheduleCommitRate - The rate that will be used to rate a product when it is paid for by a commit. This feature requires opt-in before it can be used. Please contact Metronome support to enable this feature.
type GetRateScheduleCommitRate struct {
	RateType GetRateScheduleRateType `json:"rate_type"`
	// Commit rate price. For FLAT rate_type, this must be >=0. For PERCENTAGE rate_type, this is a decimal fraction, e.g. use 0.1 for 10%; this must be >=0 and <=1.
	Price *float64 `json:"price,omitempty"`
	// Commit rate quantity. For SUBSCRIPTION rate_type, this must be >=0.
	Quantity *float64 `json:"quantity,omitempty"`
	// Commit rate proration configuration. Only valid for SUBSCRIPTION rate_type.
	IsProrated *bool `json:"is_prorated,omitempty"`
	// Only set for PERCENTAGE rate_type. Defaults to false. If true, rate is computed using list prices rather than the standard rates for this product on the contract.
	UseListPrices *bool `json:"use_list_prices,omitempty"`
	// Only set for TIERED rate_type.
	Tiers      []GetRateScheduleTiers     `json:"tiers,omitempty"`
	CreditType *GetRateScheduleCreditType `json:"credit_type,omitempty"`
}

func (o *GetRateScheduleCommitRate) GetRateType() GetRateScheduleRateType {
	if o == nil {
		return GetRateScheduleRateType("")
	}
	return o.RateType
}

func (o *GetRateScheduleCommitRate) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *GetRateScheduleCommitRate) GetQuantity() *float64 {
	if o == nil {
		return nil
	}
	return o.Quantity
}

func (o *GetRateScheduleCommitRate) GetIsProrated() *bool {
	if o == nil {
		return nil
	}
	return o.IsProrated
}

func (o *GetRateScheduleCommitRate) GetUseListPrices() *bool {
	if o == nil {
		return nil
	}
	return o.UseListPrices
}

func (o *GetRateScheduleCommitRate) GetTiers() []GetRateScheduleTiers {
	if o == nil {
		return nil
	}
	return o.Tiers
}

func (o *GetRateScheduleCommitRate) GetCreditType() *GetRateScheduleCreditType {
	if o == nil {
		return nil
	}
	return o.CreditType
}

type GetRateScheduleData struct {
	ProductID          string            `json:"product_id"`
	ProductName        string            `json:"product_name"`
	ProductTags        []string          `json:"product_tags"`
	PricingGroupValues map[string]string `json:"pricing_group_values,omitempty"`
	StartingAt         time.Time         `json:"starting_at"`
	EndingBefore       *time.Time        `json:"ending_before,omitempty"`
	Entitled           bool              `json:"entitled"`
	Rate               Rate              `json:"rate"`
	// The rate that will be used to rate a product when it is paid for by a commit. This feature requires opt-in before it can be used. Please contact Metronome support to enable this feature.
	CommitRate *GetRateScheduleCommitRate `json:"commit_rate,omitempty"`
}

func (g GetRateScheduleData) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetRateScheduleData) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetRateScheduleData) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *GetRateScheduleData) GetProductName() string {
	if o == nil {
		return ""
	}
	return o.ProductName
}

func (o *GetRateScheduleData) GetProductTags() []string {
	if o == nil {
		return []string{}
	}
	return o.ProductTags
}

func (o *GetRateScheduleData) GetPricingGroupValues() map[string]string {
	if o == nil {
		return nil
	}
	return o.PricingGroupValues
}

func (o *GetRateScheduleData) GetStartingAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartingAt
}

func (o *GetRateScheduleData) GetEndingBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.EndingBefore
}

func (o *GetRateScheduleData) GetEntitled() bool {
	if o == nil {
		return false
	}
	return o.Entitled
}

func (o *GetRateScheduleData) GetRate() Rate {
	if o == nil {
		return Rate{}
	}
	return o.Rate
}

func (o *GetRateScheduleData) GetCommitRate() *GetRateScheduleCommitRate {
	if o == nil {
		return nil
	}
	return o.CommitRate
}

// GetRateScheduleResponseBody - Success
type GetRateScheduleResponseBody struct {
	NextPage *string               `json:"next_page,omitempty"`
	Data     []GetRateScheduleData `json:"data"`
}

func (o *GetRateScheduleResponseBody) GetNextPage() *string {
	if o == nil {
		return nil
	}
	return o.NextPage
}

func (o *GetRateScheduleResponseBody) GetData() []GetRateScheduleData {
	if o == nil {
		return []GetRateScheduleData{}
	}
	return o.Data
}

type GetRateScheduleResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *GetRateScheduleResponseBody
}

func (o *GetRateScheduleResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetRateScheduleResponse) GetObject() *GetRateScheduleResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
